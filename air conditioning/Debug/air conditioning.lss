
air conditioning.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004ec  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  000004ec  00000560  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000056c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000059c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000110  00000000  00000000  000005d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001256  00000000  00000000  000006e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d9  00000000  00000000  0000193e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a33  00000000  00000000  00002217  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001c4  00000000  00000000  00002c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000777  00000000  00000000  00002e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000099f  00000000  00000000  00003587  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  00003f26  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ee       	ldi	r30, 0xEC	; 236
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 36       	cpi	r26, 0x6C	; 108
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e6       	ldi	r26, 0x6C	; 108
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 56 01 	call	0x2ac	; 0x2ac <main>
  8a:	0c 94 74 02 	jmp	0x4e8	; 0x4e8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:

void APP_init()
{
	//TMR1_init();
	
	LCD_init();
  92:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_init>
	
	LCD_sendcmd(LCD_CLEAR);
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_sendcmd>
	
	LCD_goto(1 , 1);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	0e 94 3e 01 	call	0x27c	; 0x27c <LCD_goto>
	
	LCD_writestr("Allah Akbar");
  a4:	80 e6       	ldi	r24, 0x60	; 96
  a6:	90 e0       	ldi	r25, 0x00	; 0
  a8:	0e 94 2b 01 	call	0x256	; 0x256 <LCD_writestr>
  ac:	08 95       	ret

000000ae <APP_start>:
	
}


void APP_start()
{
  ae:	08 95       	ret

000000b0 <LCD_sendcmd>:
/** FUNCTION TO SEND COMMAND TO LCD                       */
/** ARGUMENTS   : COMMAND                                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_sendcmd(uint8_t u8_a_cmd)
{
  b0:	cf 93       	push	r28
  b2:	c8 2f       	mov	r28, r24
	TMR1_init();
  b4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <TMR1_init>
		DIO_setpinvalue(LCD_8BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
		_delay_ms(5); /** LOW **/
		
		#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_LOW);  /** COMMAND MODE       **/
  b8:	40 e0       	ldi	r20, 0x00	; 0
  ba:	61 e0       	ldi	r22, 0x01	; 1
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_setpinvalue>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);  /** WRITE TO LCD MODE  **/
  c2:	40 e0       	ldi	r20, 0x00	; 0
  c4:	62 e0       	ldi	r22, 0x02	; 2
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_setpinvalue>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);   /** PREPARE FOR LATCH  **/
  cc:	40 e0       	ldi	r20, 0x00	; 0
  ce:	63 e0       	ldi	r22, 0x03	; 3
  d0:	81 e0       	ldi	r24, 0x01	; 1
  d2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_setpinvalue>
		
		PORTA = ((u8_a_cmd & 0xF0) | (PORTA & 0x0F)); /** SEND THE MSB(HIGH NIBBLE) **/
  d6:	8b b3       	in	r24, 0x1b	; 27
  d8:	9c 2f       	mov	r25, r28
  da:	90 7f       	andi	r25, 0xF0	; 240
  dc:	8f 70       	andi	r24, 0x0F	; 15
  de:	89 2b       	or	r24, r25
  e0:	8b bb       	out	0x1b, r24	; 27
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
  e2:	41 e0       	ldi	r20, 0x01	; 1
  e4:	63 e0       	ldi	r22, 0x03	; 3
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_setpinvalue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	89 ef       	ldi	r24, 0xF9	; 249
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <LCD_sendcmd+0x40>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <LCD_sendcmd+0x46>
  f6:	00 00       	nop
		_delay_ms(1);
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
  f8:	40 e0       	ldi	r20, 0x00	; 0
  fa:	63 e0       	ldi	r22, 0x03	; 3
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_setpinvalue>
		
		
		PORTA = (((u8_a_cmd << 4) & 0xF0) | (PORTA & 0x0F)); /** SEND THE LSB(LOW NIBBLE) **/
 102:	20 e1       	ldi	r18, 0x10	; 16
 104:	c2 9f       	mul	r28, r18
 106:	c0 01       	movw	r24, r0
 108:	11 24       	eor	r1, r1
 10a:	9b b3       	in	r25, 0x1b	; 27
 10c:	9f 70       	andi	r25, 0x0F	; 15
 10e:	89 2b       	or	r24, r25
 110:	8b bb       	out	0x1b, r24	; 27
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
 112:	41 e0       	ldi	r20, 0x01	; 1
 114:	63 e0       	ldi	r22, 0x03	; 3
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_setpinvalue>
 11c:	89 ef       	ldi	r24, 0xF9	; 249
 11e:	90 e0       	ldi	r25, 0x00	; 0
 120:	01 97       	sbiw	r24, 0x01	; 1
 122:	f1 f7       	brne	.-4      	; 0x120 <LCD_sendcmd+0x70>
 124:	00 c0       	rjmp	.+0      	; 0x126 <LCD_sendcmd+0x76>
 126:	00 00       	nop
		_delay_ms(1);
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);    /** LATCH **/
 128:	40 e0       	ldi	r20, 0x00	; 0
 12a:	63 e0       	ldi	r22, 0x03	; 3
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_setpinvalue>
 132:	81 ee       	ldi	r24, 0xE1	; 225
 134:	94 e0       	ldi	r25, 0x04	; 4
 136:	01 97       	sbiw	r24, 0x01	; 1
 138:	f1 f7       	brne	.-4      	; 0x136 <LCD_sendcmd+0x86>
 13a:	00 c0       	rjmp	.+0      	; 0x13c <LCD_sendcmd+0x8c>
 13c:	00 00       	nop
		
		_delay_ms(5); /** 5 ms BEFORE SENDING THE NEXT COMMAND **/
		
		#endif
}
 13e:	cf 91       	pop	r28
 140:	08 95       	ret

00000142 <LCD_init>:
/**********************************************************/
LCD_status LCD_init(void)
{
	LCD_status en_a_lcdinitstatus = VALID__LCD_INIT ; /** VARIABLE TO OLD THE RETURN STATUS OF THE FUNCTION **/
	
	TMR1_init();
 142:	0e 94 59 02 	call	0x4b2	; 0x4b2 <TMR1_init>
		LCD_sendcmd(LCD_CLEAR);       /** CLEAR THE LCD                                    **/
		
		
		#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
		
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_OUTPUT); /** SET RS PIN AS OUTPUT PIN **/
 146:	41 e0       	ldi	r20, 0x01	; 1
 148:	61 e0       	ldi	r22, 0x01	; 1
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_OUTPUT); /** SET RW PIN AS OUTPUT PIN **/
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	62 e0       	ldi	r22, 0x02	; 2
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_OUTPUT);  /** SET E PIN AS OUTPUT PIN  **/
 15a:	41 e0       	ldi	r20, 0x01	; 1
 15c:	63 e0       	ldi	r22, 0x03	; 3
 15e:	81 e0       	ldi	r24, 0x01	; 1
 160:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DIO_setpindir>
		
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D4_PIN , DIO_PIN_OUTPUT); /** 4 DATA PINS AS OUTPUT **/
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	64 e0       	ldi	r22, 0x04	; 4
 168:	80 e0       	ldi	r24, 0x00	; 0
 16a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D5_PIN , DIO_PIN_OUTPUT);
 16e:	41 e0       	ldi	r20, 0x01	; 1
 170:	65 e0       	ldi	r22, 0x05	; 5
 172:	80 e0       	ldi	r24, 0x00	; 0
 174:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D6_PIN , DIO_PIN_OUTPUT);
 178:	41 e0       	ldi	r20, 0x01	; 1
 17a:	66 e0       	ldi	r22, 0x06	; 6
 17c:	80 e0       	ldi	r24, 0x00	; 0
 17e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D7_PIN , DIO_PIN_OUTPUT);
 182:	41 e0       	ldi	r20, 0x01	; 1
 184:	67 e0       	ldi	r22, 0x07	; 7
 186:	80 e0       	ldi	r24, 0x00	; 0
 188:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <DIO_setpindir>
 18c:	87 ea       	ldi	r24, 0xA7	; 167
 18e:	91 e6       	ldi	r25, 0x61	; 97
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <LCD_init+0x4e>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LCD_init+0x54>
 196:	00 00       	nop
		
		_delay_ms(100); /** DELAY FOR LCD TO BE INITIALIZED **/
		
		/** SEND SOME COMMANDS TO THE LCD FOR INITIAL SET   **/
		
		LCD_sendcmd(LCD_4BIT_MODE_CMD1); /** SEND THREE COMMANDS FOR LCD TO SET 4 BIT OPERATION MODE ( 2 LINES , 5*8 MATRIX ) **/
 198:	83 e3       	ldi	r24, 0x33	; 51
 19a:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_sendcmd>
		LCD_sendcmd(LCD_4BIT_MODE_CMD2);
 19e:	82 e3       	ldi	r24, 0x32	; 50
 1a0:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_sendcmd>
		LCD_sendcmd(LCD_4BIT_MODE_CMD3);
 1a4:	88 e2       	ldi	r24, 0x28	; 40
 1a6:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_sendcmd>
		
		LCD_sendcmd(LCD_CURSOR_OFF);     /** NO NEED FOR CURSOR SO IT IS OFF                  **/
 1aa:	8c e0       	ldi	r24, 0x0C	; 12
 1ac:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_sendcmd>
		LCD_sendcmd(LCD_CURSOR_INC);     /** DIRECTION OF WRITING FROM LEFT TO RIGHT          **/
 1b0:	86 e0       	ldi	r24, 0x06	; 6
 1b2:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_sendcmd>
		LCD_sendcmd(LCD_RETURN_HOME);    /** CURSOR STARTS FROM ITS HOME POSITION             **/
 1b6:	82 e0       	ldi	r24, 0x02	; 2
 1b8:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_sendcmd>
		LCD_sendcmd(LCD_CLEAR);          /** CLEAR THE LCD                                    **/
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_sendcmd>
		
		#endif 
		
}
 1c2:	08 95       	ret

000001c4 <LCD_writechar>:
/** FUNCTION TO DISPLAY CHARACTER ON LCD                  */
/** ARGUMENTS   : CHARACTER                               */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writechar(uint8_t u8_a_chr)
{
 1c4:	cf 93       	push	r28
 1c6:	c8 2f       	mov	r28, r24
	TMR1_init();
 1c8:	0e 94 59 02 	call	0x4b2	; 0x4b2 <TMR1_init>
	
	_delay_ms(5); /** 5 ms BEFORE SENDING THE NEXT CHARACTER **/
	
	#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_HIGH);  /** DATA MODE         **/
 1cc:	41 e0       	ldi	r20, 0x01	; 1
 1ce:	61 e0       	ldi	r22, 0x01	; 1
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_setpinvalue>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);   /** WRITE TO LCD MODE **/
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	62 e0       	ldi	r22, 0x02	; 2
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_setpinvalue>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);    /** DATA MODE         **/
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	63 e0       	ldi	r22, 0x03	; 3
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_setpinvalue>
	
	
	PORTA = ((u8_a_chr & 0xF0) | (PORTA & 0x0F)); /** SEND THE MSB (HIGH NIBBLE) **/
 1ea:	8b b3       	in	r24, 0x1b	; 27
 1ec:	9c 2f       	mov	r25, r28
 1ee:	90 7f       	andi	r25, 0xF0	; 240
 1f0:	8f 70       	andi	r24, 0x0F	; 15
 1f2:	89 2b       	or	r24, r25
 1f4:	8b bb       	out	0x1b, r24	; 27
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
 1f6:	41 e0       	ldi	r20, 0x01	; 1
 1f8:	63 e0       	ldi	r22, 0x03	; 3
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_setpinvalue>
 200:	89 ef       	ldi	r24, 0xF9	; 249
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	01 97       	sbiw	r24, 0x01	; 1
 206:	f1 f7       	brne	.-4      	; 0x204 <LCD_writechar+0x40>
 208:	00 c0       	rjmp	.+0      	; 0x20a <LCD_writechar+0x46>
 20a:	00 00       	nop
	_delay_ms(1);
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW); /** LATCH **/
 20c:	40 e0       	ldi	r20, 0x00	; 0
 20e:	63 e0       	ldi	r22, 0x03	; 3
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_setpinvalue>
		
	PORTA = (((u8_a_chr << 4) & 0xF0) | (PORTA & 0x0F)); /** SEND THE LSB (LOW NIBBLE) **/
 216:	20 e1       	ldi	r18, 0x10	; 16
 218:	c2 9f       	mul	r28, r18
 21a:	c0 01       	movw	r24, r0
 21c:	11 24       	eor	r1, r1
 21e:	9b b3       	in	r25, 0x1b	; 27
 220:	9f 70       	andi	r25, 0x0F	; 15
 222:	89 2b       	or	r24, r25
 224:	8b bb       	out	0x1b, r24	; 27
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	63 e0       	ldi	r22, 0x03	; 3
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_setpinvalue>
 230:	89 ef       	ldi	r24, 0xF9	; 249
 232:	90 e0       	ldi	r25, 0x00	; 0
 234:	01 97       	sbiw	r24, 0x01	; 1
 236:	f1 f7       	brne	.-4      	; 0x234 <LCD_writechar+0x70>
 238:	00 c0       	rjmp	.+0      	; 0x23a <LCD_writechar+0x76>
 23a:	00 00       	nop
	_delay_ms(1);
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
 23c:	40 e0       	ldi	r20, 0x00	; 0
 23e:	63 e0       	ldi	r22, 0x03	; 3
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	0e 94 da 01 	call	0x3b4	; 0x3b4 <DIO_setpinvalue>
 246:	81 ee       	ldi	r24, 0xE1	; 225
 248:	94 e0       	ldi	r25, 0x04	; 4
 24a:	01 97       	sbiw	r24, 0x01	; 1
 24c:	f1 f7       	brne	.-4      	; 0x24a <LCD_writechar+0x86>
 24e:	00 c0       	rjmp	.+0      	; 0x250 <LCD_writechar+0x8c>
 250:	00 00       	nop
	
	_delay_ms(5); /** 5 ms BEFORE SENDING THE NEXT CHARACTER **/
	
	#endif
}
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <LCD_writestr>:
/** FUNCTION TO DISPLAY STRING ON LCD                     */
/** ARGUMENTS   : STRING                                  */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writestr(uint8_t* u8_s_str)
{
 256:	0f 93       	push	r16
 258:	1f 93       	push	r17
 25a:	cf 93       	push	r28
 25c:	8c 01       	movw	r16, r24
	uint8_t u8_a_letter = 0;   /** VARIABLE SIMULATES LETTER **/
 25e:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (u8_s_str[u8_a_letter] != '\0') /** WHILE LETTER ISN'T NULL **/
 260:	03 c0       	rjmp	.+6      	; 0x268 <LCD_writestr+0x12>
	{
		LCD_writechar(u8_s_str[u8_a_letter]); /** SEND LETTER TO LCD **/
 262:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <LCD_writechar>
		
		u8_a_letter++; /** JUMP TO THE NEXT LETTER **/
 266:	cf 5f       	subi	r28, 0xFF	; 255
/**********************************************************/
LCD_status LCD_writestr(uint8_t* u8_s_str)
{
	uint8_t u8_a_letter = 0;   /** VARIABLE SIMULATES LETTER **/
	
	while (u8_s_str[u8_a_letter] != '\0') /** WHILE LETTER ISN'T NULL **/
 268:	f8 01       	movw	r30, r16
 26a:	ec 0f       	add	r30, r28
 26c:	f1 1d       	adc	r31, r1
 26e:	80 81       	ld	r24, Z
 270:	81 11       	cpse	r24, r1
 272:	f7 cf       	rjmp	.-18     	; 0x262 <LCD_writestr+0xc>
	{
		LCD_writechar(u8_s_str[u8_a_letter]); /** SEND LETTER TO LCD **/
		
		u8_a_letter++; /** JUMP TO THE NEXT LETTER **/
	}
}
 274:	cf 91       	pop	r28
 276:	1f 91       	pop	r17
 278:	0f 91       	pop	r16
 27a:	08 95       	ret

0000027c <LCD_goto>:
/** FUNCTION TO JUMP TO SPECIFIC POSITION ON LCD          */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status  LCD_goto(uint8_t u8_a_row , uint8_t u8_a_column)
{
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
 280:	00 d0       	rcall	.+0      	; 0x282 <LCD_goto+0x6>
 282:	cd b7       	in	r28, 0x3d	; 61
 284:	de b7       	in	r29, 0x3e	; 62
	uint8_t positions[2] = {0x80 , 0xC0}; /** POSITIONS OF 1st & 2nd ROWS **/
 286:	90 e8       	ldi	r25, 0x80	; 128
 288:	99 83       	std	Y+1, r25	; 0x01
 28a:	90 ec       	ldi	r25, 0xC0	; 192
 28c:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_sendcmd(positions[u8_a_row] + u8_a_column); /** GO TO SPECIFIC MATRIX **/
 28e:	e1 e0       	ldi	r30, 0x01	; 1
 290:	f0 e0       	ldi	r31, 0x00	; 0
 292:	ec 0f       	add	r30, r28
 294:	fd 1f       	adc	r31, r29
 296:	e8 0f       	add	r30, r24
 298:	f1 1d       	adc	r31, r1
 29a:	80 81       	ld	r24, Z
 29c:	86 0f       	add	r24, r22
 29e:	0e 94 58 00 	call	0xb0	; 0xb0 <LCD_sendcmd>
 2a2:	0f 90       	pop	r0
 2a4:	0f 90       	pop	r0
 2a6:	df 91       	pop	r29
 2a8:	cf 91       	pop	r28
 2aa:	08 95       	ret

000002ac <main>:

#include "APP/app.h"

int main(void)
{
	APP_init();
 2ac:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
	
    /* Replace with your application code */
    while (1) 
    {
		APP_start();
 2b0:	0e 94 57 00 	call	0xae	; 0xae <APP_start>
 2b4:	fd cf       	rjmp	.-6      	; 0x2b0 <main+0x4>

000002b6 <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
 2b6:	44 23       	and	r20, r20
 2b8:	19 f0       	breq	.+6      	; 0x2c0 <DIO_setpindir+0xa>
 2ba:	41 30       	cpi	r20, 0x01	; 1
 2bc:	e9 f1       	breq	.+122    	; 0x338 <DIO_setpindir+0x82>
 2be:	74 c0       	rjmp	.+232    	; 0x3a8 <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 2c0:	81 30       	cpi	r24, 0x01	; 1
 2c2:	99 f0       	breq	.+38     	; 0x2ea <DIO_setpindir+0x34>
 2c4:	28 f0       	brcs	.+10     	; 0x2d0 <DIO_setpindir+0x1a>
 2c6:	82 30       	cpi	r24, 0x02	; 2
 2c8:	e9 f0       	breq	.+58     	; 0x304 <DIO_setpindir+0x4e>
 2ca:	83 30       	cpi	r24, 0x03	; 3
 2cc:	41 f1       	breq	.+80     	; 0x31e <DIO_setpindir+0x68>
 2ce:	6e c0       	rjmp	.+220    	; 0x3ac <DIO_setpindir+0xf6>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
 2d0:	2a b3       	in	r18, 0x1a	; 26
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	02 c0       	rjmp	.+4      	; 0x2dc <DIO_setpindir+0x26>
 2d8:	88 0f       	add	r24, r24
 2da:	99 1f       	adc	r25, r25
 2dc:	6a 95       	dec	r22
 2de:	e2 f7       	brpl	.-8      	; 0x2d8 <DIO_setpindir+0x22>
 2e0:	80 95       	com	r24
 2e2:	82 23       	and	r24, r18
 2e4:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 2e6:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
 2e8:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
 2ea:	27 b3       	in	r18, 0x17	; 23
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <DIO_setpindir+0x40>
 2f2:	88 0f       	add	r24, r24
 2f4:	99 1f       	adc	r25, r25
 2f6:	6a 95       	dec	r22
 2f8:	e2 f7       	brpl	.-8      	; 0x2f2 <DIO_setpindir+0x3c>
 2fa:	80 95       	com	r24
 2fc:	82 23       	and	r24, r18
 2fe:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 300:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
 302:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
 304:	24 b3       	in	r18, 0x14	; 20
 306:	81 e0       	ldi	r24, 0x01	; 1
 308:	90 e0       	ldi	r25, 0x00	; 0
 30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_setpindir+0x5a>
 30c:	88 0f       	add	r24, r24
 30e:	99 1f       	adc	r25, r25
 310:	6a 95       	dec	r22
 312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_setpindir+0x56>
 314:	80 95       	com	r24
 316:	82 23       	and	r24, r18
 318:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 31a:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
 31c:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
 31e:	21 b3       	in	r18, 0x11	; 17
 320:	81 e0       	ldi	r24, 0x01	; 1
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	02 c0       	rjmp	.+4      	; 0x32a <DIO_setpindir+0x74>
 326:	88 0f       	add	r24, r24
 328:	99 1f       	adc	r25, r25
 32a:	6a 95       	dec	r22
 32c:	e2 f7       	brpl	.-8      	; 0x326 <DIO_setpindir+0x70>
 32e:	80 95       	com	r24
 330:	82 23       	and	r24, r18
 332:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 334:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
 336:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 338:	81 30       	cpi	r24, 0x01	; 1
 33a:	91 f0       	breq	.+36     	; 0x360 <DIO_setpindir+0xaa>
 33c:	28 f0       	brcs	.+10     	; 0x348 <DIO_setpindir+0x92>
 33e:	82 30       	cpi	r24, 0x02	; 2
 340:	d9 f0       	breq	.+54     	; 0x378 <DIO_setpindir+0xc2>
 342:	83 30       	cpi	r24, 0x03	; 3
 344:	29 f1       	breq	.+74     	; 0x390 <DIO_setpindir+0xda>
 346:	34 c0       	rjmp	.+104    	; 0x3b0 <DIO_setpindir+0xfa>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 348:	2a b3       	in	r18, 0x1a	; 26
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	02 c0       	rjmp	.+4      	; 0x354 <DIO_setpindir+0x9e>
 350:	88 0f       	add	r24, r24
 352:	99 1f       	adc	r25, r25
 354:	6a 95       	dec	r22
 356:	e2 f7       	brpl	.-8      	; 0x350 <DIO_setpindir+0x9a>
 358:	82 2b       	or	r24, r18
 35a:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 35c:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 35e:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 360:	27 b3       	in	r18, 0x17	; 23
 362:	81 e0       	ldi	r24, 0x01	; 1
 364:	90 e0       	ldi	r25, 0x00	; 0
 366:	02 c0       	rjmp	.+4      	; 0x36c <DIO_setpindir+0xb6>
 368:	88 0f       	add	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	6a 95       	dec	r22
 36e:	e2 f7       	brpl	.-8      	; 0x368 <DIO_setpindir+0xb2>
 370:	82 2b       	or	r24, r18
 372:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 374:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 376:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 378:	24 b3       	in	r18, 0x14	; 20
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	90 e0       	ldi	r25, 0x00	; 0
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_setpindir+0xce>
 380:	88 0f       	add	r24, r24
 382:	99 1f       	adc	r25, r25
 384:	6a 95       	dec	r22
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_setpindir+0xca>
 388:	82 2b       	or	r24, r18
 38a:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 38c:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 38e:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 390:	21 b3       	in	r18, 0x11	; 17
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	90 e0       	ldi	r25, 0x00	; 0
 396:	02 c0       	rjmp	.+4      	; 0x39c <DIO_setpindir+0xe6>
 398:	88 0f       	add	r24, r24
 39a:	99 1f       	adc	r25, r25
 39c:	6a 95       	dec	r22
 39e:	e2 f7       	brpl	.-8      	; 0x398 <DIO_setpindir+0xe2>
 3a0:	82 2b       	or	r24, r18
 3a2:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 3a4:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 3a6:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 3a8:	81 e0       	ldi	r24, 0x01	; 1
 3aa:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 3ac:	81 e0       	ldi	r24, 0x01	; 1
 3ae:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 3b0:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
 3b2:	08 95       	ret

000003b4 <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
 3b4:	44 23       	and	r20, r20
 3b6:	19 f0       	breq	.+6      	; 0x3be <DIO_setpinvalue+0xa>
 3b8:	41 30       	cpi	r20, 0x01	; 1
 3ba:	e9 f1       	breq	.+122    	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 3bc:	74 c0       	rjmp	.+232    	; 0x4a6 <__EEPROM_REGION_LENGTH__+0xa6>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
 3be:	81 30       	cpi	r24, 0x01	; 1
 3c0:	99 f0       	breq	.+38     	; 0x3e8 <DIO_setpinvalue+0x34>
 3c2:	28 f0       	brcs	.+10     	; 0x3ce <DIO_setpinvalue+0x1a>
 3c4:	82 30       	cpi	r24, 0x02	; 2
 3c6:	e9 f0       	breq	.+58     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3c8:	83 30       	cpi	r24, 0x03	; 3
 3ca:	41 f1       	breq	.+80     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3cc:	6e c0       	rjmp	.+220    	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 3ce:	2b b3       	in	r18, 0x1b	; 27
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	90 e0       	ldi	r25, 0x00	; 0
 3d4:	02 c0       	rjmp	.+4      	; 0x3da <DIO_setpinvalue+0x26>
 3d6:	88 0f       	add	r24, r24
 3d8:	99 1f       	adc	r25, r25
 3da:	6a 95       	dec	r22
 3dc:	e2 f7       	brpl	.-8      	; 0x3d6 <DIO_setpinvalue+0x22>
 3de:	80 95       	com	r24
 3e0:	82 23       	and	r24, r18
 3e2:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 3e4:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 3e6:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 3e8:	28 b3       	in	r18, 0x18	; 24
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	90 e0       	ldi	r25, 0x00	; 0
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <DIO_setpinvalue+0x40>
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	6a 95       	dec	r22
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <DIO_setpinvalue+0x3c>
 3f8:	80 95       	com	r24
 3fa:	82 23       	and	r24, r18
 3fc:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 3fe:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 400:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 402:	25 b3       	in	r18, 0x15	; 21
 404:	81 e0       	ldi	r24, 0x01	; 1
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	02 c0       	rjmp	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40a:	88 0f       	add	r24, r24
 40c:	99 1f       	adc	r25, r25
 40e:	6a 95       	dec	r22
 410:	e2 f7       	brpl	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 412:	80 95       	com	r24
 414:	82 23       	and	r24, r18
 416:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 418:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 41a:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 41c:	22 b3       	in	r18, 0x12	; 18
 41e:	81 e0       	ldi	r24, 0x01	; 1
 420:	90 e0       	ldi	r25, 0x00	; 0
 422:	02 c0       	rjmp	.+4      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 424:	88 0f       	add	r24, r24
 426:	99 1f       	adc	r25, r25
 428:	6a 95       	dec	r22
 42a:	e2 f7       	brpl	.-8      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 42c:	80 95       	com	r24
 42e:	82 23       	and	r24, r18
 430:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 432:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 434:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
 436:	81 30       	cpi	r24, 0x01	; 1
 438:	91 f0       	breq	.+36     	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
 43a:	28 f0       	brcs	.+10     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 43c:	82 30       	cpi	r24, 0x02	; 2
 43e:	d9 f0       	breq	.+54     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 440:	83 30       	cpi	r24, 0x03	; 3
 442:	29 f1       	breq	.+74     	; 0x48e <__EEPROM_REGION_LENGTH__+0x8e>
 444:	34 c0       	rjmp	.+104    	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 446:	2b b3       	in	r18, 0x1b	; 27
 448:	81 e0       	ldi	r24, 0x01	; 1
 44a:	90 e0       	ldi	r25, 0x00	; 0
 44c:	02 c0       	rjmp	.+4      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 44e:	88 0f       	add	r24, r24
 450:	99 1f       	adc	r25, r25
 452:	6a 95       	dec	r22
 454:	e2 f7       	brpl	.-8      	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 456:	82 2b       	or	r24, r18
 458:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 45a:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 45c:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 45e:	28 b3       	in	r18, 0x18	; 24
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	90 e0       	ldi	r25, 0x00	; 0
 464:	02 c0       	rjmp	.+4      	; 0x46a <__EEPROM_REGION_LENGTH__+0x6a>
 466:	88 0f       	add	r24, r24
 468:	99 1f       	adc	r25, r25
 46a:	6a 95       	dec	r22
 46c:	e2 f7       	brpl	.-8      	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
 46e:	82 2b       	or	r24, r18
 470:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 472:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 474:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 476:	25 b3       	in	r18, 0x15	; 21
 478:	81 e0       	ldi	r24, 0x01	; 1
 47a:	90 e0       	ldi	r25, 0x00	; 0
 47c:	02 c0       	rjmp	.+4      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 47e:	88 0f       	add	r24, r24
 480:	99 1f       	adc	r25, r25
 482:	6a 95       	dec	r22
 484:	e2 f7       	brpl	.-8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 486:	82 2b       	or	r24, r18
 488:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 48a:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 48c:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 48e:	22 b3       	in	r18, 0x12	; 18
 490:	81 e0       	ldi	r24, 0x01	; 1
 492:	90 e0       	ldi	r25, 0x00	; 0
 494:	02 c0       	rjmp	.+4      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 496:	88 0f       	add	r24, r24
 498:	99 1f       	adc	r25, r25
 49a:	6a 95       	dec	r22
 49c:	e2 f7       	brpl	.-8      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 49e:	82 2b       	or	r24, r18
 4a0:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 4a2:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 4a4:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 4a6:	81 e0       	ldi	r24, 0x01	; 1
 4a8:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 4aa:	81 e0       	ldi	r24, 0x01	; 1
 4ac:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 4ae:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
 4b0:	08 95       	ret

000004b2 <TMR1_init>:
	 
	#elif TMR1_CLK_SOURCE == TMR1_INTERNAL_CLK_SOURCE
	
	 #if TMR1_MODE == NORMAL_MODE
	  
	  clear_bit(TCCR1A , 0);
 4b2:	8f b5       	in	r24, 0x2f	; 47
 4b4:	8e 7f       	andi	r24, 0xFE	; 254
 4b6:	8f bd       	out	0x2f, r24	; 47
	  clear_bit(TCCR1A , 1);
 4b8:	8f b5       	in	r24, 0x2f	; 47
 4ba:	8d 7f       	andi	r24, 0xFD	; 253
 4bc:	8f bd       	out	0x2f, r24	; 47
	  clear_bit(TCCR1B , 3);
 4be:	8e b5       	in	r24, 0x2e	; 46
 4c0:	87 7f       	andi	r24, 0xF7	; 247
 4c2:	8e bd       	out	0x2e, r24	; 46
	  clear_bit(TCCR1B , 4);
 4c4:	8e b5       	in	r24, 0x2e	; 46
 4c6:	8f 7e       	andi	r24, 0xEF	; 239
 4c8:	8e bd       	out	0x2e, r24	; 46
	  
	  /* NON PWM MODE */
	  set_bit(TCCR1A , 2);
 4ca:	8f b5       	in	r24, 0x2f	; 47
 4cc:	84 60       	ori	r24, 0x04	; 4
 4ce:	8f bd       	out	0x2f, r24	; 47
	  set_bit(TCCR1A , 3);
 4d0:	8f b5       	in	r24, 0x2f	; 47
 4d2:	88 60       	ori	r24, 0x08	; 8
 4d4:	8f bd       	out	0x2f, r24	; 47
	  
	  /* ENABLE INTERRUPT */
	  set_bit(SREG , 7);   /** ENABLE GLOBAL INTTERUPTS **/
 4d6:	8f b7       	in	r24, 0x3f	; 63
 4d8:	80 68       	ori	r24, 0x80	; 128
 4da:	8f bf       	out	0x3f, r24	; 63
	  set_bit(TIMSK , 2);  /** NABLE TMR1 INTERRUPT **/
 4dc:	89 b7       	in	r24, 0x39	; 57
 4de:	9a b7       	in	r25, 0x3a	; 58
 4e0:	84 60       	ori	r24, 0x04	; 4
 4e2:	9a bf       	out	0x3a, r25	; 58
 4e4:	89 bf       	out	0x39, r24	; 57
	 /* SET THE OC1B BIT AS OUTPUT */
	 DIO_setpindir(DIO_PORTD , DIO_PIN4 , DIO_PIN_OUTPUT);
	#endif
	#endif
#endif
}
 4e6:	08 95       	ret

000004e8 <_exit>:
 4e8:	f8 94       	cli

000004ea <__stop_program>:
 4ea:	ff cf       	rjmp	.-2      	; 0x4ea <__stop_program>

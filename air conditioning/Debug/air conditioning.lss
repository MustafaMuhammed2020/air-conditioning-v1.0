
air conditioning.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001102  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000084  00800060  00001102  00001196  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000d  008000e4  008000e4  0000121a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000121a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000124c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  00001288  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000020af  00000000  00000000  00001428  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b15  00000000  00000000  000034d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001213  00000000  00000000  00003fec  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  00005200  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000093b  00000000  00000000  000054fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c06  00000000  00000000  00005e37  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00006a3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e0       	ldi	r30, 0x02	; 2
      68:	f1 e1       	ldi	r31, 0x11	; 17
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a4 3e       	cpi	r26, 0xE4	; 228
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a4 ee       	ldi	r26, 0xE4	; 228
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 3f       	cpi	r26, 0xF1	; 241
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 9c 04 	call	0x938	; 0x938 <main>
      8a:	0c 94 7f 08 	jmp	0x10fe	; 0x10fe <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint8_t bar ,  u8_a_defaulttemp = 20 ;

void APP_init()
{

    bar = 2 ;  /** INITIAL VALUE OF BAR **/
      92:	82 e0       	ldi	r24, 0x02	; 2
      94:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <bar>
  
	ADC_init();  /** INITIALIZE ADC **/
      98:	0e 94 a1 04 	call	0x942	; 0x942 <ADC_init>
	
 	TMR0_init();  /** INITIALIZE TMR0 **/
      9c:	0e 94 3f 06 	call	0xc7e	; 0xc7e <TMR0_init>
	
	LCD_init();   /** INITIALIZE LCD **/
      a0:	0e 94 43 03 	call	0x686	; 0x686 <LCD_init>
	
	TMR0_delayms(50); /** DELAY FOR 20 ms FOR LCD TO BE STABLE BEFORE OPERATE */
      a4:	62 e3       	ldi	r22, 0x32	; 50
      a6:	70 e0       	ldi	r23, 0x00	; 0
      a8:	80 e0       	ldi	r24, 0x00	; 0
      aa:	90 e0       	ldi	r25, 0x00	; 0
      ac:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
		
	KEYPAD_init(); /** INITIALIZE KEYPAD **/
      b0:	0e 94 24 02 	call	0x448	; 0x448 <KEYPAD_init>
	
	LCD_writecustomchar(u8_g_bell , 0); /** STORE THE BELL SHAPE IN CGRAM OF LCD **/
      b4:	60 e0       	ldi	r22, 0x00	; 0
      b6:	81 e6       	ldi	r24, 0x61	; 97
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_writecustomchar>
	 
	LCD_writecustomchar(u8_g_empty , 1); /** STORE EMPTY SHAPE IN CGRAM OF LCD **/
      be:	61 e0       	ldi	r22, 0x01	; 1
      c0:	84 ee       	ldi	r24, 0xE4	; 228
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	0e 94 f6 03 	call	0x7ec	; 0x7ec <LCD_writecustomchar>
	
	BUZZ_init();  /** INITIALIZE THE BUZZER **/
      c8:	0e 94 12 02 	call	0x424	; 0x424 <BUZZ_init>
	
	BUZZ_off();   /** BUZZER IS OFF **/
      cc:	0e 94 1e 02 	call	0x43c	; 0x43c <BUZZ_off>
	
	LCD_sendcmd(LCD_CLEAR); /** CLEAR THE LCD BEFORE WRITING ANYTHING **/
      d0:	81 e0       	ldi	r24, 0x01	; 1
      d2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_sendcmd>
	TMR0_delayms(20);
      d6:	64 e1       	ldi	r22, 0x14	; 20
      d8:	70 e0       	ldi	r23, 0x00	; 0
      da:	80 e0       	ldi	r24, 0x00	; 0
      dc:	90 e0       	ldi	r25, 0x00	; 0
      de:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
	
	LCD_goto(0 , 1);
      e2:	61 e0       	ldi	r22, 0x01	; 1
      e4:	80 e0       	ldi	r24, 0x00	; 0
      e6:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
	LCD_writestr("   Welcome   ");  /** DISPLAY WELCOME MESSAGE FOR 0.5 SEC **/
      ea:	89 e6       	ldi	r24, 0x69	; 105
      ec:	90 e0       	ldi	r25, 0x00	; 0
      ee:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_writestr>
	TMR0_delayms(1000);
      f2:	68 ee       	ldi	r22, 0xE8	; 232
      f4:	73 e0       	ldi	r23, 0x03	; 3
      f6:	80 e0       	ldi	r24, 0x00	; 0
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
	
	LCD_sendcmd(LCD_CLEAR);  /** CLEAR THE LCD **/
      fe:	81 e0       	ldi	r24, 0x01	; 1
     100:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_sendcmd>
	TMR0_delayms(20);
     104:	64 e1       	ldi	r22, 0x14	; 20
     106:	70 e0       	ldi	r23, 0x00	; 0
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	90 e0       	ldi	r25, 0x00	; 0
     10c:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
	
	LCD_goto(0 , 0);
     110:	60 e0       	ldi	r22, 0x00	; 0
     112:	80 e0       	ldi	r24, 0x00	; 0
     114:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
	LCD_writestr("Default temp =20"); /** DISPLAY THE DEFAULT TEMP OF AC **/
     118:	87 e7       	ldi	r24, 0x77	; 119
     11a:	90 e0       	ldi	r25, 0x00	; 0
     11c:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_writestr>
	TMR0_delayms(2000);
     120:	60 ed       	ldi	r22, 0xD0	; 208
     122:	77 e0       	ldi	r23, 0x07	; 7
     124:	80 e0       	ldi	r24, 0x00	; 0
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>

    LCD_sendcmd(LCD_CLEAR);  /** CLEAR THE LCD **/
     12c:	81 e0       	ldi	r24, 0x01	; 1
     12e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_sendcmd>
    TMR0_delayms(20);
     132:	64 e1       	ldi	r22, 0x14	; 20
     134:	70 e0       	ldi	r23, 0x00	; 0
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
    
	LCD_goto(0 , 0);
     13e:	60 e0       	ldi	r22, 0x00	; 0
     140:	80 e0       	ldi	r24, 0x00	; 0
     142:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
	LCD_writestr("SET TEMPERATURE"); /** DISPLAY THE DEFAULT TEMP OF AC **/
     146:	88 e8       	ldi	r24, 0x88	; 136
     148:	90 e0       	ldi	r25, 0x00	; 0
     14a:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_writestr>
	TMR0_delayms(2000);
     14e:	60 ed       	ldi	r22, 0xD0	; 208
     150:	77 e0       	ldi	r23, 0x07	; 7
     152:	80 e0       	ldi	r24, 0x00	; 0
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
	
	LCD_sendcmd(LCD_CLEAR);  /** CLEAR THE LCD **/
     15a:	81 e0       	ldi	r24, 0x01	; 1
     15c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_sendcmd>
	TMR0_delayms(20);
     160:	64 e1       	ldi	r22, 0x14	; 20
     162:	70 e0       	ldi	r23, 0x00	; 0
     164:	80 e0       	ldi	r24, 0x00	; 0
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
	
	LCD_goto(0 , 0 );
     16c:	60 e0       	ldi	r22, 0x00	; 0
     16e:	80 e0       	ldi	r24, 0x00	; 0
     170:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
	LCD_writestr("Min:18");
     174:	88 e9       	ldi	r24, 0x98	; 152
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_writestr>
	
	LCD_goto(0 , 7);
     17c:	67 e0       	ldi	r22, 0x07	; 7
     17e:	80 e0       	ldi	r24, 0x00	; 0
     180:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
	LCD_writeint(u8_a_defaulttemp); /** DISPLAY THE ROOM READ TEMPERATURE **/
     184:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     188:	70 e0       	ldi	r23, 0x00	; 0
     18a:	80 e0       	ldi	r24, 0x00	; 0
     18c:	90 e0       	ldi	r25, 0x00	; 0
     18e:	0e 94 11 04 	call	0x822	; 0x822 <LCD_writeint>
	
	LCD_goto(0 , 10);
     192:	6a e0       	ldi	r22, 0x0A	; 10
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
	LCD_writestr("Max:35");
     19a:	8f e9       	ldi	r24, 0x9F	; 159
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_writestr>
	
	LCD_goto(1 , 0);
     1a2:	60 e0       	ldi	r22, 0x00	; 0
     1a4:	81 e0       	ldi	r24, 0x01	; 1
     1a6:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
	LCD_writestr("||");  /** INITIAL PATTERN **/
     1aa:	86 ea       	ldi	r24, 0xA6	; 166
     1ac:	90 e0       	ldi	r25, 0x00	; 0
     1ae:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_writestr>
     1b2:	08 95       	ret

000001b4 <APP_start>:
	
}


void APP_start()
{
     1b4:	1f 93       	push	r17
     1b6:	cf 93       	push	r28
     1b8:	df 93       	push	r29
     1ba:	1f 92       	push	r1
     1bc:	cd b7       	in	r28, 0x3d	; 61
     1be:	de b7       	in	r29, 0x3e	; 62
	KEYPAD_readError returnstatus = KEYPAD_readFail ;  /** AVRIABLE TO HOLD THE RETURN STATUS OF KEYPAD **/
	
	uint8_t u8_a_pressedunm = 0 , u32_a_temp = 0 , u8_a_currenttemp = 0   , u8_a_pattern = 0 ;
     1c0:	19 82       	std	Y+1, r1	; 0x01

	returnstatus = KEYPAD_read(&u8_a_pressedunm); /** READ THE PRESSED BUTTON **/
     1c2:	ce 01       	movw	r24, r28
     1c4:	01 96       	adiw	r24, 0x01	; 1
     1c6:	0e 94 62 02 	call	0x4c4	; 0x4c4 <KEYPAD_read>
	
	if(returnstatus == KEYPAD_readSuccess) /** HOLD HERE UNTILL A BUTTON PRESSED **/
     1ca:	81 11       	cpse	r24, r1
     1cc:	26 c1       	rjmp	.+588    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
	{
		if (u8_a_pressedunm == INCREASE_TEMP) /** IF 1 PRESSED **/
     1ce:	89 81       	ldd	r24, Y+1	; 0x01
     1d0:	81 30       	cpi	r24, 0x01	; 1
     1d2:	49 f5       	brne	.+82     	; 0x226 <APP_start+0x72>
		{	
			u8_a_defaulttemp++ ;  /** INCREASE THE TEMPERATURE BY 1 **/
     1d4:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1d8:	8f 5f       	subi	r24, 0xFF	; 255
     1da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			
			if (u8_a_defaulttemp > MAX_TEMP) /** IF TEMPERATURE EXCEEDED THE MAX LIMIT **/
     1de:	84 32       	cpi	r24, 0x24	; 36
     1e0:	20 f0       	brcs	.+8      	; 0x1ea <APP_start+0x36>
			{
				u8_a_defaulttemp = MAX_TEMP ; /* SET TEMPERATURE TO THE MAX LIMIT **/
     1e2:	83 e2       	ldi	r24, 0x23	; 35
     1e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
     1e8:	18 c1       	rjmp	.+560    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
			}
			
			else  /** TEMPERATURE VALUE IS VALID **/
			{
				LCD_goto(0 , 7);  
     1ea:	67 e0       	ldi	r22, 0x07	; 7
     1ec:	80 e0       	ldi	r24, 0x00	; 0
     1ee:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
				LCD_writeint(u8_a_defaulttemp);  /** DISPLAY THE TEMPERATURE INCREASED BY THE USER **/
     1f2:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1f6:	70 e0       	ldi	r23, 0x00	; 0
     1f8:	80 e0       	ldi	r24, 0x00	; 0
     1fa:	90 e0       	ldi	r25, 0x00	; 0
     1fc:	0e 94 11 04 	call	0x822	; 0x822 <LCD_writeint>
				
				LCD_goto(1 ,bar++); /** UPDATE THE BAR COUNTER **/
     200:	60 91 f0 00 	lds	r22, 0x00F0	; 0x8000f0 <bar>
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	86 0f       	add	r24, r22
     208:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <bar>
     20c:	81 e0       	ldi	r24, 0x01	; 1
     20e:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
				LCD_writechar('|');
     212:	8c e7       	ldi	r24, 0x7C	; 124
     214:	0e 94 84 03 	call	0x708	; 0x708 <LCD_writechar>
				TMR0_delayms(200);
     218:	68 ec       	ldi	r22, 0xC8	; 200
     21a:	70 e0       	ldi	r23, 0x00	; 0
     21c:	80 e0       	ldi	r24, 0x00	; 0
     21e:	90 e0       	ldi	r25, 0x00	; 0
     220:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
     224:	fa c0       	rjmp	.+500    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
			}	
		}
		
		else if(u8_a_pressedunm == DECREASE_TEMP)  /** IF 2 PRESSED **/
     226:	82 30       	cpi	r24, 0x02	; 2
     228:	39 f5       	brne	.+78     	; 0x278 <APP_start+0xc4>
		{    
			u8_a_defaulttemp--; /** DECREASE THE TEMPERATURE BY 1 **/
     22a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     22e:	81 50       	subi	r24, 0x01	; 1
     230:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			
			if (u8_a_defaulttemp < MIN_TEMP) /** IF TEMPERATURE WENT BELOW  THE MIN LIMIT **/
     234:	82 31       	cpi	r24, 0x12	; 18
     236:	18 f4       	brcc	.+6      	; 0x23e <APP_start+0x8a>
			{
				u8_a_defaulttemp = MIN_TEMP ; /* SET TEMPERATURE TO THE MIN LIMIT **/
     238:	82 e1       	ldi	r24, 0x12	; 18
     23a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			}
			
			LCD_goto(0 , 7);
     23e:	67 e0       	ldi	r22, 0x07	; 7
     240:	80 e0       	ldi	r24, 0x00	; 0
     242:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
			LCD_writeint(u8_a_defaulttemp); /** DISPLAY THE TEMPERATURE DECREASED BY THE USER **/
     246:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     24a:	70 e0       	ldi	r23, 0x00	; 0
     24c:	80 e0       	ldi	r24, 0x00	; 0
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0e 94 11 04 	call	0x822	; 0x822 <LCD_writeint>
			
			LCD_goto(1 , --bar);
     254:	60 91 f0 00 	lds	r22, 0x00F0	; 0x8000f0 <bar>
     258:	61 50       	subi	r22, 0x01	; 1
     25a:	60 93 f0 00 	sts	0x00F0, r22	; 0x8000f0 <bar>
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
			LCD_writechar(1);    /** UPDATE THE BAR COUNTER **/
     264:	81 e0       	ldi	r24, 0x01	; 1
     266:	0e 94 84 03 	call	0x708	; 0x708 <LCD_writechar>
			TMR0_delayms(200);
     26a:	68 ec       	ldi	r22, 0xC8	; 200
     26c:	70 e0       	ldi	r23, 0x00	; 0
     26e:	80 e0       	ldi	r24, 0x00	; 0
     270:	90 e0       	ldi	r25, 0x00	; 0
     272:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
     276:	d1 c0       	rjmp	.+418    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>

		}
		
		else if(u8_a_pressedunm == SET_TEMP) /** IF 3 PRESSED **/
     278:	83 30       	cpi	r24, 0x03	; 3
     27a:	09 f0       	breq	.+2      	; 0x27e <APP_start+0xca>
     27c:	ce c0       	rjmp	.+412    	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
		{
			u8_a_pressedunm = 0 ; /** REINITIALIZE THE PRESSED NUMBER to 0 **/
     27e:	19 82       	std	Y+1, r1	; 0x01
			
			LCD_sendcmd(LCD_CLEAR); /** CLEAR THE LCD **/
     280:	81 e0       	ldi	r24, 0x01	; 1
     282:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_sendcmd>
			TMR0_delayms(20);
     286:	64 e1       	ldi	r22, 0x14	; 20
     288:	70 e0       	ldi	r23, 0x00	; 0
     28a:	80 e0       	ldi	r24, 0x00	; 0
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
			
			while (u8_a_pressedunm != READJUST_TEMP && u8_a_pressedunm != REBOOT_SYSTEM)  /** WHILE USER DOESN'T NEED TO READJUST OR REBOOT THE SYSTEM **/
     292:	48 c0       	rjmp	.+144    	; 0x324 <APP_start+0x170>
			{	
				u32_a_temp = ADC_read();  /** READ THE VALUE FROM ADC CHANNEL **/
     294:	0e 94 bf 04 	call	0x97e	; 0x97e <ADC_read>
				
				u8_a_currenttemp = u32_a_temp * 0.20 ; /** REFACTOR THE ADC READ TO BE DISPLAYED OVER THE LCD **/
     298:	70 e0       	ldi	r23, 0x00	; 0
     29a:	80 e0       	ldi	r24, 0x00	; 0
     29c:	90 e0       	ldi	r25, 0x00	; 0
     29e:	0e 94 45 07 	call	0xe8a	; 0xe8a <__floatsisf>
     2a2:	2d ec       	ldi	r18, 0xCD	; 205
     2a4:	3c ec       	ldi	r19, 0xCC	; 204
     2a6:	4c e4       	ldi	r20, 0x4C	; 76
     2a8:	5e e3       	ldi	r21, 0x3E	; 62
     2aa:	0e 94 d1 07 	call	0xfa2	; 0xfa2 <__mulsf3>
     2ae:	0e 94 14 07 	call	0xe28	; 0xe28 <__fixunssfsi>
     2b2:	16 2f       	mov	r17, r22
				
				LCD_goto(0,0);
     2b4:	60 e0       	ldi	r22, 0x00	; 0
     2b6:	80 e0       	ldi	r24, 0x00	; 0
     2b8:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
				LCD_writestr("Needed Temp :"); /** SET THE USER TEMPERATURE **/
     2bc:	89 ea       	ldi	r24, 0xA9	; 169
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_writestr>
				LCD_writeint(u8_a_defaulttemp);
     2c4:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2c8:	70 e0       	ldi	r23, 0x00	; 0
     2ca:	80 e0       	ldi	r24, 0x00	; 0
     2cc:	90 e0       	ldi	r25, 0x00	; 0
     2ce:	0e 94 11 04 	call	0x822	; 0x822 <LCD_writeint>
				
				LCD_goto(1,0);
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	81 e0       	ldi	r24, 0x01	; 1
     2d6:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
				LCD_writestr("Current Temp :");  /** DISPLAY THE ROOM TEMPERATURE **/
     2da:	87 eb       	ldi	r24, 0xB7	; 183
     2dc:	90 e0       	ldi	r25, 0x00	; 0
     2de:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_writestr>
				LCD_writeint(u8_a_currenttemp);
     2e2:	61 2f       	mov	r22, r17
     2e4:	70 e0       	ldi	r23, 0x00	; 0
     2e6:	80 e0       	ldi	r24, 0x00	; 0
     2e8:	90 e0       	ldi	r25, 0x00	; 0
     2ea:	0e 94 11 04 	call	0x822	; 0x822 <LCD_writeint>
				
				if (u8_a_currenttemp  > u8_a_defaulttemp) /** IF ROOM IS HOTTER THAN USER NEED **/
     2ee:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2f2:	81 17       	cp	r24, r17
     2f4:	50 f4       	brcc	.+20     	; 0x30a <APP_start+0x156>
				{
					LCD_goto(0 , 15);
     2f6:	6f e0       	ldi	r22, 0x0F	; 15
     2f8:	80 e0       	ldi	r24, 0x00	; 0
     2fa:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
					LCD_writechar(0);  /** DISPLAY BELL SHAPE **/
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	0e 94 84 03 	call	0x708	; 0x708 <LCD_writechar>
					BUZZ_on();   /** BUZZER IS ON **/
     304:	0e 94 18 02 	call	0x430	; 0x430 <BUZZ_on>
     308:	09 c0       	rjmp	.+18     	; 0x31c <APP_start+0x168>
				}
				
				else
				{
					LCD_goto(0 , 15);
     30a:	6f e0       	ldi	r22, 0x0F	; 15
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
					LCD_writechar(1);  /** REMOVE BELL SHAPE **/
     312:	81 e0       	ldi	r24, 0x01	; 1
     314:	0e 94 84 03 	call	0x708	; 0x708 <LCD_writechar>
					BUZZ_off();   /** BUZZER IS OFF **/
     318:	0e 94 1e 02 	call	0x43c	; 0x43c <BUZZ_off>
				}
				
				KEYPAD_read(&u8_a_pressedunm); /** ACCEPT NUMBER FROM USER 4 TO READJUST THE TEMP AND 5 TO REBOOT THE SYSTEM **/
     31c:	ce 01       	movw	r24, r28
     31e:	01 96       	adiw	r24, 0x01	; 1
     320:	0e 94 62 02 	call	0x4c4	; 0x4c4 <KEYPAD_read>
			u8_a_pressedunm = 0 ; /** REINITIALIZE THE PRESSED NUMBER to 0 **/
			
			LCD_sendcmd(LCD_CLEAR); /** CLEAR THE LCD **/
			TMR0_delayms(20);
			
			while (u8_a_pressedunm != READJUST_TEMP && u8_a_pressedunm != REBOOT_SYSTEM)  /** WHILE USER DOESN'T NEED TO READJUST OR REBOOT THE SYSTEM **/
     324:	89 81       	ldd	r24, Y+1	; 0x01
     326:	9c ef       	ldi	r25, 0xFC	; 252
     328:	98 0f       	add	r25, r24
     32a:	92 30       	cpi	r25, 0x02	; 2
     32c:	08 f0       	brcs	.+2      	; 0x330 <APP_start+0x17c>
     32e:	b2 cf       	rjmp	.-156    	; 0x294 <APP_start+0xe0>
				}
				
				KEYPAD_read(&u8_a_pressedunm); /** ACCEPT NUMBER FROM USER 4 TO READJUST THE TEMP AND 5 TO REBOOT THE SYSTEM **/
			}
			
			if (u8_a_pressedunm == READJUST_TEMP) /** IF 4 PRESSED **/
     330:	84 30       	cpi	r24, 0x04	; 4
     332:	09 f0       	breq	.+2      	; 0x336 <APP_start+0x182>
     334:	52 c0       	rjmp	.+164    	; 0x3da <APP_start+0x226>
			{	
				LCD_goto(0 , 15);
     336:	6f e0       	ldi	r22, 0x0F	; 15
     338:	80 e0       	ldi	r24, 0x00	; 0
     33a:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
				LCD_writechar(1);  /** REMOVE BELL SHAPE **/
     33e:	81 e0       	ldi	r24, 0x01	; 1
     340:	0e 94 84 03 	call	0x708	; 0x708 <LCD_writechar>
				BUZZ_off();   /** BUZZER IS OFF **/
     344:	0e 94 1e 02 	call	0x43c	; 0x43c <BUZZ_off>
					
				LCD_sendcmd(LCD_CLEAR); /** CLEAR THE LCD **/
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_sendcmd>
				TMR0_delayms(20);
     34e:	64 e1       	ldi	r22, 0x14	; 20
     350:	70 e0       	ldi	r23, 0x00	; 0
     352:	80 e0       	ldi	r24, 0x00	; 0
     354:	90 e0       	ldi	r25, 0x00	; 0
     356:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
				
				LCD_goto(0,0);
     35a:	60 e0       	ldi	r22, 0x00	; 0
     35c:	80 e0       	ldi	r24, 0x00	; 0
     35e:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
				LCD_writestr("Readjust temp"); /** TELL USER ABOUT THE NEXT STEP **/
     362:	86 ec       	ldi	r24, 0xC6	; 198
     364:	90 e0       	ldi	r25, 0x00	; 0
     366:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_writestr>
				TMR0_delayms(2000);
     36a:	60 ed       	ldi	r22, 0xD0	; 208
     36c:	77 e0       	ldi	r23, 0x07	; 7
     36e:	80 e0       	ldi	r24, 0x00	; 0
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
				
				LCD_sendcmd(LCD_CLEAR);
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_sendcmd>
				TMR0_delayms(20);
     37c:	64 e1       	ldi	r22, 0x14	; 20
     37e:	70 e0       	ldi	r23, 0x00	; 0
     380:	80 e0       	ldi	r24, 0x00	; 0
     382:	90 e0       	ldi	r25, 0x00	; 0
     384:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
				
				LCD_goto(0 , 0 );
     388:	60 e0       	ldi	r22, 0x00	; 0
     38a:	80 e0       	ldi	r24, 0x00	; 0
     38c:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
				LCD_writestr("Min:18");
     390:	88 e9       	ldi	r24, 0x98	; 152
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_writestr>
				
				LCD_goto(0 , 7);
     398:	67 e0       	ldi	r22, 0x07	; 7
     39a:	80 e0       	ldi	r24, 0x00	; 0
     39c:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
				LCD_writeint(u8_a_defaulttemp); /** DISPLAY THE DEFAULT TEMPERATURE **/
     3a0:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 11 04 	call	0x822	; 0x822 <LCD_writeint>
				
				LCD_goto(0 , 10);
     3ae:	6a e0       	ldi	r22, 0x0A	; 10
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
				LCD_writestr("Max:35");
     3b6:	8f e9       	ldi	r24, 0x9F	; 159
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_writestr>
				
				LCD_goto(1,0);
     3be:	60 e0       	ldi	r22, 0x00	; 0
     3c0:	81 e0       	ldi	r24, 0x01	; 1
     3c2:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
				
				u8_a_pattern = bar; 
     3c6:	10 91 f0 00 	lds	r17, 0x00F0	; 0x8000f0 <bar>
				
				while (u8_a_pattern != 0 ) /** DRAW THE LAST STATUS OF BAR **/
     3ca:	04 c0       	rjmp	.+8      	; 0x3d4 <APP_start+0x220>
				{
					LCD_writechar('|');
     3cc:	8c e7       	ldi	r24, 0x7C	; 124
     3ce:	0e 94 84 03 	call	0x708	; 0x708 <LCD_writechar>
					u8_a_pattern = u8_a_pattern - 1 ;
     3d2:	11 50       	subi	r17, 0x01	; 1
				
				LCD_goto(1,0);
				
				u8_a_pattern = bar; 
				
				while (u8_a_pattern != 0 ) /** DRAW THE LAST STATUS OF BAR **/
     3d4:	11 11       	cpse	r17, r1
     3d6:	fa cf       	rjmp	.-12     	; 0x3cc <APP_start+0x218>
     3d8:	20 c0       	rjmp	.+64     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
					LCD_writechar('|');
					u8_a_pattern = u8_a_pattern - 1 ;
				}
			}
			
			else if(u8_a_pressedunm == REBOOT_SYSTEM) /** IF 5 PRESSED **/
     3da:	85 30       	cpi	r24, 0x05	; 5
     3dc:	f1 f4       	brne	.+60     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
			{
				u8_a_defaulttemp = 20 ;  /** RESET THE DEFAULT VALUE **/
     3de:	84 e1       	ldi	r24, 0x14	; 20
     3e0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				
				LCD_sendcmd(LCD_CLEAR);
     3e4:	81 e0       	ldi	r24, 0x01	; 1
     3e6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_sendcmd>
				TMR0_delayms(20);
     3ea:	64 e1       	ldi	r22, 0x14	; 20
     3ec:	70 e0       	ldi	r23, 0x00	; 0
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
				
				LCD_goto(0,0);
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	80 e0       	ldi	r24, 0x00	; 0
     3fa:	0e 94 de 03 	call	0x7bc	; 0x7bc <LCD_goto>
				LCD_writestr("System reboot ");
     3fe:	84 ed       	ldi	r24, 0xD4	; 212
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 cb 03 	call	0x796	; 0x796 <LCD_writestr>
				TMR0_delayms(2000);
     406:	60 ed       	ldi	r22, 0xD0	; 208
     408:	77 e0       	ldi	r23, 0x07	; 7
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
				
				APP_init(); /** START THE SYSTEM AGAIN **/
     412:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
				APP_start();
     416:	0e 94 da 00 	call	0x1b4	; 0x1b4 <APP_start>
				
			}	
		}
	}
}
     41a:	0f 90       	pop	r0
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	08 95       	ret

00000424 <BUZZ_init>:
/** RETURN     : VOID                                 **/
/*******************************************************/
void BUZZ_init()
{
	/** SET THE DIRECTION OF BUZZER PIN AS OUTPUT **/
	DIO_setpindir(BUZZ_PORT , BUZZ_PIN , DIO_PIN_OUTPUT);
     424:	41 e0       	ldi	r20, 0x01	; 1
     426:	63 e0       	ldi	r22, 0x03	; 3
     428:	80 e0       	ldi	r24, 0x00	; 0
     42a:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_setpindir>
     42e:	08 95       	ret

00000430 <BUZZ_on>:
/** RETURN     : VOID                                 **/
/*******************************************************/
void BUZZ_on()
{
	/** SET THE BUZZER PIN AS HIGH **/
	DIO_setpinvalue(BUZZ_PORT , BUZZ_PIN , DIO_PIN_HIGH);
     430:	41 e0       	ldi	r20, 0x01	; 1
     432:	63 e0       	ldi	r22, 0x03	; 3
     434:	80 e0       	ldi	r24, 0x00	; 0
     436:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
     43a:	08 95       	ret

0000043c <BUZZ_off>:
/** RETURN     : VOID                                 **/
/*******************************************************/
void BUZZ_off()
{
	/** SET THE BUZZER PIN AS LOW **/
	DIO_setpinvalue(BUZZ_PORT , BUZZ_PIN , DIO_PIN_LOW);
     43c:	40 e0       	ldi	r20, 0x00	; 0
     43e:	63 e0       	ldi	r22, 0x03	; 3
     440:	80 e0       	ldi	r24, 0x00	; 0
     442:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
     446:	08 95       	ret

00000448 <KEYPAD_init>:
/** @return KEYPAD_initFail                                                */
/***************************************************************************/
KEYPAD_initError KEYPAD_init(void)
{
    /*Rows direction initialization*/
    DIO_setpindir(ROW_PORT_DATA, R1 , DIO_PIN_OUTPUT);
     448:	41 e0       	ldi	r20, 0x01	; 1
     44a:	60 e0       	ldi	r22, 0x00	; 0
     44c:	82 e0       	ldi	r24, 0x02	; 2
     44e:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R2 , DIO_PIN_OUTPUT);
     452:	41 e0       	ldi	r20, 0x01	; 1
     454:	61 e0       	ldi	r22, 0x01	; 1
     456:	82 e0       	ldi	r24, 0x02	; 2
     458:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R3 , DIO_PIN_OUTPUT);
     45c:	41 e0       	ldi	r20, 0x01	; 1
     45e:	62 e0       	ldi	r22, 0x02	; 2
     460:	82 e0       	ldi	r24, 0x02	; 2
     462:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_setpindir>
	
    /*Columns direction initialization*/
	DIO_setpindir(COLUMN_PORT_DATA , C1 , DIO_PIN_INPUT);
     466:	40 e0       	ldi	r20, 0x00	; 0
     468:	65 e0       	ldi	r22, 0x05	; 5
     46a:	81 e0       	ldi	r24, 0x01	; 1
     46c:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C2 , DIO_PIN_INPUT);
     470:	40 e0       	ldi	r20, 0x00	; 0
     472:	66 e0       	ldi	r22, 0x06	; 6
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C3 , DIO_PIN_INPUT);
     47a:	40 e0       	ldi	r20, 0x00	; 0
     47c:	67 e0       	ldi	r22, 0x07	; 7
     47e:	81 e0       	ldi	r24, 0x01	; 1
     480:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_setpindir>
	DIO_setpinvalue(ROW_PORT_DATA , R3 ,  DIO_PIN_LOW);
	

    #elif CONNECTION == 'U'
	
	DIO_setpinvalue(ROW_PORT_DATA , R1 , DIO_PIN_HIGH);
     484:	41 e0       	ldi	r20, 0x01	; 1
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	82 e0       	ldi	r24, 0x02	; 2
     48a:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R2 , DIO_PIN_HIGH);
     48e:	41 e0       	ldi	r20, 0x01	; 1
     490:	61 e0       	ldi	r22, 0x01	; 1
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R3 , DIO_PIN_HIGH);
     498:	41 e0       	ldi	r20, 0x01	; 1
     49a:	62 e0       	ldi	r22, 0x02	; 2
     49c:	82 e0       	ldi	r24, 0x02	; 2
     49e:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
	
	DIO_setpinvalue(COLUMN_PORT_DATA , C1 , DIO_PIN_HIGH);
     4a2:	41 e0       	ldi	r20, 0x01	; 1
     4a4:	65 e0       	ldi	r22, 0x05	; 5
     4a6:	81 e0       	ldi	r24, 0x01	; 1
     4a8:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C2 , DIO_PIN_HIGH);
     4ac:	41 e0       	ldi	r20, 0x01	; 1
     4ae:	66 e0       	ldi	r22, 0x06	; 6
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C3 , DIO_PIN_HIGH);
     4b6:	41 e0       	ldi	r20, 0x01	; 1
     4b8:	67 e0       	ldi	r22, 0x07	; 7
     4ba:	81 e0       	ldi	r24, 0x01	; 1
     4bc:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
	
    #endif
    return KEYPAD_initSuccess;
}
     4c0:	80 e0       	ldi	r24, 0x00	; 0
     4c2:	08 95       	ret

000004c4 <KEYPAD_read>:
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     4c4:	df 92       	push	r13
     4c6:	ef 92       	push	r14
     4c8:	ff 92       	push	r15
     4ca:	0f 93       	push	r16
     4cc:	1f 93       	push	r17
     4ce:	cf 93       	push	r28
     4d0:	df 93       	push	r29
     4d2:	cd b7       	in	r28, 0x3d	; 61
     4d4:	de b7       	in	r29, 0x3e	; 62
     4d6:	27 97       	sbiw	r28, 0x07	; 7
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	de bf       	out	0x3e, r29	; 62
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	cd bf       	out	0x3d, r28	; 61
     4e2:	7c 01       	movw	r14, r24
    #elif CONNECTION == 'D'
    #define u8_l_readCheck DIO_PIN_HIGH
    #define u8_l_pinValue  DIO_PIN_HIGH
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
     4e4:	19 82       	std	Y+1, r1	; 0x01
     4e6:	1a 82       	std	Y+2, r1	; 0x02
     4e8:	1b 82       	std	Y+3, r1	; 0x03
     4ea:	1c 82       	std	Y+4, r1	; 0x04
     4ec:	81 e0       	ldi	r24, 0x01	; 1
     4ee:	8a 83       	std	Y+2, r24	; 0x02
     4f0:	82 e0       	ldi	r24, 0x02	; 2
     4f2:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};
     4f4:	85 e0       	ldi	r24, 0x05	; 5
     4f6:	8d 83       	std	Y+5, r24	; 0x05
     4f8:	86 e0       	ldi	r24, 0x06	; 6
     4fa:	8e 83       	std	Y+6, r24	; 0x06
     4fc:	87 e0       	ldi	r24, 0x07	; 7
     4fe:	8f 83       	std	Y+7, r24	; 0x07

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     500:	00 e0       	ldi	r16, 0x00	; 0
     502:	66 c0       	rjmp	.+204    	; 0x5d0 <KEYPAD_read+0x10c>
    {
        DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
     504:	e1 e0       	ldi	r30, 0x01	; 1
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	ec 0f       	add	r30, r28
     50a:	fd 1f       	adc	r31, r29
     50c:	e0 0f       	add	r30, r16
     50e:	f1 1d       	adc	r31, r1
     510:	d0 80       	ld	r13, Z
     512:	40 e0       	ldi	r20, 0x00	; 0
     514:	6d 2d       	mov	r22, r13
     516:	82 e0       	ldi	r24, 0x02	; 2
     518:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
     51c:	10 e0       	ldi	r17, 0x00	; 0
     51e:	50 c0       	rjmp	.+160    	; 0x5c0 <KEYPAD_read+0xfc>
        {
            DIO_readpin(COLUMN_PORT_DATA , u8_l_Columns[u8_a_coulumniterator] , u8_a_value);
     520:	e5 e0       	ldi	r30, 0x05	; 5
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	ec 0f       	add	r30, r28
     526:	fd 1f       	adc	r31, r29
     528:	e1 0f       	add	r30, r17
     52a:	f1 1d       	adc	r31, r1
     52c:	a7 01       	movw	r20, r14
     52e:	60 81       	ld	r22, Z
     530:	81 e0       	ldi	r24, 0x01	; 1
     532:	0e 94 c7 05 	call	0xb8e	; 0xb8e <DIO_readpin>
            if (*u8_a_value == u8_l_readCheck)
     536:	f7 01       	movw	r30, r14
     538:	80 81       	ld	r24, Z
     53a:	81 11       	cpse	r24, r1
     53c:	40 c0       	rjmp	.+128    	; 0x5be <KEYPAD_read+0xfa>
            {
                if (u8_a_rowiterator == 0)
     53e:	01 11       	cpse	r16, r1
     540:	11 c0       	rjmp	.+34     	; 0x564 <KEYPAD_read+0xa0>
                {
                    if (u8_a_coulumniterator == 0)
     542:	11 11       	cpse	r17, r1
     544:	03 c0       	rjmp	.+6      	; 0x54c <KEYPAD_read+0x88>
                    {
                        *u8_a_value = 1 ;
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	80 83       	st	Z, r24
     54a:	33 c0       	rjmp	.+102    	; 0x5b2 <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 1)
     54c:	11 30       	cpi	r17, 0x01	; 1
     54e:	21 f4       	brne	.+8      	; 0x558 <KEYPAD_read+0x94>
                    {
                        *u8_a_value = 2 ;
     550:	82 e0       	ldi	r24, 0x02	; 2
     552:	f7 01       	movw	r30, r14
     554:	80 83       	st	Z, r24
     556:	2d c0       	rjmp	.+90     	; 0x5b2 <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 2)
     558:	12 30       	cpi	r17, 0x02	; 2
     55a:	59 f5       	brne	.+86     	; 0x5b2 <KEYPAD_read+0xee>
                    {
                        *u8_a_value = 3 ;
     55c:	83 e0       	ldi	r24, 0x03	; 3
     55e:	f7 01       	movw	r30, r14
     560:	80 83       	st	Z, r24
     562:	27 c0       	rjmp	.+78     	; 0x5b2 <KEYPAD_read+0xee>
                    }
                }

                else if (u8_a_rowiterator == 1)
     564:	01 30       	cpi	r16, 0x01	; 1
     566:	91 f4       	brne	.+36     	; 0x58c <KEYPAD_read+0xc8>
                {
                    if (u8_a_coulumniterator == 0)
     568:	11 11       	cpse	r17, r1
     56a:	04 c0       	rjmp	.+8      	; 0x574 <KEYPAD_read+0xb0>
                    {
                        *u8_a_value = 4 ;
     56c:	84 e0       	ldi	r24, 0x04	; 4
     56e:	f7 01       	movw	r30, r14
     570:	80 83       	st	Z, r24
     572:	1f c0       	rjmp	.+62     	; 0x5b2 <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 1)
     574:	11 30       	cpi	r17, 0x01	; 1
     576:	21 f4       	brne	.+8      	; 0x580 <KEYPAD_read+0xbc>
                    {
                        *u8_a_value = 5 ;
     578:	85 e0       	ldi	r24, 0x05	; 5
     57a:	f7 01       	movw	r30, r14
     57c:	80 83       	st	Z, r24
     57e:	19 c0       	rjmp	.+50     	; 0x5b2 <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 2)
     580:	12 30       	cpi	r17, 0x02	; 2
     582:	b9 f4       	brne	.+46     	; 0x5b2 <KEYPAD_read+0xee>
                    {
                        *u8_a_value = 6 ;
     584:	86 e0       	ldi	r24, 0x06	; 6
     586:	f7 01       	movw	r30, r14
     588:	80 83       	st	Z, r24
     58a:	13 c0       	rjmp	.+38     	; 0x5b2 <KEYPAD_read+0xee>
                    }
                }

                else if (u8_a_rowiterator == 2)
     58c:	02 30       	cpi	r16, 0x02	; 2
     58e:	89 f4       	brne	.+34     	; 0x5b2 <KEYPAD_read+0xee>
                {
                    if (u8_a_coulumniterator == 0)
     590:	11 11       	cpse	r17, r1
     592:	04 c0       	rjmp	.+8      	; 0x59c <KEYPAD_read+0xd8>
                    {
                        *u8_a_value = 7 ;
     594:	87 e0       	ldi	r24, 0x07	; 7
     596:	f7 01       	movw	r30, r14
     598:	80 83       	st	Z, r24
     59a:	0b c0       	rjmp	.+22     	; 0x5b2 <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 1)
     59c:	11 30       	cpi	r17, 0x01	; 1
     59e:	21 f4       	brne	.+8      	; 0x5a8 <KEYPAD_read+0xe4>
                    {
                        *u8_a_value = 8 ;
     5a0:	88 e0       	ldi	r24, 0x08	; 8
     5a2:	f7 01       	movw	r30, r14
     5a4:	80 83       	st	Z, r24
     5a6:	05 c0       	rjmp	.+10     	; 0x5b2 <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 2)
     5a8:	12 30       	cpi	r17, 0x02	; 2
     5aa:	19 f4       	brne	.+6      	; 0x5b2 <KEYPAD_read+0xee>
                    {
                        *u8_a_value = 9 ;
     5ac:	89 e0       	ldi	r24, 0x09	; 9
     5ae:	f7 01       	movw	r30, r14
     5b0:	80 83       	st	Z, r24
                    }
                }

                DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     5b2:	6d 2d       	mov	r22, r13
     5b4:	82 e0       	ldi	r24, 0x02	; 2
     5b6:	0e 94 05 06 	call	0xc0a	; 0xc0a <DIO_togglepin>
                return KEYPAD_readSuccess;
     5ba:	80 e0       	ldi	r24, 0x00	; 0
     5bc:	0d c0       	rjmp	.+26     	; 0x5d8 <KEYPAD_read+0x114>

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
    {
        DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
     5be:	1f 5f       	subi	r17, 0xFF	; 255
     5c0:	13 30       	cpi	r17, 0x03	; 3
     5c2:	08 f4       	brcc	.+2      	; 0x5c6 <KEYPAD_read+0x102>
     5c4:	ad cf       	rjmp	.-166    	; 0x520 <KEYPAD_read+0x5c>

                DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
                return KEYPAD_readSuccess;
            }
        }
        DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     5c6:	6d 2d       	mov	r22, r13
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	0e 94 05 06 	call	0xc0a	; 0xc0a <DIO_togglepin>
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     5ce:	0f 5f       	subi	r16, 0xFF	; 255
     5d0:	04 30       	cpi	r16, 0x04	; 4
     5d2:	08 f4       	brcc	.+2      	; 0x5d6 <KEYPAD_read+0x112>
     5d4:	97 cf       	rjmp	.-210    	; 0x504 <KEYPAD_read+0x40>
                return KEYPAD_readSuccess;
            }
        }
        DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
    }
    return KEYPAD_readFail;
     5d6:	81 e0       	ldi	r24, 0x01	; 1
     5d8:	27 96       	adiw	r28, 0x07	; 7
     5da:	0f b6       	in	r0, 0x3f	; 63
     5dc:	f8 94       	cli
     5de:	de bf       	out	0x3e, r29	; 62
     5e0:	0f be       	out	0x3f, r0	; 63
     5e2:	cd bf       	out	0x3d, r28	; 61
     5e4:	df 91       	pop	r29
     5e6:	cf 91       	pop	r28
     5e8:	1f 91       	pop	r17
     5ea:	0f 91       	pop	r16
     5ec:	ff 90       	pop	r15
     5ee:	ef 90       	pop	r14
     5f0:	df 90       	pop	r13
     5f2:	08 95       	ret

000005f4 <LCD_sendcmd>:
/** FUNCTION TO SEND COMMAND TO LCD                       */
/** ARGUMENTS   : COMMAND                                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_sendcmd(uint8_t u8_a_cmd)
{
     5f4:	cf 93       	push	r28
     5f6:	c8 2f       	mov	r28, r24
	TMR0_init();
     5f8:	0e 94 3f 06 	call	0xc7e	; 0xc7e <TMR0_init>
		DIO_setpinvalue(LCD_8BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
		TMR0_delayms(5); /** LOW **/
		
		#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_LOW);  /** COMMAND MODE       **/
     5fc:	40 e0       	ldi	r20, 0x00	; 0
     5fe:	61 e0       	ldi	r22, 0x01	; 1
     600:	81 e0       	ldi	r24, 0x01	; 1
     602:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);  /** WRITE TO LCD MODE  **/
     606:	40 e0       	ldi	r20, 0x00	; 0
     608:	62 e0       	ldi	r22, 0x02	; 2
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);   /** PREPARE FOR LATCH  **/
     610:	40 e0       	ldi	r20, 0x00	; 0
     612:	63 e0       	ldi	r22, 0x03	; 3
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
		
		PORTA = ((u8_a_cmd & 0xF0) | (PORTA & 0x0F)); /** SEND THE MSB(HIGH NIBBLE) **/
     61a:	8b b3       	in	r24, 0x1b	; 27
     61c:	9c 2f       	mov	r25, r28
     61e:	90 7f       	andi	r25, 0xF0	; 240
     620:	8f 70       	andi	r24, 0x0F	; 15
     622:	89 2b       	or	r24, r25
     624:	8b bb       	out	0x1b, r24	; 27
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
     626:	41 e0       	ldi	r20, 0x01	; 1
     628:	63 e0       	ldi	r22, 0x03	; 3
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
		TMR0_delayms(1);
     630:	61 e0       	ldi	r22, 0x01	; 1
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
     63c:	40 e0       	ldi	r20, 0x00	; 0
     63e:	63 e0       	ldi	r22, 0x03	; 3
     640:	81 e0       	ldi	r24, 0x01	; 1
     642:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
		
		
		PORTA = (((u8_a_cmd << 4) & 0xF0) | (PORTA & 0x0F)); /** SEND THE LSB(LOW NIBBLE) **/
     646:	20 e1       	ldi	r18, 0x10	; 16
     648:	c2 9f       	mul	r28, r18
     64a:	c0 01       	movw	r24, r0
     64c:	11 24       	eor	r1, r1
     64e:	9b b3       	in	r25, 0x1b	; 27
     650:	9f 70       	andi	r25, 0x0F	; 15
     652:	89 2b       	or	r24, r25
     654:	8b bb       	out	0x1b, r24	; 27
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
     656:	41 e0       	ldi	r20, 0x01	; 1
     658:	63 e0       	ldi	r22, 0x03	; 3
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
		TMR0_delayms(1);
     660:	61 e0       	ldi	r22, 0x01	; 1
     662:	70 e0       	ldi	r23, 0x00	; 0
     664:	80 e0       	ldi	r24, 0x00	; 0
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);    /** LATCH **/
     66c:	40 e0       	ldi	r20, 0x00	; 0
     66e:	63 e0       	ldi	r22, 0x03	; 3
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
		
		TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT COMMAND **/
     676:	65 e0       	ldi	r22, 0x05	; 5
     678:	70 e0       	ldi	r23, 0x00	; 0
     67a:	80 e0       	ldi	r24, 0x00	; 0
     67c:	90 e0       	ldi	r25, 0x00	; 0
     67e:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
		
		#endif
}
     682:	cf 91       	pop	r28
     684:	08 95       	ret

00000686 <LCD_init>:
/**********************************************************/
LCD_status LCD_init(void)
{
	LCD_status en_a_lcdinitstatus = VALID__LCD_INIT ; /** VARIABLE TO OLD THE RETURN STATUS OF THE FUNCTION **/
	
	TMR0_init();
     686:	0e 94 3f 06 	call	0xc7e	; 0xc7e <TMR0_init>
		LCD_sendcmd(LCD_CLEAR);       /** CLEAR THE LCD                                    **/
		
		
		#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
		
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_OUTPUT); /** SET RS PIN AS OUTPUT PIN **/
     68a:	41 e0       	ldi	r20, 0x01	; 1
     68c:	61 e0       	ldi	r22, 0x01	; 1
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_OUTPUT); /** SET RW PIN AS OUTPUT PIN **/
     694:	41 e0       	ldi	r20, 0x01	; 1
     696:	62 e0       	ldi	r22, 0x02	; 2
     698:	81 e0       	ldi	r24, 0x01	; 1
     69a:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_OUTPUT);  /** SET E PIN AS OUTPUT PIN  **/
     69e:	41 e0       	ldi	r20, 0x01	; 1
     6a0:	63 e0       	ldi	r22, 0x03	; 3
     6a2:	81 e0       	ldi	r24, 0x01	; 1
     6a4:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_setpindir>
		
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D4_PIN , DIO_PIN_OUTPUT); /** 4 DATA PINS AS OUTPUT **/
     6a8:	41 e0       	ldi	r20, 0x01	; 1
     6aa:	64 e0       	ldi	r22, 0x04	; 4
     6ac:	80 e0       	ldi	r24, 0x00	; 0
     6ae:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D5_PIN , DIO_PIN_OUTPUT);
     6b2:	41 e0       	ldi	r20, 0x01	; 1
     6b4:	65 e0       	ldi	r22, 0x05	; 5
     6b6:	80 e0       	ldi	r24, 0x00	; 0
     6b8:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D6_PIN , DIO_PIN_OUTPUT);
     6bc:	41 e0       	ldi	r20, 0x01	; 1
     6be:	66 e0       	ldi	r22, 0x06	; 6
     6c0:	80 e0       	ldi	r24, 0x00	; 0
     6c2:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D7_PIN , DIO_PIN_OUTPUT);
     6c6:	41 e0       	ldi	r20, 0x01	; 1
     6c8:	67 e0       	ldi	r22, 0x07	; 7
     6ca:	80 e0       	ldi	r24, 0x00	; 0
     6cc:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_setpindir>
		
		TMR0_delayms(20); /** DELAY FOR LCD TO BE INITIALIZED **/
     6d0:	64 e1       	ldi	r22, 0x14	; 20
     6d2:	70 e0       	ldi	r23, 0x00	; 0
     6d4:	80 e0       	ldi	r24, 0x00	; 0
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
		
		/** SEND SOME COMMANDS TO THE LCD FOR INITIAL SET   **/
		
		LCD_sendcmd(LCD_4BIT_MODE_CMD1); /** SEND THREE COMMANDS FOR LCD TO SET 4 BIT OPERATION MODE ( 2 LINES , 5*8 MATRIX ) **/
     6dc:	83 e3       	ldi	r24, 0x33	; 51
     6de:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_sendcmd>
		LCD_sendcmd(LCD_4BIT_MODE_CMD2);
     6e2:	82 e3       	ldi	r24, 0x32	; 50
     6e4:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_sendcmd>
		LCD_sendcmd(LCD_4BIT_MODE_CMD3);
     6e8:	88 e2       	ldi	r24, 0x28	; 40
     6ea:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_sendcmd>
		
		LCD_sendcmd(LCD_CURSOR_OFF);     /** NO NEED FOR CURSOR SO IT IS OFF                  **/
     6ee:	8c e0       	ldi	r24, 0x0C	; 12
     6f0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_sendcmd>
		LCD_sendcmd(LCD_CURSOR_INC);     /** DIRECTION OF WRITING FROM LEFT TO RIGHT          **/
     6f4:	86 e0       	ldi	r24, 0x06	; 6
     6f6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_sendcmd>
		LCD_sendcmd(LCD_RETURN_HOME);    /** CURSOR STARTS FROM ITS HOME POSITION             **/
     6fa:	82 e0       	ldi	r24, 0x02	; 2
     6fc:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_sendcmd>
		LCD_sendcmd(LCD_CLEAR);          /** CLEAR THE LCD                                    **/
     700:	81 e0       	ldi	r24, 0x01	; 1
     702:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_sendcmd>
		
		#endif 
		
}
     706:	08 95       	ret

00000708 <LCD_writechar>:
/** FUNCTION TO DISPLAY CHARACTER ON LCD                  */
/** ARGUMENTS   : CHARACTER                               */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writechar(uint8_t u8_a_chr)
{
     708:	cf 93       	push	r28
     70a:	c8 2f       	mov	r28, r24
	
	TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT CHARACTER **/
	
	#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_HIGH);  /** DATA MODE         **/
     70c:	41 e0       	ldi	r20, 0x01	; 1
     70e:	61 e0       	ldi	r22, 0x01	; 1
     710:	81 e0       	ldi	r24, 0x01	; 1
     712:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);   /** WRITE TO LCD MODE **/
     716:	40 e0       	ldi	r20, 0x00	; 0
     718:	62 e0       	ldi	r22, 0x02	; 2
     71a:	81 e0       	ldi	r24, 0x01	; 1
     71c:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);    /** DATA MODE         **/
     720:	40 e0       	ldi	r20, 0x00	; 0
     722:	63 e0       	ldi	r22, 0x03	; 3
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
	
	
	PORTA = ((u8_a_chr & 0xF0) | (PORTA & 0x0F)); /** SEND THE MSB (HIGH NIBBLE) **/
     72a:	8b b3       	in	r24, 0x1b	; 27
     72c:	9c 2f       	mov	r25, r28
     72e:	90 7f       	andi	r25, 0xF0	; 240
     730:	8f 70       	andi	r24, 0x0F	; 15
     732:	89 2b       	or	r24, r25
     734:	8b bb       	out	0x1b, r24	; 27
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
     736:	41 e0       	ldi	r20, 0x01	; 1
     738:	63 e0       	ldi	r22, 0x03	; 3
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
	TMR0_delayms(1);
     740:	61 e0       	ldi	r22, 0x01	; 1
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	80 e0       	ldi	r24, 0x00	; 0
     746:	90 e0       	ldi	r25, 0x00	; 0
     748:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW); /** LATCH **/
     74c:	40 e0       	ldi	r20, 0x00	; 0
     74e:	63 e0       	ldi	r22, 0x03	; 3
     750:	81 e0       	ldi	r24, 0x01	; 1
     752:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
		
	PORTA = (((u8_a_chr << 4) & 0xF0) | (PORTA & 0x0F)); /** SEND THE LSB (LOW NIBBLE) **/
     756:	20 e1       	ldi	r18, 0x10	; 16
     758:	c2 9f       	mul	r28, r18
     75a:	c0 01       	movw	r24, r0
     75c:	11 24       	eor	r1, r1
     75e:	9b b3       	in	r25, 0x1b	; 27
     760:	9f 70       	andi	r25, 0x0F	; 15
     762:	89 2b       	or	r24, r25
     764:	8b bb       	out	0x1b, r24	; 27
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
     766:	41 e0       	ldi	r20, 0x01	; 1
     768:	63 e0       	ldi	r22, 0x03	; 3
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
	TMR0_delayms(1);
     770:	61 e0       	ldi	r22, 0x01	; 1
     772:	70 e0       	ldi	r23, 0x00	; 0
     774:	80 e0       	ldi	r24, 0x00	; 0
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
     77c:	40 e0       	ldi	r20, 0x00	; 0
     77e:	63 e0       	ldi	r22, 0x03	; 3
     780:	81 e0       	ldi	r24, 0x01	; 1
     782:	0e 94 48 05 	call	0xa90	; 0xa90 <DIO_setpinvalue>
	
	TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT CHARACTER **/
     786:	65 e0       	ldi	r22, 0x05	; 5
     788:	70 e0       	ldi	r23, 0x00	; 0
     78a:	80 e0       	ldi	r24, 0x00	; 0
     78c:	90 e0       	ldi	r25, 0x00	; 0
     78e:	0e 94 66 06 	call	0xccc	; 0xccc <TMR0_delayms>
	
	#endif
}
     792:	cf 91       	pop	r28
     794:	08 95       	ret

00000796 <LCD_writestr>:
/** FUNCTION TO DISPLAY STRING ON LCD                     */
/** ARGUMENTS   : STRING                                  */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writestr(uint8_t* u8_s_str)
{
     796:	0f 93       	push	r16
     798:	1f 93       	push	r17
     79a:	cf 93       	push	r28
     79c:	8c 01       	movw	r16, r24
	uint8_t u8_a_letter = 0;   /** VARIABLE SIMULATES LETTER **/
     79e:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (u8_s_str[u8_a_letter] != '\0') /** WHILE LETTER ISN'T NULL **/
     7a0:	03 c0       	rjmp	.+6      	; 0x7a8 <LCD_writestr+0x12>
	{
		LCD_writechar(u8_s_str[u8_a_letter]); /** SEND LETTER TO LCD **/
     7a2:	0e 94 84 03 	call	0x708	; 0x708 <LCD_writechar>
		
		u8_a_letter++; /** JUMP TO THE NEXT LETTER **/
     7a6:	cf 5f       	subi	r28, 0xFF	; 255
/**********************************************************/
LCD_status LCD_writestr(uint8_t* u8_s_str)
{
	uint8_t u8_a_letter = 0;   /** VARIABLE SIMULATES LETTER **/
	
	while (u8_s_str[u8_a_letter] != '\0') /** WHILE LETTER ISN'T NULL **/
     7a8:	f8 01       	movw	r30, r16
     7aa:	ec 0f       	add	r30, r28
     7ac:	f1 1d       	adc	r31, r1
     7ae:	80 81       	ld	r24, Z
     7b0:	81 11       	cpse	r24, r1
     7b2:	f7 cf       	rjmp	.-18     	; 0x7a2 <LCD_writestr+0xc>
	{
		LCD_writechar(u8_s_str[u8_a_letter]); /** SEND LETTER TO LCD **/
		
		u8_a_letter++; /** JUMP TO THE NEXT LETTER **/
	}
}
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	08 95       	ret

000007bc <LCD_goto>:
/** FUNCTION TO JUMP TO SPECIFIC POSITION ON LCD          */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status  LCD_goto(uint8_t u8_a_row , uint8_t u8_a_column)
{
     7bc:	cf 93       	push	r28
     7be:	df 93       	push	r29
     7c0:	00 d0       	rcall	.+0      	; 0x7c2 <LCD_goto+0x6>
     7c2:	cd b7       	in	r28, 0x3d	; 61
     7c4:	de b7       	in	r29, 0x3e	; 62
	uint8_t positions[2] = {0x80 , 0xC0}; /** POSITIONS OF 1st & 2nd ROWS **/
     7c6:	90 e8       	ldi	r25, 0x80	; 128
     7c8:	99 83       	std	Y+1, r25	; 0x01
     7ca:	90 ec       	ldi	r25, 0xC0	; 192
     7cc:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_sendcmd(positions[u8_a_row] + u8_a_column); /** GO TO SPECIFIC MATRIX **/
     7ce:	e1 e0       	ldi	r30, 0x01	; 1
     7d0:	f0 e0       	ldi	r31, 0x00	; 0
     7d2:	ec 0f       	add	r30, r28
     7d4:	fd 1f       	adc	r31, r29
     7d6:	e8 0f       	add	r30, r24
     7d8:	f1 1d       	adc	r31, r1
     7da:	80 81       	ld	r24, Z
     7dc:	86 0f       	add	r24, r22
     7de:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_sendcmd>
}
     7e2:	0f 90       	pop	r0
     7e4:	0f 90       	pop	r0
     7e6:	df 91       	pop	r29
     7e8:	cf 91       	pop	r28
     7ea:	08 95       	ret

000007ec <LCD_writecustomchar>:
/** FUNCTION TO WRITE CUSOMIZED CHARACTER ON THE LCD      */
/** ARGUMENTS   : PATTERN , OCATION IN CGRAM              */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writecustomchar(uint8_t * u8_a_pattern , uint8_t u8_a_location)
{
     7ec:	0f 93       	push	r16
     7ee:	1f 93       	push	r17
     7f0:	cf 93       	push	r28
     7f2:	8c 01       	movw	r16, r24
	uint8_t u8_a_patterncounter = 0 ; /** ITERATOR ON THE ROWS OF CHARACTER PATTERN **/
	
	LCD_sendcmd( 0x40 + (u8_a_location * 8) ); /** SEND COMMAND TO LCD TO WRITE TO ITS RAM **/
     7f4:	86 2f       	mov	r24, r22
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	08 96       	adiw	r24, 0x08	; 8
     7fa:	88 0f       	add	r24, r24
     7fc:	88 0f       	add	r24, r24
     7fe:	88 0f       	add	r24, r24
     800:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <LCD_sendcmd>
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
     804:	c0 e0       	ldi	r28, 0x00	; 0
     806:	07 c0       	rjmp	.+14     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
     808:	f8 01       	movw	r30, r16
     80a:	ec 0f       	add	r30, r28
     80c:	f1 1d       	adc	r31, r1
     80e:	80 81       	ld	r24, Z
     810:	0e 94 84 03 	call	0x708	; 0x708 <LCD_writechar>
{
	uint8_t u8_a_patterncounter = 0 ; /** ITERATOR ON THE ROWS OF CHARACTER PATTERN **/
	
	LCD_sendcmd( 0x40 + (u8_a_location * 8) ); /** SEND COMMAND TO LCD TO WRITE TO ITS RAM **/
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
     814:	cf 5f       	subi	r28, 0xFF	; 255
     816:	c8 30       	cpi	r28, 0x08	; 8
     818:	b8 f3       	brcs	.-18     	; 0x808 <__DATA_REGION_LENGTH__+0x8>
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
	}
}
     81a:	cf 91       	pop	r28
     81c:	1f 91       	pop	r17
     81e:	0f 91       	pop	r16
     820:	08 95       	ret

00000822 <LCD_writeint>:
/** FUNCTION TO WRITE INT ON THE LCD                      */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
     822:	1f 93       	push	r17
     824:	cf 93       	push	r28
     826:	df 93       	push	r29
     828:	cd b7       	in	r28, 0x3d	; 61
     82a:	de b7       	in	r29, 0x3e	; 62
     82c:	2a 97       	sbiw	r28, 0x0a	; 10
     82e:	0f b6       	in	r0, 0x3f	; 63
     830:	f8 94       	cli
     832:	de bf       	out	0x3e, r29	; 62
     834:	0f be       	out	0x3f, r0	; 63
     836:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0 , k ;
	
	uint8_t number[10];
	
	/* In case of negative numbers */
	if(s32_a_num < 0)
     838:	99 23       	and	r25, r25
     83a:	dc f5       	brge	.+118    	; 0x8b2 <__stack+0x53>
	{
		s32_a_num *= -1;
     83c:	90 95       	com	r25
     83e:	80 95       	com	r24
     840:	70 95       	com	r23
     842:	61 95       	neg	r22
     844:	7f 4f       	sbci	r23, 0xFF	; 255
     846:	8f 4f       	sbci	r24, 0xFF	; 255
     848:	9f 4f       	sbci	r25, 0xFF	; 255
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
	uint8_t i = 0 , k ;
     84a:	10 e0       	ldi	r17, 0x00	; 0
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     84c:	13 c0       	rjmp	.+38     	; 0x874 <__stack+0x15>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
     84e:	2a e0       	ldi	r18, 0x0A	; 10
     850:	30 e0       	ldi	r19, 0x00	; 0
     852:	40 e0       	ldi	r20, 0x00	; 0
     854:	50 e0       	ldi	r21, 0x00	; 0
     856:	0e 94 3e 08 	call	0x107c	; 0x107c <__divmodsi4>
     85a:	e1 e0       	ldi	r30, 0x01	; 1
     85c:	f0 e0       	ldi	r31, 0x00	; 0
     85e:	ec 0f       	add	r30, r28
     860:	fd 1f       	adc	r31, r29
     862:	e1 0f       	add	r30, r17
     864:	f1 1d       	adc	r31, r1
     866:	60 5d       	subi	r22, 0xD0	; 208
     868:	60 83       	st	Z, r22
			s32_a_num /= 10;
     86a:	62 2f       	mov	r22, r18
     86c:	73 2f       	mov	r23, r19
     86e:	84 2f       	mov	r24, r20
     870:	95 2f       	mov	r25, r21
			i++;
     872:	1f 5f       	subi	r17, 0xFF	; 255
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     874:	16 16       	cp	r1, r22
     876:	17 06       	cpc	r1, r23
     878:	18 06       	cpc	r1, r24
     87a:	19 06       	cpc	r1, r25
     87c:	44 f3       	brlt	.-48     	; 0x84e <LCD_writeint+0x2c>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
     87e:	e1 e0       	ldi	r30, 0x01	; 1
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	ec 0f       	add	r30, r28
     884:	fd 1f       	adc	r31, r29
     886:	e1 0f       	add	r30, r17
     888:	f1 1d       	adc	r31, r1
     88a:	8d e2       	ldi	r24, 0x2D	; 45
     88c:	80 83       	st	Z, r24
		
		for(k = i+1 ; k > 0 ; k--)
     88e:	1f 5f       	subi	r17, 0xFF	; 255
     890:	0d c0       	rjmp	.+26     	; 0x8ac <__stack+0x4d>
		{
			LCD_writechar(number[k - 1]); //Display each number
     892:	e1 2f       	mov	r30, r17
     894:	f0 e0       	ldi	r31, 0x00	; 0
     896:	31 97       	sbiw	r30, 0x01	; 1
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	8c 0f       	add	r24, r28
     89e:	9d 1f       	adc	r25, r29
     8a0:	e8 0f       	add	r30, r24
     8a2:	f9 1f       	adc	r31, r25
     8a4:	80 81       	ld	r24, Z
     8a6:	0e 94 84 03 	call	0x708	; 0x708 <LCD_writechar>
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
		
		for(k = i+1 ; k > 0 ; k--)
     8aa:	11 50       	subi	r17, 0x01	; 1
     8ac:	11 11       	cpse	r17, r1
     8ae:	f1 cf       	rjmp	.-30     	; 0x892 <__stack+0x33>
     8b0:	39 c0       	rjmp	.+114    	; 0x924 <__stack+0xc5>
		{
			LCD_writechar(number[k - 1]); //Display each number
		}
	}
	/* Zero case */
	else if(s32_a_num == 0)
     8b2:	61 15       	cp	r22, r1
     8b4:	71 05       	cpc	r23, r1
     8b6:	81 05       	cpc	r24, r1
     8b8:	91 05       	cpc	r25, r1
     8ba:	21 f4       	brne	.+8      	; 0x8c4 <__stack+0x65>
	{
		LCD_writechar('0');
     8bc:	80 e3       	ldi	r24, 0x30	; 48
     8be:	0e 94 84 03 	call	0x708	; 0x708 <LCD_writechar>
     8c2:	30 c0       	rjmp	.+96     	; 0x924 <__stack+0xc5>
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
     8c4:	16 16       	cp	r1, r22
     8c6:	17 06       	cpc	r1, r23
     8c8:	18 06       	cpc	r1, r24
     8ca:	19 06       	cpc	r1, r25
     8cc:	ac f0       	brlt	.+42     	; 0x8f8 <__stack+0x99>
     8ce:	2a c0       	rjmp	.+84     	; 0x924 <__stack+0xc5>
	{
		while(s32_a_num > 0)
		{
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
     8d0:	2a e0       	ldi	r18, 0x0A	; 10
     8d2:	30 e0       	ldi	r19, 0x00	; 0
     8d4:	40 e0       	ldi	r20, 0x00	; 0
     8d6:	50 e0       	ldi	r21, 0x00	; 0
     8d8:	0e 94 3e 08 	call	0x107c	; 0x107c <__divmodsi4>
     8dc:	e1 e0       	ldi	r30, 0x01	; 1
     8de:	f0 e0       	ldi	r31, 0x00	; 0
     8e0:	ec 0f       	add	r30, r28
     8e2:	fd 1f       	adc	r31, r29
     8e4:	e1 0f       	add	r30, r17
     8e6:	f1 1d       	adc	r31, r1
     8e8:	60 5d       	subi	r22, 0xD0	; 208
     8ea:	60 83       	st	Z, r22
			s32_a_num /= 10;
     8ec:	62 2f       	mov	r22, r18
     8ee:	73 2f       	mov	r23, r19
     8f0:	84 2f       	mov	r24, r20
     8f2:	95 2f       	mov	r25, r21
			i++;
     8f4:	1f 5f       	subi	r17, 0xFF	; 255
     8f6:	01 c0       	rjmp	.+2      	; 0x8fa <__stack+0x9b>
     8f8:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
	{
		while(s32_a_num > 0)
     8fa:	16 16       	cp	r1, r22
     8fc:	17 06       	cpc	r1, r23
     8fe:	18 06       	cpc	r1, r24
     900:	19 06       	cpc	r1, r25
     902:	34 f3       	brlt	.-52     	; 0x8d0 <__stack+0x71>
     904:	0d c0       	rjmp	.+26     	; 0x920 <__stack+0xc1>
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
		{
			LCD_writechar(number[k-1]); //Display each number
     906:	e1 2f       	mov	r30, r17
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	31 97       	sbiw	r30, 0x01	; 1
     90c:	81 e0       	ldi	r24, 0x01	; 1
     90e:	90 e0       	ldi	r25, 0x00	; 0
     910:	8c 0f       	add	r24, r28
     912:	9d 1f       	adc	r25, r29
     914:	e8 0f       	add	r30, r24
     916:	f9 1f       	adc	r31, r25
     918:	80 81       	ld	r24, Z
     91a:	0e 94 84 03 	call	0x708	; 0x708 <LCD_writechar>
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
     91e:	11 50       	subi	r17, 0x01	; 1
     920:	11 11       	cpse	r17, r1
     922:	f1 cf       	rjmp	.-30     	; 0x906 <__stack+0xa7>
		{
			LCD_writechar(number[k-1]); //Display each number
		}
	}
     924:	2a 96       	adiw	r28, 0x0a	; 10
     926:	0f b6       	in	r0, 0x3f	; 63
     928:	f8 94       	cli
     92a:	de bf       	out	0x3e, r29	; 62
     92c:	0f be       	out	0x3f, r0	; 63
     92e:	cd bf       	out	0x3d, r28	; 61
     930:	df 91       	pop	r29
     932:	cf 91       	pop	r28
     934:	1f 91       	pop	r17
     936:	08 95       	ret

00000938 <main>:
#include "APP/app.h"


int main(void)
{
	APP_init();
     938:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	

    /* Replace with your application code */
    while (1) 
    {
		APP_start();
     93c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <APP_start>
     940:	fd cf       	rjmp	.-6      	; 0x93c <main+0x4>

00000942 <ADC_init>:
/***********************************************************/
ADC_initstatus ADC_init(void)
{
	/** SET THE VOLTAGE REFERENCE AS IT'S CONFIGURED **/
 	#if   ADC_VOLTAGE_REFRENCE   ==      AVCC_SOURCE
 	set_bit(ADMUX , 6);
     942:	87 b1       	in	r24, 0x07	; 7
     944:	80 64       	ori	r24, 0x40	; 64
     946:	87 b9       	out	0x07, r24	; 7
 	clear_bit(ADMUX , 7);
     948:	87 b1       	in	r24, 0x07	; 7
     94a:	8f 77       	andi	r24, 0x7F	; 127
     94c:	87 b9       	out	0x07, r24	; 7
	
	#endif
	
	
	#if   ADC_CHANNEL           ==     CHANNEL1
	set_bit(ADMUX , 0);
     94e:	87 b1       	in	r24, 0x07	; 7
     950:	81 60       	ori	r24, 0x01	; 1
     952:	87 b9       	out	0x07, r24	; 7
	DIO_setpindir(DIO_PORTA , DIO_PIN1 , DIO_PIN_INPUT); /** SET THE DIRECION OF PIN CHANNEL AS INPUT **/
     954:	40 e0       	ldi	r20, 0x00	; 0
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	0e 94 c9 04 	call	0x992	; 0x992 <DIO_setpindir>
	#elif  ADC_PRESCALER          ==      PRESCALER8
		 set_bit(ADCSRA , 0);
		 set_bit(ADCSRA , 1);
		
	#elif  ADC_PRESCALER          ==      PRESCALER4
		 set_bit(ADCSRA , 1);
     95e:	86 b1       	in	r24, 0x06	; 6
     960:	82 60       	ori	r24, 0x02	; 2
     962:	86 b9       	out	0x06, r24	; 6
	     
	#endif
	
	/** SET THE ADJUSTING MODE OF ADC VALUE  **/
	#if    ADC_ADjUST            ==     RIGHT_ADJUST
	clear_bit(ADMUX , 5);
     964:	87 b1       	in	r24, 0x07	; 7
     966:	8f 7d       	andi	r24, 0xDF	; 223
     968:	87 b9       	out	0x07, r24	; 7
	
	#endif
		
	/** SET THE OPERATING MODE OF ADC **/
	#if  ADC_CONVERSION_TRIGGER  ==    AUTO_RUNNING_MODE
	set_bit(ADCSRA , 5);
     96a:	86 b1       	in	r24, 0x06	; 6
     96c:	80 62       	ori	r24, 0x20	; 32
     96e:	86 b9       	out	0x06, r24	; 6
 	
	 
	/** ADC INTERRUPT STATUS **/
	#if  ADC_INTERRUPT_STATUS   ==     ADC_INT_DISABLED
	
	clear_bit(ADCSRA , 3);
     970:	86 b1       	in	r24, 0x06	; 6
     972:	87 7f       	andi	r24, 0xF7	; 247
     974:	86 b9       	out	0x06, r24	; 6
 	set_bit(SREG , 7);
 	set_bit(ADCSRA , 3);
	#endif
	
	/** Enable  ADC **/
	set_bit(ADCSRA , 7);
     976:	86 b1       	in	r24, 0x06	; 6
     978:	80 68       	ori	r24, 0x80	; 128
     97a:	86 b9       	out	0x06, r24	; 6
}
     97c:	08 95       	ret

0000097e <ADC_read>:
/***********************************************************/
uint32_t ADC_read(void)
{
	uint32_t u16_a_analogvalue = 0;
		
	set_bit(ADCSRA , 6); /** SATRT CONVERSION **/
     97e:	86 b1       	in	r24, 0x06	; 6
     980:	80 64       	ori	r24, 0x40	; 64
     982:	86 b9       	out	0x06, r24	; 6
	
	while( (ADCSRA & (1 << 4)) == 0); /** WAIT UNTILL CONVERSION ENDS **/
     984:	34 9b       	sbis	0x06, 4	; 6
     986:	fe cf       	rjmp	.-4      	; 0x984 <ADC_read+0x6>
	
	u16_a_analogvalue = ADC_VAL ; /** GET THE VALUE FORM ADC VALUE REGISTER **/
     988:	64 b1       	in	r22, 0x04	; 4
     98a:	75 b1       	in	r23, 0x05	; 5
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	90 e0       	ldi	r25, 0x00	; 0
	 
	return u16_a_analogvalue; /** RETURN THE ANALOG VALUE **/ 
     990:	08 95       	ret

00000992 <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
     992:	44 23       	and	r20, r20
     994:	19 f0       	breq	.+6      	; 0x99c <DIO_setpindir+0xa>
     996:	41 30       	cpi	r20, 0x01	; 1
     998:	e9 f1       	breq	.+122    	; 0xa14 <DIO_setpindir+0x82>
     99a:	74 c0       	rjmp	.+232    	; 0xa84 <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     99c:	81 30       	cpi	r24, 0x01	; 1
     99e:	99 f0       	breq	.+38     	; 0x9c6 <DIO_setpindir+0x34>
     9a0:	28 f0       	brcs	.+10     	; 0x9ac <DIO_setpindir+0x1a>
     9a2:	82 30       	cpi	r24, 0x02	; 2
     9a4:	e9 f0       	breq	.+58     	; 0x9e0 <DIO_setpindir+0x4e>
     9a6:	83 30       	cpi	r24, 0x03	; 3
     9a8:	41 f1       	breq	.+80     	; 0x9fa <DIO_setpindir+0x68>
     9aa:	6e c0       	rjmp	.+220    	; 0xa88 <DIO_setpindir+0xf6>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
     9ac:	2a b3       	in	r18, 0x1a	; 26
     9ae:	81 e0       	ldi	r24, 0x01	; 1
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	02 c0       	rjmp	.+4      	; 0x9b8 <DIO_setpindir+0x26>
     9b4:	88 0f       	add	r24, r24
     9b6:	99 1f       	adc	r25, r25
     9b8:	6a 95       	dec	r22
     9ba:	e2 f7       	brpl	.-8      	; 0x9b4 <DIO_setpindir+0x22>
     9bc:	80 95       	com	r24
     9be:	82 23       	and	r24, r18
     9c0:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     9c2:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
     9c4:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
     9c6:	27 b3       	in	r18, 0x17	; 23
     9c8:	81 e0       	ldi	r24, 0x01	; 1
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	02 c0       	rjmp	.+4      	; 0x9d2 <DIO_setpindir+0x40>
     9ce:	88 0f       	add	r24, r24
     9d0:	99 1f       	adc	r25, r25
     9d2:	6a 95       	dec	r22
     9d4:	e2 f7       	brpl	.-8      	; 0x9ce <DIO_setpindir+0x3c>
     9d6:	80 95       	com	r24
     9d8:	82 23       	and	r24, r18
     9da:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     9dc:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
     9de:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
     9e0:	24 b3       	in	r18, 0x14	; 20
     9e2:	81 e0       	ldi	r24, 0x01	; 1
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	02 c0       	rjmp	.+4      	; 0x9ec <DIO_setpindir+0x5a>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	6a 95       	dec	r22
     9ee:	e2 f7       	brpl	.-8      	; 0x9e8 <DIO_setpindir+0x56>
     9f0:	80 95       	com	r24
     9f2:	82 23       	and	r24, r18
     9f4:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     9f6:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
     9f8:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
     9fa:	21 b3       	in	r18, 0x11	; 17
     9fc:	81 e0       	ldi	r24, 0x01	; 1
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	02 c0       	rjmp	.+4      	; 0xa06 <DIO_setpindir+0x74>
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	6a 95       	dec	r22
     a08:	e2 f7       	brpl	.-8      	; 0xa02 <DIO_setpindir+0x70>
     a0a:	80 95       	com	r24
     a0c:	82 23       	and	r24, r18
     a0e:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     a10:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
     a12:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	91 f0       	breq	.+36     	; 0xa3c <DIO_setpindir+0xaa>
     a18:	28 f0       	brcs	.+10     	; 0xa24 <DIO_setpindir+0x92>
     a1a:	82 30       	cpi	r24, 0x02	; 2
     a1c:	d9 f0       	breq	.+54     	; 0xa54 <DIO_setpindir+0xc2>
     a1e:	83 30       	cpi	r24, 0x03	; 3
     a20:	29 f1       	breq	.+74     	; 0xa6c <DIO_setpindir+0xda>
     a22:	34 c0       	rjmp	.+104    	; 0xa8c <DIO_setpindir+0xfa>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     a24:	2a b3       	in	r18, 0x1a	; 26
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	02 c0       	rjmp	.+4      	; 0xa30 <DIO_setpindir+0x9e>
     a2c:	88 0f       	add	r24, r24
     a2e:	99 1f       	adc	r25, r25
     a30:	6a 95       	dec	r22
     a32:	e2 f7       	brpl	.-8      	; 0xa2c <DIO_setpindir+0x9a>
     a34:	82 2b       	or	r24, r18
     a36:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     a38:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     a3a:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     a3c:	27 b3       	in	r18, 0x17	; 23
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	02 c0       	rjmp	.+4      	; 0xa48 <DIO_setpindir+0xb6>
     a44:	88 0f       	add	r24, r24
     a46:	99 1f       	adc	r25, r25
     a48:	6a 95       	dec	r22
     a4a:	e2 f7       	brpl	.-8      	; 0xa44 <DIO_setpindir+0xb2>
     a4c:	82 2b       	or	r24, r18
     a4e:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     a50:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     a52:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     a54:	24 b3       	in	r18, 0x14	; 20
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	90 e0       	ldi	r25, 0x00	; 0
     a5a:	02 c0       	rjmp	.+4      	; 0xa60 <DIO_setpindir+0xce>
     a5c:	88 0f       	add	r24, r24
     a5e:	99 1f       	adc	r25, r25
     a60:	6a 95       	dec	r22
     a62:	e2 f7       	brpl	.-8      	; 0xa5c <DIO_setpindir+0xca>
     a64:	82 2b       	or	r24, r18
     a66:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     a68:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     a6a:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     a6c:	21 b3       	in	r18, 0x11	; 17
     a6e:	81 e0       	ldi	r24, 0x01	; 1
     a70:	90 e0       	ldi	r25, 0x00	; 0
     a72:	02 c0       	rjmp	.+4      	; 0xa78 <DIO_setpindir+0xe6>
     a74:	88 0f       	add	r24, r24
     a76:	99 1f       	adc	r25, r25
     a78:	6a 95       	dec	r22
     a7a:	e2 f7       	brpl	.-8      	; 0xa74 <DIO_setpindir+0xe2>
     a7c:	82 2b       	or	r24, r18
     a7e:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     a80:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     a82:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     a84:	81 e0       	ldi	r24, 0x01	; 1
     a86:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     a88:	81 e0       	ldi	r24, 0x01	; 1
     a8a:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     a8c:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
     a8e:	08 95       	ret

00000a90 <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
     a90:	44 23       	and	r20, r20
     a92:	19 f0       	breq	.+6      	; 0xa9a <DIO_setpinvalue+0xa>
     a94:	41 30       	cpi	r20, 0x01	; 1
     a96:	e9 f1       	breq	.+122    	; 0xb12 <DIO_setpinvalue+0x82>
     a98:	74 c0       	rjmp	.+232    	; 0xb82 <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
     a9a:	81 30       	cpi	r24, 0x01	; 1
     a9c:	99 f0       	breq	.+38     	; 0xac4 <DIO_setpinvalue+0x34>
     a9e:	28 f0       	brcs	.+10     	; 0xaaa <DIO_setpinvalue+0x1a>
     aa0:	82 30       	cpi	r24, 0x02	; 2
     aa2:	e9 f0       	breq	.+58     	; 0xade <DIO_setpinvalue+0x4e>
     aa4:	83 30       	cpi	r24, 0x03	; 3
     aa6:	41 f1       	breq	.+80     	; 0xaf8 <DIO_setpinvalue+0x68>
     aa8:	6e c0       	rjmp	.+220    	; 0xb86 <DIO_setpinvalue+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     aaa:	2b b3       	in	r18, 0x1b	; 27
     aac:	81 e0       	ldi	r24, 0x01	; 1
     aae:	90 e0       	ldi	r25, 0x00	; 0
     ab0:	02 c0       	rjmp	.+4      	; 0xab6 <DIO_setpinvalue+0x26>
     ab2:	88 0f       	add	r24, r24
     ab4:	99 1f       	adc	r25, r25
     ab6:	6a 95       	dec	r22
     ab8:	e2 f7       	brpl	.-8      	; 0xab2 <DIO_setpinvalue+0x22>
     aba:	80 95       	com	r24
     abc:	82 23       	and	r24, r18
     abe:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     ac0:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     ac2:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     ac4:	28 b3       	in	r18, 0x18	; 24
     ac6:	81 e0       	ldi	r24, 0x01	; 1
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	02 c0       	rjmp	.+4      	; 0xad0 <DIO_setpinvalue+0x40>
     acc:	88 0f       	add	r24, r24
     ace:	99 1f       	adc	r25, r25
     ad0:	6a 95       	dec	r22
     ad2:	e2 f7       	brpl	.-8      	; 0xacc <DIO_setpinvalue+0x3c>
     ad4:	80 95       	com	r24
     ad6:	82 23       	and	r24, r18
     ad8:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     ada:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     adc:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     ade:	25 b3       	in	r18, 0x15	; 21
     ae0:	81 e0       	ldi	r24, 0x01	; 1
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	02 c0       	rjmp	.+4      	; 0xaea <DIO_setpinvalue+0x5a>
     ae6:	88 0f       	add	r24, r24
     ae8:	99 1f       	adc	r25, r25
     aea:	6a 95       	dec	r22
     aec:	e2 f7       	brpl	.-8      	; 0xae6 <DIO_setpinvalue+0x56>
     aee:	80 95       	com	r24
     af0:	82 23       	and	r24, r18
     af2:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     af4:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     af6:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     af8:	22 b3       	in	r18, 0x12	; 18
     afa:	81 e0       	ldi	r24, 0x01	; 1
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	02 c0       	rjmp	.+4      	; 0xb04 <DIO_setpinvalue+0x74>
     b00:	88 0f       	add	r24, r24
     b02:	99 1f       	adc	r25, r25
     b04:	6a 95       	dec	r22
     b06:	e2 f7       	brpl	.-8      	; 0xb00 <DIO_setpinvalue+0x70>
     b08:	80 95       	com	r24
     b0a:	82 23       	and	r24, r18
     b0c:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     b0e:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     b10:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
     b12:	81 30       	cpi	r24, 0x01	; 1
     b14:	91 f0       	breq	.+36     	; 0xb3a <DIO_setpinvalue+0xaa>
     b16:	28 f0       	brcs	.+10     	; 0xb22 <DIO_setpinvalue+0x92>
     b18:	82 30       	cpi	r24, 0x02	; 2
     b1a:	d9 f0       	breq	.+54     	; 0xb52 <DIO_setpinvalue+0xc2>
     b1c:	83 30       	cpi	r24, 0x03	; 3
     b1e:	29 f1       	breq	.+74     	; 0xb6a <DIO_setpinvalue+0xda>
     b20:	34 c0       	rjmp	.+104    	; 0xb8a <DIO_setpinvalue+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     b22:	2b b3       	in	r18, 0x1b	; 27
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <DIO_setpinvalue+0x9e>
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	6a 95       	dec	r22
     b30:	e2 f7       	brpl	.-8      	; 0xb2a <DIO_setpinvalue+0x9a>
     b32:	82 2b       	or	r24, r18
     b34:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     b36:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     b38:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     b3a:	28 b3       	in	r18, 0x18	; 24
     b3c:	81 e0       	ldi	r24, 0x01	; 1
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <DIO_setpinvalue+0xb6>
     b42:	88 0f       	add	r24, r24
     b44:	99 1f       	adc	r25, r25
     b46:	6a 95       	dec	r22
     b48:	e2 f7       	brpl	.-8      	; 0xb42 <DIO_setpinvalue+0xb2>
     b4a:	82 2b       	or	r24, r18
     b4c:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     b4e:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     b50:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     b52:	25 b3       	in	r18, 0x15	; 21
     b54:	81 e0       	ldi	r24, 0x01	; 1
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	02 c0       	rjmp	.+4      	; 0xb5e <DIO_setpinvalue+0xce>
     b5a:	88 0f       	add	r24, r24
     b5c:	99 1f       	adc	r25, r25
     b5e:	6a 95       	dec	r22
     b60:	e2 f7       	brpl	.-8      	; 0xb5a <DIO_setpinvalue+0xca>
     b62:	82 2b       	or	r24, r18
     b64:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     b66:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     b68:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     b6a:	22 b3       	in	r18, 0x12	; 18
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	02 c0       	rjmp	.+4      	; 0xb76 <DIO_setpinvalue+0xe6>
     b72:	88 0f       	add	r24, r24
     b74:	99 1f       	adc	r25, r25
     b76:	6a 95       	dec	r22
     b78:	e2 f7       	brpl	.-8      	; 0xb72 <DIO_setpinvalue+0xe2>
     b7a:	82 2b       	or	r24, r18
     b7c:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     b7e:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     b80:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
     b82:	81 e0       	ldi	r24, 0x01	; 1
     b84:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
     b8a:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
     b8c:	08 95       	ret

00000b8e <DIO_readpin>:
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	99 f0       	breq	.+38     	; 0xbb8 <DIO_readpin+0x2a>
     b92:	28 f0       	brcs	.+10     	; 0xb9e <DIO_readpin+0x10>
     b94:	82 30       	cpi	r24, 0x02	; 2
     b96:	e9 f0       	breq	.+58     	; 0xbd2 <DIO_readpin+0x44>
     b98:	83 30       	cpi	r24, 0x03	; 3
     b9a:	41 f1       	breq	.+80     	; 0xbec <DIO_readpin+0x5e>
     b9c:	34 c0       	rjmp	.+104    	; 0xc06 <DIO_readpin+0x78>
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     b9e:	89 b3       	in	r24, 0x19	; 25
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <DIO_readpin+0x1a>
     ba4:	95 95       	asr	r25
     ba6:	87 95       	ror	r24
     ba8:	6a 95       	dec	r22
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <DIO_readpin+0x16>
     bac:	81 70       	andi	r24, 0x01	; 1
     bae:	89 bb       	out	0x19, r24	; 25
     bb0:	fa 01       	movw	r30, r20
     bb2:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     bb4:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     bb6:	08 95       	ret
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     bb8:	86 b3       	in	r24, 0x16	; 22
     bba:	90 e0       	ldi	r25, 0x00	; 0
     bbc:	02 c0       	rjmp	.+4      	; 0xbc2 <DIO_readpin+0x34>
     bbe:	95 95       	asr	r25
     bc0:	87 95       	ror	r24
     bc2:	6a 95       	dec	r22
     bc4:	e2 f7       	brpl	.-8      	; 0xbbe <DIO_readpin+0x30>
     bc6:	81 70       	andi	r24, 0x01	; 1
     bc8:	86 bb       	out	0x16, r24	; 22
     bca:	fa 01       	movw	r30, r20
     bcc:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     bce:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     bd0:	08 95       	ret
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     bd2:	83 b3       	in	r24, 0x13	; 19
     bd4:	90 e0       	ldi	r25, 0x00	; 0
     bd6:	02 c0       	rjmp	.+4      	; 0xbdc <DIO_readpin+0x4e>
     bd8:	95 95       	asr	r25
     bda:	87 95       	ror	r24
     bdc:	6a 95       	dec	r22
     bde:	e2 f7       	brpl	.-8      	; 0xbd8 <DIO_readpin+0x4a>
     be0:	81 70       	andi	r24, 0x01	; 1
     be2:	83 bb       	out	0x13, r24	; 19
     be4:	fa 01       	movw	r30, r20
     be6:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     be8:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     bea:	08 95       	ret
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     bec:	80 b3       	in	r24, 0x10	; 16
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	02 c0       	rjmp	.+4      	; 0xbf6 <DIO_readpin+0x68>
     bf2:	95 95       	asr	r25
     bf4:	87 95       	ror	r24
     bf6:	6a 95       	dec	r22
     bf8:	e2 f7       	brpl	.-8      	; 0xbf2 <DIO_readpin+0x64>
     bfa:	81 70       	andi	r24, 0x01	; 1
     bfc:	80 bb       	out	0x10, r24	; 16
     bfe:	fa 01       	movw	r30, r20
     c00:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     c02:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     c04:	08 95       	ret
		
		default:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
     c06:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
     c08:	08 95       	ret

00000c0a <DIO_togglepin>:
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
     c0a:	81 30       	cpi	r24, 0x01	; 1
     c0c:	91 f0       	breq	.+36     	; 0xc32 <DIO_togglepin+0x28>
     c0e:	28 f0       	brcs	.+10     	; 0xc1a <DIO_togglepin+0x10>
     c10:	82 30       	cpi	r24, 0x02	; 2
     c12:	d9 f0       	breq	.+54     	; 0xc4a <DIO_togglepin+0x40>
     c14:	83 30       	cpi	r24, 0x03	; 3
     c16:	29 f1       	breq	.+74     	; 0xc62 <DIO_togglepin+0x58>
     c18:	30 c0       	rjmp	.+96     	; 0xc7a <DIO_togglepin+0x70>
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
     c1a:	2b b3       	in	r18, 0x1b	; 27
     c1c:	81 e0       	ldi	r24, 0x01	; 1
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	02 c0       	rjmp	.+4      	; 0xc26 <DIO_togglepin+0x1c>
     c22:	88 0f       	add	r24, r24
     c24:	99 1f       	adc	r25, r25
     c26:	6a 95       	dec	r22
     c28:	e2 f7       	brpl	.-8      	; 0xc22 <DIO_togglepin+0x18>
     c2a:	82 27       	eor	r24, r18
     c2c:	8b bb       	out	0x1b, r24	; 27
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     c2e:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
		break;
     c30:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
     c32:	28 b3       	in	r18, 0x18	; 24
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	02 c0       	rjmp	.+4      	; 0xc3e <DIO_togglepin+0x34>
     c3a:	88 0f       	add	r24, r24
     c3c:	99 1f       	adc	r25, r25
     c3e:	6a 95       	dec	r22
     c40:	e2 f7       	brpl	.-8      	; 0xc3a <DIO_togglepin+0x30>
     c42:	82 27       	eor	r24, r18
     c44:	88 bb       	out	0x18, r24	; 24
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     c46:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTA , u8_a_pinid);
		break;
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
		break;
     c48:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
     c4a:	25 b3       	in	r18, 0x15	; 21
     c4c:	81 e0       	ldi	r24, 0x01	; 1
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	02 c0       	rjmp	.+4      	; 0xc56 <DIO_togglepin+0x4c>
     c52:	88 0f       	add	r24, r24
     c54:	99 1f       	adc	r25, r25
     c56:	6a 95       	dec	r22
     c58:	e2 f7       	brpl	.-8      	; 0xc52 <DIO_togglepin+0x48>
     c5a:	82 27       	eor	r24, r18
     c5c:	85 bb       	out	0x15, r24	; 21
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     c5e:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTB , u8_a_pinid);
		break;
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
		break;
     c60:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
     c62:	22 b3       	in	r18, 0x12	; 18
     c64:	81 e0       	ldi	r24, 0x01	; 1
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <DIO_togglepin+0x64>
     c6a:	88 0f       	add	r24, r24
     c6c:	99 1f       	adc	r25, r25
     c6e:	6a 95       	dec	r22
     c70:	e2 f7       	brpl	.-8      	; 0xc6a <DIO_togglepin+0x60>
     c72:	82 27       	eor	r24, r18
     c74:	82 bb       	out	0x12, r24	; 18
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     c76:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTC , u8_a_pinid);
		break;
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
		break;
     c78:	08 95       	ret
		
		default:
		/** DO NOTHING **/
		en_a_Pinreadstate = NOT_VALID_READ ; /** RETURN AN ERROR **/
     c7a:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinreadstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
     c7c:	08 95       	ret

00000c7e <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
     c7e:	83 b7       	in	r24, 0x33	; 51
     c80:	8f 77       	andi	r24, 0x7F	; 127
     c82:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
     c84:	83 b7       	in	r24, 0x33	; 51
     c86:	8f 7b       	andi	r24, 0xBF	; 191
     c88:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
     c8a:	83 b7       	in	r24, 0x33	; 51
     c8c:	87 7f       	andi	r24, 0xF7	; 247
     c8e:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
     c90:	83 b7       	in	r24, 0x33	; 51
     c92:	8f 7e       	andi	r24, 0xEF	; 239
     c94:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
     c96:	83 b7       	in	r24, 0x33	; 51
     c98:	8f 7d       	andi	r24, 0xDF	; 223
     c9a:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	08 95       	ret

00000ca0 <TMR0_start>:
{
	TMR0_start_error en_a_startstatus = VALID_START ; /** VARIABLE TO RETURN THE STATUS OF START **/
	
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024
	
	set_bit(TCCR0 , 0);
     ca0:	83 b7       	in	r24, 0x33	; 51
     ca2:	81 60       	ori	r24, 0x01	; 1
     ca4:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
     ca6:	83 b7       	in	r24, 0x33	; 51
     ca8:	8d 7f       	andi	r24, 0xFD	; 253
     caa:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0 , 2);
     cac:	83 b7       	in	r24, 0x33	; 51
     cae:	84 60       	ori	r24, 0x04	; 4
     cb0:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
     cb2:	80 e0       	ldi	r24, 0x00	; 0
     cb4:	08 95       	ret

00000cb6 <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
     cb6:	83 b7       	in	r24, 0x33	; 51
     cb8:	8e 7f       	andi	r24, 0xFE	; 254
     cba:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
     cbc:	83 b7       	in	r24, 0x33	; 51
     cbe:	8d 7f       	andi	r24, 0xFD	; 253
     cc0:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
     cc2:	83 b7       	in	r24, 0x33	; 51
     cc4:	8b 7f       	andi	r24, 0xFB	; 251
     cc6:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
     cc8:	80 e0       	ldi	r24, 0x00	; 0
     cca:	08 95       	ret

00000ccc <TMR0_delayms>:
	/******************************************************************************************/
	/**               THIS CALCULATIONS CONFIGURED AS F_CPU   16 MHZ                         **/
	/******************************************************************************************/
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024  /** CHECK THE PRESCALLER FROM CONFIG FILE **/
	 
        u32_gs_tmr0nuofovs = (u32_a_delayms / 16.384);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/ 
     ccc:	0e 94 43 07 	call	0xe86	; 0xe86 <__floatunsisf>
     cd0:	2f e6       	ldi	r18, 0x6F	; 111
     cd2:	32 e1       	ldi	r19, 0x12	; 18
     cd4:	43 e8       	ldi	r20, 0x83	; 131
     cd6:	51 e4       	ldi	r21, 0x41	; 65
     cd8:	0e 94 a2 06 	call	0xd44	; 0xd44 <__divsf3>
     cdc:	0e 94 14 07 	call	0xe28	; 0xe28 <__fixunssfsi>
     ce0:	60 93 ec 00 	sts	0x00EC, r22	; 0x8000ec <u32_gs_tmr0nuofovs>
     ce4:	70 93 ed 00 	sts	0x00ED, r23	; 0x8000ed <u32_gs_tmr0nuofovs+0x1>
     ce8:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <u32_gs_tmr0nuofovs+0x2>
     cec:	90 93 ef 00 	sts	0x00EF, r25	; 0x8000ef <u32_gs_tmr0nuofovs+0x3>
	
        TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
     cf0:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
     cf2:	0e 94 50 06 	call	0xca0	; 0xca0 <TMR0_start>
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
     cf6:	40 e0       	ldi	r20, 0x00	; 0
     cf8:	50 e0       	ldi	r21, 0x00	; 0
     cfa:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
     cfc:	0a c0       	rjmp	.+20     	; 0xd12 <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
     cfe:	08 b6       	in	r0, 0x38	; 56
     d00:	00 fe       	sbrs	r0, 0
     d02:	fd cf       	rjmp	.-6      	; 0xcfe <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
     d04:	88 b7       	in	r24, 0x38	; 56
     d06:	81 60       	ori	r24, 0x01	; 1
     d08:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
     d0a:	4f 5f       	subi	r20, 0xFF	; 255
     d0c:	5f 4f       	sbci	r21, 0xFF	; 255
     d0e:	6f 4f       	sbci	r22, 0xFF	; 255
     d10:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
     d12:	80 91 ec 00 	lds	r24, 0x00EC	; 0x8000ec <u32_gs_tmr0nuofovs>
     d16:	90 91 ed 00 	lds	r25, 0x00ED	; 0x8000ed <u32_gs_tmr0nuofovs+0x1>
     d1a:	a0 91 ee 00 	lds	r26, 0x00EE	; 0x8000ee <u32_gs_tmr0nuofovs+0x2>
     d1e:	b0 91 ef 00 	lds	r27, 0x00EF	; 0x8000ef <u32_gs_tmr0nuofovs+0x3>
     d22:	48 17       	cp	r20, r24
     d24:	59 07       	cpc	r21, r25
     d26:	6a 07       	cpc	r22, r26
     d28:	7b 07       	cpc	r23, r27
     d2a:	48 f3       	brcs	.-46     	; 0xcfe <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
     d2c:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <u32_gs_tmr0nuofovs>
     d30:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <u32_gs_tmr0nuofovs+0x1>
     d34:	10 92 ee 00 	sts	0x00EE, r1	; 0x8000ee <u32_gs_tmr0nuofovs+0x2>
     d38:	10 92 ef 00 	sts	0x00EF, r1	; 0x8000ef <u32_gs_tmr0nuofovs+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
     d3c:	0e 94 5b 06 	call	0xcb6	; 0xcb6 <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	08 95       	ret

00000d44 <__divsf3>:
     d44:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__divsf3x>
     d48:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__fp_round>
     d4c:	0e 94 90 07 	call	0xf20	; 0xf20 <__fp_pscB>
     d50:	58 f0       	brcs	.+22     	; 0xd68 <__divsf3+0x24>
     d52:	0e 94 89 07 	call	0xf12	; 0xf12 <__fp_pscA>
     d56:	40 f0       	brcs	.+16     	; 0xd68 <__divsf3+0x24>
     d58:	29 f4       	brne	.+10     	; 0xd64 <__divsf3+0x20>
     d5a:	5f 3f       	cpi	r21, 0xFF	; 255
     d5c:	29 f0       	breq	.+10     	; 0xd68 <__divsf3+0x24>
     d5e:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_inf>
     d62:	51 11       	cpse	r21, r1
     d64:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__fp_szero>
     d68:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__fp_nan>

00000d6c <__divsf3x>:
     d6c:	0e 94 a8 07 	call	0xf50	; 0xf50 <__fp_split3>
     d70:	68 f3       	brcs	.-38     	; 0xd4c <__divsf3+0x8>

00000d72 <__divsf3_pse>:
     d72:	99 23       	and	r25, r25
     d74:	b1 f3       	breq	.-20     	; 0xd62 <__divsf3+0x1e>
     d76:	55 23       	and	r21, r21
     d78:	91 f3       	breq	.-28     	; 0xd5e <__divsf3+0x1a>
     d7a:	95 1b       	sub	r25, r21
     d7c:	55 0b       	sbc	r21, r21
     d7e:	bb 27       	eor	r27, r27
     d80:	aa 27       	eor	r26, r26
     d82:	62 17       	cp	r22, r18
     d84:	73 07       	cpc	r23, r19
     d86:	84 07       	cpc	r24, r20
     d88:	38 f0       	brcs	.+14     	; 0xd98 <__divsf3_pse+0x26>
     d8a:	9f 5f       	subi	r25, 0xFF	; 255
     d8c:	5f 4f       	sbci	r21, 0xFF	; 255
     d8e:	22 0f       	add	r18, r18
     d90:	33 1f       	adc	r19, r19
     d92:	44 1f       	adc	r20, r20
     d94:	aa 1f       	adc	r26, r26
     d96:	a9 f3       	breq	.-22     	; 0xd82 <__divsf3_pse+0x10>
     d98:	35 d0       	rcall	.+106    	; 0xe04 <__divsf3_pse+0x92>
     d9a:	0e 2e       	mov	r0, r30
     d9c:	3a f0       	brmi	.+14     	; 0xdac <__divsf3_pse+0x3a>
     d9e:	e0 e8       	ldi	r30, 0x80	; 128
     da0:	32 d0       	rcall	.+100    	; 0xe06 <__divsf3_pse+0x94>
     da2:	91 50       	subi	r25, 0x01	; 1
     da4:	50 40       	sbci	r21, 0x00	; 0
     da6:	e6 95       	lsr	r30
     da8:	00 1c       	adc	r0, r0
     daa:	ca f7       	brpl	.-14     	; 0xd9e <__divsf3_pse+0x2c>
     dac:	2b d0       	rcall	.+86     	; 0xe04 <__divsf3_pse+0x92>
     dae:	fe 2f       	mov	r31, r30
     db0:	29 d0       	rcall	.+82     	; 0xe04 <__divsf3_pse+0x92>
     db2:	66 0f       	add	r22, r22
     db4:	77 1f       	adc	r23, r23
     db6:	88 1f       	adc	r24, r24
     db8:	bb 1f       	adc	r27, r27
     dba:	26 17       	cp	r18, r22
     dbc:	37 07       	cpc	r19, r23
     dbe:	48 07       	cpc	r20, r24
     dc0:	ab 07       	cpc	r26, r27
     dc2:	b0 e8       	ldi	r27, 0x80	; 128
     dc4:	09 f0       	breq	.+2      	; 0xdc8 <__divsf3_pse+0x56>
     dc6:	bb 0b       	sbc	r27, r27
     dc8:	80 2d       	mov	r24, r0
     dca:	bf 01       	movw	r22, r30
     dcc:	ff 27       	eor	r31, r31
     dce:	93 58       	subi	r25, 0x83	; 131
     dd0:	5f 4f       	sbci	r21, 0xFF	; 255
     dd2:	3a f0       	brmi	.+14     	; 0xde2 <__divsf3_pse+0x70>
     dd4:	9e 3f       	cpi	r25, 0xFE	; 254
     dd6:	51 05       	cpc	r21, r1
     dd8:	78 f0       	brcs	.+30     	; 0xdf8 <__divsf3_pse+0x86>
     dda:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_inf>
     dde:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__fp_szero>
     de2:	5f 3f       	cpi	r21, 0xFF	; 255
     de4:	e4 f3       	brlt	.-8      	; 0xdde <__divsf3_pse+0x6c>
     de6:	98 3e       	cpi	r25, 0xE8	; 232
     de8:	d4 f3       	brlt	.-12     	; 0xdde <__divsf3_pse+0x6c>
     dea:	86 95       	lsr	r24
     dec:	77 95       	ror	r23
     dee:	67 95       	ror	r22
     df0:	b7 95       	ror	r27
     df2:	f7 95       	ror	r31
     df4:	9f 5f       	subi	r25, 0xFF	; 255
     df6:	c9 f7       	brne	.-14     	; 0xdea <__divsf3_pse+0x78>
     df8:	88 0f       	add	r24, r24
     dfa:	91 1d       	adc	r25, r1
     dfc:	96 95       	lsr	r25
     dfe:	87 95       	ror	r24
     e00:	97 f9       	bld	r25, 7
     e02:	08 95       	ret
     e04:	e1 e0       	ldi	r30, 0x01	; 1
     e06:	66 0f       	add	r22, r22
     e08:	77 1f       	adc	r23, r23
     e0a:	88 1f       	adc	r24, r24
     e0c:	bb 1f       	adc	r27, r27
     e0e:	62 17       	cp	r22, r18
     e10:	73 07       	cpc	r23, r19
     e12:	84 07       	cpc	r24, r20
     e14:	ba 07       	cpc	r27, r26
     e16:	20 f0       	brcs	.+8      	; 0xe20 <__divsf3_pse+0xae>
     e18:	62 1b       	sub	r22, r18
     e1a:	73 0b       	sbc	r23, r19
     e1c:	84 0b       	sbc	r24, r20
     e1e:	ba 0b       	sbc	r27, r26
     e20:	ee 1f       	adc	r30, r30
     e22:	88 f7       	brcc	.-30     	; 0xe06 <__divsf3_pse+0x94>
     e24:	e0 95       	com	r30
     e26:	08 95       	ret

00000e28 <__fixunssfsi>:
     e28:	0e 94 b0 07 	call	0xf60	; 0xf60 <__fp_splitA>
     e2c:	88 f0       	brcs	.+34     	; 0xe50 <__fixunssfsi+0x28>
     e2e:	9f 57       	subi	r25, 0x7F	; 127
     e30:	98 f0       	brcs	.+38     	; 0xe58 <__fixunssfsi+0x30>
     e32:	b9 2f       	mov	r27, r25
     e34:	99 27       	eor	r25, r25
     e36:	b7 51       	subi	r27, 0x17	; 23
     e38:	b0 f0       	brcs	.+44     	; 0xe66 <__fixunssfsi+0x3e>
     e3a:	e1 f0       	breq	.+56     	; 0xe74 <__fixunssfsi+0x4c>
     e3c:	66 0f       	add	r22, r22
     e3e:	77 1f       	adc	r23, r23
     e40:	88 1f       	adc	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	1a f0       	brmi	.+6      	; 0xe4c <__fixunssfsi+0x24>
     e46:	ba 95       	dec	r27
     e48:	c9 f7       	brne	.-14     	; 0xe3c <__fixunssfsi+0x14>
     e4a:	14 c0       	rjmp	.+40     	; 0xe74 <__fixunssfsi+0x4c>
     e4c:	b1 30       	cpi	r27, 0x01	; 1
     e4e:	91 f0       	breq	.+36     	; 0xe74 <__fixunssfsi+0x4c>
     e50:	0e 94 ca 07 	call	0xf94	; 0xf94 <__fp_zero>
     e54:	b1 e0       	ldi	r27, 0x01	; 1
     e56:	08 95       	ret
     e58:	0c 94 ca 07 	jmp	0xf94	; 0xf94 <__fp_zero>
     e5c:	67 2f       	mov	r22, r23
     e5e:	78 2f       	mov	r23, r24
     e60:	88 27       	eor	r24, r24
     e62:	b8 5f       	subi	r27, 0xF8	; 248
     e64:	39 f0       	breq	.+14     	; 0xe74 <__fixunssfsi+0x4c>
     e66:	b9 3f       	cpi	r27, 0xF9	; 249
     e68:	cc f3       	brlt	.-14     	; 0xe5c <__fixunssfsi+0x34>
     e6a:	86 95       	lsr	r24
     e6c:	77 95       	ror	r23
     e6e:	67 95       	ror	r22
     e70:	b3 95       	inc	r27
     e72:	d9 f7       	brne	.-10     	; 0xe6a <__fixunssfsi+0x42>
     e74:	3e f4       	brtc	.+14     	; 0xe84 <__fixunssfsi+0x5c>
     e76:	90 95       	com	r25
     e78:	80 95       	com	r24
     e7a:	70 95       	com	r23
     e7c:	61 95       	neg	r22
     e7e:	7f 4f       	sbci	r23, 0xFF	; 255
     e80:	8f 4f       	sbci	r24, 0xFF	; 255
     e82:	9f 4f       	sbci	r25, 0xFF	; 255
     e84:	08 95       	ret

00000e86 <__floatunsisf>:
     e86:	e8 94       	clt
     e88:	09 c0       	rjmp	.+18     	; 0xe9c <__floatsisf+0x12>

00000e8a <__floatsisf>:
     e8a:	97 fb       	bst	r25, 7
     e8c:	3e f4       	brtc	.+14     	; 0xe9c <__floatsisf+0x12>
     e8e:	90 95       	com	r25
     e90:	80 95       	com	r24
     e92:	70 95       	com	r23
     e94:	61 95       	neg	r22
     e96:	7f 4f       	sbci	r23, 0xFF	; 255
     e98:	8f 4f       	sbci	r24, 0xFF	; 255
     e9a:	9f 4f       	sbci	r25, 0xFF	; 255
     e9c:	99 23       	and	r25, r25
     e9e:	a9 f0       	breq	.+42     	; 0xeca <__floatsisf+0x40>
     ea0:	f9 2f       	mov	r31, r25
     ea2:	96 e9       	ldi	r25, 0x96	; 150
     ea4:	bb 27       	eor	r27, r27
     ea6:	93 95       	inc	r25
     ea8:	f6 95       	lsr	r31
     eaa:	87 95       	ror	r24
     eac:	77 95       	ror	r23
     eae:	67 95       	ror	r22
     eb0:	b7 95       	ror	r27
     eb2:	f1 11       	cpse	r31, r1
     eb4:	f8 cf       	rjmp	.-16     	; 0xea6 <__floatsisf+0x1c>
     eb6:	fa f4       	brpl	.+62     	; 0xef6 <__floatsisf+0x6c>
     eb8:	bb 0f       	add	r27, r27
     eba:	11 f4       	brne	.+4      	; 0xec0 <__floatsisf+0x36>
     ebc:	60 ff       	sbrs	r22, 0
     ebe:	1b c0       	rjmp	.+54     	; 0xef6 <__floatsisf+0x6c>
     ec0:	6f 5f       	subi	r22, 0xFF	; 255
     ec2:	7f 4f       	sbci	r23, 0xFF	; 255
     ec4:	8f 4f       	sbci	r24, 0xFF	; 255
     ec6:	9f 4f       	sbci	r25, 0xFF	; 255
     ec8:	16 c0       	rjmp	.+44     	; 0xef6 <__floatsisf+0x6c>
     eca:	88 23       	and	r24, r24
     ecc:	11 f0       	breq	.+4      	; 0xed2 <__floatsisf+0x48>
     ece:	96 e9       	ldi	r25, 0x96	; 150
     ed0:	11 c0       	rjmp	.+34     	; 0xef4 <__floatsisf+0x6a>
     ed2:	77 23       	and	r23, r23
     ed4:	21 f0       	breq	.+8      	; 0xede <__floatsisf+0x54>
     ed6:	9e e8       	ldi	r25, 0x8E	; 142
     ed8:	87 2f       	mov	r24, r23
     eda:	76 2f       	mov	r23, r22
     edc:	05 c0       	rjmp	.+10     	; 0xee8 <__floatsisf+0x5e>
     ede:	66 23       	and	r22, r22
     ee0:	71 f0       	breq	.+28     	; 0xefe <__floatsisf+0x74>
     ee2:	96 e8       	ldi	r25, 0x86	; 134
     ee4:	86 2f       	mov	r24, r22
     ee6:	70 e0       	ldi	r23, 0x00	; 0
     ee8:	60 e0       	ldi	r22, 0x00	; 0
     eea:	2a f0       	brmi	.+10     	; 0xef6 <__floatsisf+0x6c>
     eec:	9a 95       	dec	r25
     eee:	66 0f       	add	r22, r22
     ef0:	77 1f       	adc	r23, r23
     ef2:	88 1f       	adc	r24, r24
     ef4:	da f7       	brpl	.-10     	; 0xeec <__floatsisf+0x62>
     ef6:	88 0f       	add	r24, r24
     ef8:	96 95       	lsr	r25
     efa:	87 95       	ror	r24
     efc:	97 f9       	bld	r25, 7
     efe:	08 95       	ret

00000f00 <__fp_inf>:
     f00:	97 f9       	bld	r25, 7
     f02:	9f 67       	ori	r25, 0x7F	; 127
     f04:	80 e8       	ldi	r24, 0x80	; 128
     f06:	70 e0       	ldi	r23, 0x00	; 0
     f08:	60 e0       	ldi	r22, 0x00	; 0
     f0a:	08 95       	ret

00000f0c <__fp_nan>:
     f0c:	9f ef       	ldi	r25, 0xFF	; 255
     f0e:	80 ec       	ldi	r24, 0xC0	; 192
     f10:	08 95       	ret

00000f12 <__fp_pscA>:
     f12:	00 24       	eor	r0, r0
     f14:	0a 94       	dec	r0
     f16:	16 16       	cp	r1, r22
     f18:	17 06       	cpc	r1, r23
     f1a:	18 06       	cpc	r1, r24
     f1c:	09 06       	cpc	r0, r25
     f1e:	08 95       	ret

00000f20 <__fp_pscB>:
     f20:	00 24       	eor	r0, r0
     f22:	0a 94       	dec	r0
     f24:	12 16       	cp	r1, r18
     f26:	13 06       	cpc	r1, r19
     f28:	14 06       	cpc	r1, r20
     f2a:	05 06       	cpc	r0, r21
     f2c:	08 95       	ret

00000f2e <__fp_round>:
     f2e:	09 2e       	mov	r0, r25
     f30:	03 94       	inc	r0
     f32:	00 0c       	add	r0, r0
     f34:	11 f4       	brne	.+4      	; 0xf3a <__fp_round+0xc>
     f36:	88 23       	and	r24, r24
     f38:	52 f0       	brmi	.+20     	; 0xf4e <__fp_round+0x20>
     f3a:	bb 0f       	add	r27, r27
     f3c:	40 f4       	brcc	.+16     	; 0xf4e <__fp_round+0x20>
     f3e:	bf 2b       	or	r27, r31
     f40:	11 f4       	brne	.+4      	; 0xf46 <__fp_round+0x18>
     f42:	60 ff       	sbrs	r22, 0
     f44:	04 c0       	rjmp	.+8      	; 0xf4e <__fp_round+0x20>
     f46:	6f 5f       	subi	r22, 0xFF	; 255
     f48:	7f 4f       	sbci	r23, 0xFF	; 255
     f4a:	8f 4f       	sbci	r24, 0xFF	; 255
     f4c:	9f 4f       	sbci	r25, 0xFF	; 255
     f4e:	08 95       	ret

00000f50 <__fp_split3>:
     f50:	57 fd       	sbrc	r21, 7
     f52:	90 58       	subi	r25, 0x80	; 128
     f54:	44 0f       	add	r20, r20
     f56:	55 1f       	adc	r21, r21
     f58:	59 f0       	breq	.+22     	; 0xf70 <__fp_splitA+0x10>
     f5a:	5f 3f       	cpi	r21, 0xFF	; 255
     f5c:	71 f0       	breq	.+28     	; 0xf7a <__fp_splitA+0x1a>
     f5e:	47 95       	ror	r20

00000f60 <__fp_splitA>:
     f60:	88 0f       	add	r24, r24
     f62:	97 fb       	bst	r25, 7
     f64:	99 1f       	adc	r25, r25
     f66:	61 f0       	breq	.+24     	; 0xf80 <__fp_splitA+0x20>
     f68:	9f 3f       	cpi	r25, 0xFF	; 255
     f6a:	79 f0       	breq	.+30     	; 0xf8a <__fp_splitA+0x2a>
     f6c:	87 95       	ror	r24
     f6e:	08 95       	ret
     f70:	12 16       	cp	r1, r18
     f72:	13 06       	cpc	r1, r19
     f74:	14 06       	cpc	r1, r20
     f76:	55 1f       	adc	r21, r21
     f78:	f2 cf       	rjmp	.-28     	; 0xf5e <__fp_split3+0xe>
     f7a:	46 95       	lsr	r20
     f7c:	f1 df       	rcall	.-30     	; 0xf60 <__fp_splitA>
     f7e:	08 c0       	rjmp	.+16     	; 0xf90 <__fp_splitA+0x30>
     f80:	16 16       	cp	r1, r22
     f82:	17 06       	cpc	r1, r23
     f84:	18 06       	cpc	r1, r24
     f86:	99 1f       	adc	r25, r25
     f88:	f1 cf       	rjmp	.-30     	; 0xf6c <__fp_splitA+0xc>
     f8a:	86 95       	lsr	r24
     f8c:	71 05       	cpc	r23, r1
     f8e:	61 05       	cpc	r22, r1
     f90:	08 94       	sec
     f92:	08 95       	ret

00000f94 <__fp_zero>:
     f94:	e8 94       	clt

00000f96 <__fp_szero>:
     f96:	bb 27       	eor	r27, r27
     f98:	66 27       	eor	r22, r22
     f9a:	77 27       	eor	r23, r23
     f9c:	cb 01       	movw	r24, r22
     f9e:	97 f9       	bld	r25, 7
     fa0:	08 95       	ret

00000fa2 <__mulsf3>:
     fa2:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <__mulsf3x>
     fa6:	0c 94 97 07 	jmp	0xf2e	; 0xf2e <__fp_round>
     faa:	0e 94 89 07 	call	0xf12	; 0xf12 <__fp_pscA>
     fae:	38 f0       	brcs	.+14     	; 0xfbe <__mulsf3+0x1c>
     fb0:	0e 94 90 07 	call	0xf20	; 0xf20 <__fp_pscB>
     fb4:	20 f0       	brcs	.+8      	; 0xfbe <__mulsf3+0x1c>
     fb6:	95 23       	and	r25, r21
     fb8:	11 f0       	breq	.+4      	; 0xfbe <__mulsf3+0x1c>
     fba:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_inf>
     fbe:	0c 94 86 07 	jmp	0xf0c	; 0xf0c <__fp_nan>
     fc2:	11 24       	eor	r1, r1
     fc4:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__fp_szero>

00000fc8 <__mulsf3x>:
     fc8:	0e 94 a8 07 	call	0xf50	; 0xf50 <__fp_split3>
     fcc:	70 f3       	brcs	.-36     	; 0xfaa <__mulsf3+0x8>

00000fce <__mulsf3_pse>:
     fce:	95 9f       	mul	r25, r21
     fd0:	c1 f3       	breq	.-16     	; 0xfc2 <__mulsf3+0x20>
     fd2:	95 0f       	add	r25, r21
     fd4:	50 e0       	ldi	r21, 0x00	; 0
     fd6:	55 1f       	adc	r21, r21
     fd8:	62 9f       	mul	r22, r18
     fda:	f0 01       	movw	r30, r0
     fdc:	72 9f       	mul	r23, r18
     fde:	bb 27       	eor	r27, r27
     fe0:	f0 0d       	add	r31, r0
     fe2:	b1 1d       	adc	r27, r1
     fe4:	63 9f       	mul	r22, r19
     fe6:	aa 27       	eor	r26, r26
     fe8:	f0 0d       	add	r31, r0
     fea:	b1 1d       	adc	r27, r1
     fec:	aa 1f       	adc	r26, r26
     fee:	64 9f       	mul	r22, r20
     ff0:	66 27       	eor	r22, r22
     ff2:	b0 0d       	add	r27, r0
     ff4:	a1 1d       	adc	r26, r1
     ff6:	66 1f       	adc	r22, r22
     ff8:	82 9f       	mul	r24, r18
     ffa:	22 27       	eor	r18, r18
     ffc:	b0 0d       	add	r27, r0
     ffe:	a1 1d       	adc	r26, r1
    1000:	62 1f       	adc	r22, r18
    1002:	73 9f       	mul	r23, r19
    1004:	b0 0d       	add	r27, r0
    1006:	a1 1d       	adc	r26, r1
    1008:	62 1f       	adc	r22, r18
    100a:	83 9f       	mul	r24, r19
    100c:	a0 0d       	add	r26, r0
    100e:	61 1d       	adc	r22, r1
    1010:	22 1f       	adc	r18, r18
    1012:	74 9f       	mul	r23, r20
    1014:	33 27       	eor	r19, r19
    1016:	a0 0d       	add	r26, r0
    1018:	61 1d       	adc	r22, r1
    101a:	23 1f       	adc	r18, r19
    101c:	84 9f       	mul	r24, r20
    101e:	60 0d       	add	r22, r0
    1020:	21 1d       	adc	r18, r1
    1022:	82 2f       	mov	r24, r18
    1024:	76 2f       	mov	r23, r22
    1026:	6a 2f       	mov	r22, r26
    1028:	11 24       	eor	r1, r1
    102a:	9f 57       	subi	r25, 0x7F	; 127
    102c:	50 40       	sbci	r21, 0x00	; 0
    102e:	9a f0       	brmi	.+38     	; 0x1056 <__mulsf3_pse+0x88>
    1030:	f1 f0       	breq	.+60     	; 0x106e <__mulsf3_pse+0xa0>
    1032:	88 23       	and	r24, r24
    1034:	4a f0       	brmi	.+18     	; 0x1048 <__mulsf3_pse+0x7a>
    1036:	ee 0f       	add	r30, r30
    1038:	ff 1f       	adc	r31, r31
    103a:	bb 1f       	adc	r27, r27
    103c:	66 1f       	adc	r22, r22
    103e:	77 1f       	adc	r23, r23
    1040:	88 1f       	adc	r24, r24
    1042:	91 50       	subi	r25, 0x01	; 1
    1044:	50 40       	sbci	r21, 0x00	; 0
    1046:	a9 f7       	brne	.-22     	; 0x1032 <__mulsf3_pse+0x64>
    1048:	9e 3f       	cpi	r25, 0xFE	; 254
    104a:	51 05       	cpc	r21, r1
    104c:	80 f0       	brcs	.+32     	; 0x106e <__mulsf3_pse+0xa0>
    104e:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_inf>
    1052:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__fp_szero>
    1056:	5f 3f       	cpi	r21, 0xFF	; 255
    1058:	e4 f3       	brlt	.-8      	; 0x1052 <__mulsf3_pse+0x84>
    105a:	98 3e       	cpi	r25, 0xE8	; 232
    105c:	d4 f3       	brlt	.-12     	; 0x1052 <__mulsf3_pse+0x84>
    105e:	86 95       	lsr	r24
    1060:	77 95       	ror	r23
    1062:	67 95       	ror	r22
    1064:	b7 95       	ror	r27
    1066:	f7 95       	ror	r31
    1068:	e7 95       	ror	r30
    106a:	9f 5f       	subi	r25, 0xFF	; 255
    106c:	c1 f7       	brne	.-16     	; 0x105e <__mulsf3_pse+0x90>
    106e:	fe 2b       	or	r31, r30
    1070:	88 0f       	add	r24, r24
    1072:	91 1d       	adc	r25, r1
    1074:	96 95       	lsr	r25
    1076:	87 95       	ror	r24
    1078:	97 f9       	bld	r25, 7
    107a:	08 95       	ret

0000107c <__divmodsi4>:
    107c:	05 2e       	mov	r0, r21
    107e:	97 fb       	bst	r25, 7
    1080:	1e f4       	brtc	.+6      	; 0x1088 <__divmodsi4+0xc>
    1082:	00 94       	com	r0
    1084:	0e 94 55 08 	call	0x10aa	; 0x10aa <__negsi2>
    1088:	57 fd       	sbrc	r21, 7
    108a:	07 d0       	rcall	.+14     	; 0x109a <__divmodsi4_neg2>
    108c:	0e 94 5d 08 	call	0x10ba	; 0x10ba <__udivmodsi4>
    1090:	07 fc       	sbrc	r0, 7
    1092:	03 d0       	rcall	.+6      	; 0x109a <__divmodsi4_neg2>
    1094:	4e f4       	brtc	.+18     	; 0x10a8 <__divmodsi4_exit>
    1096:	0c 94 55 08 	jmp	0x10aa	; 0x10aa <__negsi2>

0000109a <__divmodsi4_neg2>:
    109a:	50 95       	com	r21
    109c:	40 95       	com	r20
    109e:	30 95       	com	r19
    10a0:	21 95       	neg	r18
    10a2:	3f 4f       	sbci	r19, 0xFF	; 255
    10a4:	4f 4f       	sbci	r20, 0xFF	; 255
    10a6:	5f 4f       	sbci	r21, 0xFF	; 255

000010a8 <__divmodsi4_exit>:
    10a8:	08 95       	ret

000010aa <__negsi2>:
    10aa:	90 95       	com	r25
    10ac:	80 95       	com	r24
    10ae:	70 95       	com	r23
    10b0:	61 95       	neg	r22
    10b2:	7f 4f       	sbci	r23, 0xFF	; 255
    10b4:	8f 4f       	sbci	r24, 0xFF	; 255
    10b6:	9f 4f       	sbci	r25, 0xFF	; 255
    10b8:	08 95       	ret

000010ba <__udivmodsi4>:
    10ba:	a1 e2       	ldi	r26, 0x21	; 33
    10bc:	1a 2e       	mov	r1, r26
    10be:	aa 1b       	sub	r26, r26
    10c0:	bb 1b       	sub	r27, r27
    10c2:	fd 01       	movw	r30, r26
    10c4:	0d c0       	rjmp	.+26     	; 0x10e0 <__udivmodsi4_ep>

000010c6 <__udivmodsi4_loop>:
    10c6:	aa 1f       	adc	r26, r26
    10c8:	bb 1f       	adc	r27, r27
    10ca:	ee 1f       	adc	r30, r30
    10cc:	ff 1f       	adc	r31, r31
    10ce:	a2 17       	cp	r26, r18
    10d0:	b3 07       	cpc	r27, r19
    10d2:	e4 07       	cpc	r30, r20
    10d4:	f5 07       	cpc	r31, r21
    10d6:	20 f0       	brcs	.+8      	; 0x10e0 <__udivmodsi4_ep>
    10d8:	a2 1b       	sub	r26, r18
    10da:	b3 0b       	sbc	r27, r19
    10dc:	e4 0b       	sbc	r30, r20
    10de:	f5 0b       	sbc	r31, r21

000010e0 <__udivmodsi4_ep>:
    10e0:	66 1f       	adc	r22, r22
    10e2:	77 1f       	adc	r23, r23
    10e4:	88 1f       	adc	r24, r24
    10e6:	99 1f       	adc	r25, r25
    10e8:	1a 94       	dec	r1
    10ea:	69 f7       	brne	.-38     	; 0x10c6 <__udivmodsi4_loop>
    10ec:	60 95       	com	r22
    10ee:	70 95       	com	r23
    10f0:	80 95       	com	r24
    10f2:	90 95       	com	r25
    10f4:	9b 01       	movw	r18, r22
    10f6:	ac 01       	movw	r20, r24
    10f8:	bd 01       	movw	r22, r26
    10fa:	cf 01       	movw	r24, r30
    10fc:	08 95       	ret

000010fe <_exit>:
    10fe:	f8 94       	cli

00001100 <__stop_program>:
    1100:	ff cf       	rjmp	.-2      	; 0x1100 <__stop_program>

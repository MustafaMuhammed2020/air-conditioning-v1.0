
air conditioning.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000066e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000066e  00000702  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800088  00800088  0000072a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000072a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000075c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001228  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000007b0  00000000  00000000  00001a98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000831  00000000  00000000  00002248  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00002a7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006d0  00000000  00000000  00002c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000040f  00000000  00000000  000032ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  000036fb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e6       	ldi	r30, 0x6E	; 110
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e8       	ldi	r26, 0x88	; 136
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 38       	cpi	r26, 0x8C	; 140
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 dd 00 	call	0x1ba	; 0x1ba <main>
  8a:	0c 94 35 03 	jmp	0x66a	; 0x66a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_8_bit_sendCommand>:
    #elif LCD_Bit_Mode == 8
    LCD_8_bit_sendCommand(u8_a_command);
    #endif
    
    return cmnd_send_OK;
}
  92:	85 bb       	out	0x15, r24	; 21
  94:	8b b3       	in	r24, 0x1b	; 27
  96:	8b 7f       	andi	r24, 0xFB	; 251
  98:	8b bb       	out	0x1b, r24	; 27
  9a:	8b b3       	in	r24, 0x1b	; 27
  9c:	8d 7f       	andi	r24, 0xFD	; 253
  9e:	8b bb       	out	0x1b, r24	; 27
  a0:	8b b3       	in	r24, 0x1b	; 27
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	8b bb       	out	0x1b, r24	; 27
  a6:	61 e0       	ldi	r22, 0x01	; 1
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	80 e0       	ldi	r24, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <TMR0_delaymicros>
  b2:	8b b3       	in	r24, 0x1b	; 27
  b4:	8e 7f       	andi	r24, 0xFE	; 254
  b6:	8b bb       	out	0x1b, r24	; 27
  b8:	63 e0       	ldi	r22, 0x03	; 3
  ba:	70 e0       	ldi	r23, 0x00	; 0
  bc:	80 e0       	ldi	r24, 0x00	; 0
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <TMR0_delaymicros>
  c4:	80 e0       	ldi	r24, 0x00	; 0
  c6:	08 95       	ret

000000c8 <LCD_8_bit_init>:
  c8:	8a b3       	in	r24, 0x1a	; 26
  ca:	84 60       	ori	r24, 0x04	; 4
  cc:	8a bb       	out	0x1a, r24	; 26
  ce:	8a b3       	in	r24, 0x1a	; 26
  d0:	82 60       	ori	r24, 0x02	; 2
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	8a b3       	in	r24, 0x1a	; 26
  d6:	81 60       	ori	r24, 0x01	; 1
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	84 b3       	in	r24, 0x14	; 20
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	84 bb       	out	0x14, r24	; 20
  e0:	64 e1       	ldi	r22, 0x14	; 20
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	90 e0       	ldi	r25, 0x00	; 0
  e8:	0e 94 9c 01 	call	0x338	; 0x338 <TMR0_delayms>
  ec:	88 e3       	ldi	r24, 0x38	; 56
  ee:	0e 94 49 00 	call	0x92	; 0x92 <LCD_8_bit_sendCommand>
  f2:	8c e0       	ldi	r24, 0x0C	; 12
  f4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_8_bit_sendCommand>
  f8:	86 e0       	ldi	r24, 0x06	; 6
  fa:	0e 94 49 00 	call	0x92	; 0x92 <LCD_8_bit_sendCommand>
  fe:	81 e0       	ldi	r24, 0x01	; 1
 100:	0e 94 49 00 	call	0x92	; 0x92 <LCD_8_bit_sendCommand>
 104:	80 e8       	ldi	r24, 0x80	; 128
 106:	0e 94 49 00 	call	0x92	; 0x92 <LCD_8_bit_sendCommand>
 10a:	80 e0       	ldi	r24, 0x00	; 0
 10c:	08 95       	ret

0000010e <LCD_8_bit_sendChar>:
 10e:	85 bb       	out	0x15, r24	; 21
 110:	8b b3       	in	r24, 0x1b	; 27
 112:	84 60       	ori	r24, 0x04	; 4
 114:	8b bb       	out	0x1b, r24	; 27
 116:	8b b3       	in	r24, 0x1b	; 27
 118:	8d 7f       	andi	r24, 0xFD	; 253
 11a:	8b bb       	out	0x1b, r24	; 27
 11c:	8b b3       	in	r24, 0x1b	; 27
 11e:	81 60       	ori	r24, 0x01	; 1
 120:	8b bb       	out	0x1b, r24	; 27
 122:	61 e0       	ldi	r22, 0x01	; 1
 124:	70 e0       	ldi	r23, 0x00	; 0
 126:	80 e0       	ldi	r24, 0x00	; 0
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <TMR0_delaymicros>
 12e:	8b b3       	in	r24, 0x1b	; 27
 130:	8e 7f       	andi	r24, 0xFE	; 254
 132:	8b bb       	out	0x1b, r24	; 27
 134:	63 e0       	ldi	r22, 0x03	; 3
 136:	70 e0       	ldi	r23, 0x00	; 0
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <TMR0_delaymicros>
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	08 95       	ret

00000144 <LCD_goTo>:
 144:	cf 93       	push	r28
 146:	df 93       	push	r29
 148:	00 d0       	rcall	.+0      	; 0x14a <LCD_goTo+0x6>
 14a:	cd b7       	in	r28, 0x3d	; 61
 14c:	de b7       	in	r29, 0x3e	; 62
 14e:	90 e8       	ldi	r25, 0x80	; 128
 150:	99 83       	std	Y+1, r25	; 0x01
 152:	90 ec       	ldi	r25, 0xC0	; 192
 154:	9a 83       	std	Y+2, r25	; 0x02
 156:	e1 e0       	ldi	r30, 0x01	; 1
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	ec 0f       	add	r30, r28
 15c:	fd 1f       	adc	r31, r29
 15e:	e8 0f       	add	r30, r24
 160:	f1 1d       	adc	r31, r1
 162:	80 81       	ld	r24, Z
 164:	86 0f       	add	r24, r22
 166:	0e 94 49 00 	call	0x92	; 0x92 <LCD_8_bit_sendCommand>
 16a:	0f 90       	pop	r0
 16c:	0f 90       	pop	r0
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <LCD_createCustomCharacter>:
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	8c 01       	movw	r16, r24
 17c:	86 2f       	mov	r24, r22
 17e:	90 e0       	ldi	r25, 0x00	; 0
 180:	08 96       	adiw	r24, 0x08	; 8
 182:	88 0f       	add	r24, r24
 184:	88 0f       	add	r24, r24
 186:	88 0f       	add	r24, r24
 188:	0e 94 49 00 	call	0x92	; 0x92 <LCD_8_bit_sendCommand>
 18c:	c0 e0       	ldi	r28, 0x00	; 0
 18e:	07 c0       	rjmp	.+14     	; 0x19e <LCD_createCustomCharacter+0x2a>
 190:	f8 01       	movw	r30, r16
 192:	ec 0f       	add	r30, r28
 194:	f1 1d       	adc	r31, r1
 196:	80 81       	ld	r24, Z
 198:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_8_bit_sendChar>
 19c:	cf 5f       	subi	r28, 0xFF	; 255
 19e:	c8 30       	cpi	r28, 0x08	; 8
 1a0:	b8 f3       	brcs	.-18     	; 0x190 <LCD_createCustomCharacter+0x1c>
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	08 95       	ret

000001aa <LCD_init>:
 1aa:	0e 94 64 00 	call	0xc8	; 0xc8 <LCD_8_bit_init>
 1ae:	80 e0       	ldi	r24, 0x00	; 0
 1b0:	08 95       	ret

000001b2 <LCD_sendChar>:
LCD_sendChar_error LCD_sendChar(uint8_t u8_a_char)
{
    #if LCD_Bit_Mode == 4
    LCD_4_bit_sendChar(u8_a_char);
    #elif LCD_Bit_Mode == 8
    LCD_8_bit_sendChar(u8_a_char);
 1b2:	0e 94 87 00 	call	0x10e	; 0x10e <LCD_8_bit_sendChar>
    #endif
    
    return char_send_OK;
 1b6:	80 e0       	ldi	r24, 0x00	; 0
 1b8:	08 95       	ret

000001ba <main>:
uint8_t u8_g_bell_topLeft[8] = { 0x04, 0x0E, 0x0E, 0x0E, 0x1F, 0x10, 0x00, 0x08};
int main(void)
{
	/* Replace with your application code */
	//uint8_t val[] = "Hi! Omar";
	TMR0_init();
 1ba:	0e 94 6f 01 	call	0x2de	; 0x2de <TMR0_init>
	LCD_init();
 1be:	0e 94 d5 00 	call	0x1aa	; 0x1aa <LCD_init>
	TMR0_delayms(100);
 1c2:	64 e6       	ldi	r22, 0x64	; 100
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	90 e0       	ldi	r25, 0x00	; 0
 1ca:	0e 94 9c 01 	call	0x338	; 0x338 <TMR0_delayms>
	LCD_createCustomCharacter(u8_g_bell_Center,0);
 1ce:	60 e0       	ldi	r22, 0x00	; 0
 1d0:	80 e8       	ldi	r24, 0x80	; 128
 1d2:	90 e0       	ldi	r25, 0x00	; 0
 1d4:	0e 94 ba 00 	call	0x174	; 0x174 <LCD_createCustomCharacter>
	LCD_createCustomCharacter(u8_g_bell_midRight,1);
 1d8:	61 e0       	ldi	r22, 0x01	; 1
 1da:	88 e7       	ldi	r24, 0x78	; 120
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	0e 94 ba 00 	call	0x174	; 0x174 <LCD_createCustomCharacter>
	LCD_createCustomCharacter(u8_g_bell_topRight,2);
 1e2:	62 e0       	ldi	r22, 0x02	; 2
 1e4:	80 e7       	ldi	r24, 0x70	; 112
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	0e 94 ba 00 	call	0x174	; 0x174 <LCD_createCustomCharacter>
	LCD_createCustomCharacter(u8_g_bell_midLeft,3);
 1ec:	63 e0       	ldi	r22, 0x03	; 3
 1ee:	88 e6       	ldi	r24, 0x68	; 104
 1f0:	90 e0       	ldi	r25, 0x00	; 0
 1f2:	0e 94 ba 00 	call	0x174	; 0x174 <LCD_createCustomCharacter>
	LCD_createCustomCharacter(u8_g_bell_topLeft,4);
 1f6:	64 e0       	ldi	r22, 0x04	; 4
 1f8:	80 e6       	ldi	r24, 0x60	; 96
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 ba 00 	call	0x174	; 0x174 <LCD_createCustomCharacter>
	TMR0_delayms(100);
 200:	64 e6       	ldi	r22, 0x64	; 100
 202:	70 e0       	ldi	r23, 0x00	; 0
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 9c 01 	call	0x338	; 0x338 <TMR0_delayms>
	//LCD_sendCommand(Clear_Screen);
	
	while(1)
	{
		LCD_goTo(0,8);
 20c:	68 e0       	ldi	r22, 0x08	; 8
 20e:	80 e0       	ldi	r24, 0x00	; 0
 210:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_goTo>
		LCD_sendChar(0);
 214:	80 e0       	ldi	r24, 0x00	; 0
 216:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_sendChar>
		TMR0_delayms(50);
 21a:	62 e3       	ldi	r22, 0x32	; 50
 21c:	70 e0       	ldi	r23, 0x00	; 0
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	0e 94 9c 01 	call	0x338	; 0x338 <TMR0_delayms>
		LCD_goTo(0,8);
 226:	68 e0       	ldi	r22, 0x08	; 8
 228:	80 e0       	ldi	r24, 0x00	; 0
 22a:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_goTo>
		LCD_sendChar(1);
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_sendChar>
		TMR0_delayms(50);
 234:	62 e3       	ldi	r22, 0x32	; 50
 236:	70 e0       	ldi	r23, 0x00	; 0
 238:	80 e0       	ldi	r24, 0x00	; 0
 23a:	90 e0       	ldi	r25, 0x00	; 0
 23c:	0e 94 9c 01 	call	0x338	; 0x338 <TMR0_delayms>
		LCD_goTo(0,8);
 240:	68 e0       	ldi	r22, 0x08	; 8
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_goTo>
		LCD_sendChar(2);
 248:	82 e0       	ldi	r24, 0x02	; 2
 24a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_sendChar>
		TMR0_delayms(50);
 24e:	62 e3       	ldi	r22, 0x32	; 50
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 9c 01 	call	0x338	; 0x338 <TMR0_delayms>
		LCD_goTo(0,8);
 25a:	68 e0       	ldi	r22, 0x08	; 8
 25c:	80 e0       	ldi	r24, 0x00	; 0
 25e:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_goTo>
		LCD_sendChar(1);
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_sendChar>
		TMR0_delayms(50);
 268:	62 e3       	ldi	r22, 0x32	; 50
 26a:	70 e0       	ldi	r23, 0x00	; 0
 26c:	80 e0       	ldi	r24, 0x00	; 0
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 9c 01 	call	0x338	; 0x338 <TMR0_delayms>
		LCD_goTo(0,8);
 274:	68 e0       	ldi	r22, 0x08	; 8
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_goTo>
		LCD_sendChar(0);
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_sendChar>
		TMR0_delayms(50);
 282:	62 e3       	ldi	r22, 0x32	; 50
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 9c 01 	call	0x338	; 0x338 <TMR0_delayms>
		LCD_goTo(0,8);
 28e:	68 e0       	ldi	r22, 0x08	; 8
 290:	80 e0       	ldi	r24, 0x00	; 0
 292:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_goTo>
		LCD_sendChar(3);
 296:	83 e0       	ldi	r24, 0x03	; 3
 298:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_sendChar>
		TMR0_delayms(50);
 29c:	62 e3       	ldi	r22, 0x32	; 50
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	0e 94 9c 01 	call	0x338	; 0x338 <TMR0_delayms>
		LCD_goTo(0,8);
 2a8:	68 e0       	ldi	r22, 0x08	; 8
 2aa:	80 e0       	ldi	r24, 0x00	; 0
 2ac:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_goTo>
		LCD_sendChar(4);
 2b0:	84 e0       	ldi	r24, 0x04	; 4
 2b2:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_sendChar>
		TMR0_delayms(50);
 2b6:	62 e3       	ldi	r22, 0x32	; 50
 2b8:	70 e0       	ldi	r23, 0x00	; 0
 2ba:	80 e0       	ldi	r24, 0x00	; 0
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	0e 94 9c 01 	call	0x338	; 0x338 <TMR0_delayms>
		LCD_goTo(0,8);
 2c2:	68 e0       	ldi	r22, 0x08	; 8
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	0e 94 a2 00 	call	0x144	; 0x144 <LCD_goTo>
		LCD_sendChar(3);
 2ca:	83 e0       	ldi	r24, 0x03	; 3
 2cc:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <LCD_sendChar>
		TMR0_delayms(50);
 2d0:	62 e3       	ldi	r22, 0x32	; 50
 2d2:	70 e0       	ldi	r23, 0x00	; 0
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	90 e0       	ldi	r25, 0x00	; 0
 2d8:	0e 94 9c 01 	call	0x338	; 0x338 <TMR0_delayms>
 2dc:	97 cf       	rjmp	.-210    	; 0x20c <main+0x52>

000002de <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
 2de:	83 b7       	in	r24, 0x33	; 51
 2e0:	8f 77       	andi	r24, 0x7F	; 127
 2e2:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
 2e4:	83 b7       	in	r24, 0x33	; 51
 2e6:	8f 7b       	andi	r24, 0xBF	; 191
 2e8:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
 2ea:	83 b7       	in	r24, 0x33	; 51
 2ec:	87 7f       	andi	r24, 0xF7	; 247
 2ee:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
 2f0:	83 b7       	in	r24, 0x33	; 51
 2f2:	8f 7e       	andi	r24, 0xEF	; 239
 2f4:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
 2f6:	83 b7       	in	r24, 0x33	; 51
 2f8:	8f 7d       	andi	r24, 0xDF	; 223
 2fa:	83 bf       	out	0x33, r24	; 51
	 
	 en_a_initstatus = VALID_INIT ; /** INITIALIZATION STATUS IS TRUE **/
	 
	 /* ENABLE INTERRUPT */
	 set_bit(SREG , 7);
 2fc:	8f b7       	in	r24, 0x3f	; 63
 2fe:	80 68       	ori	r24, 0x80	; 128
 300:	8f bf       	out	0x3f, r24	; 63
	 set_bit(TIMSK , 0);
 302:	89 b7       	in	r24, 0x39	; 57
 304:	81 60       	ori	r24, 0x01	; 1
 306:	89 bf       	out	0x39, r24	; 57
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	08 95       	ret

0000030c <TMR0_start>:
	
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR0 , 0);
 30c:	83 b7       	in	r24, 0x33	; 51
 30e:	81 60       	ori	r24, 0x01	; 1
 310:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 312:	83 b7       	in	r24, 0x33	; 51
 314:	8d 7f       	andi	r24, 0xFD	; 253
 316:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 318:	83 b7       	in	r24, 0x33	; 51
 31a:	8b 7f       	andi	r24, 0xFB	; 251
 31c:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
 31e:	80 e0       	ldi	r24, 0x00	; 0
 320:	08 95       	ret

00000322 <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
 322:	83 b7       	in	r24, 0x33	; 51
 324:	8e 7f       	andi	r24, 0xFE	; 254
 326:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 328:	83 b7       	in	r24, 0x33	; 51
 32a:	8d 7f       	andi	r24, 0xFD	; 253
 32c:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 32e:	83 b7       	in	r24, 0x33	; 51
 330:	8b 7f       	andi	r24, 0xFB	; 251
 332:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	08 95       	ret

00000338 <TMR0_delayms>:
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	    u32_gs_tmr0nuofovs = (u32_a_delayms / 0.016);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
 338:	0e 94 a7 02 	call	0x54e	; 0x54e <__floatunsisf>
 33c:	2f e6       	ldi	r18, 0x6F	; 111
 33e:	32 e1       	ldi	r19, 0x12	; 18
 340:	43 e8       	ldi	r20, 0x83	; 131
 342:	5c e3       	ldi	r21, 0x3C	; 60
 344:	0e 94 06 02 	call	0x40c	; 0x40c <__divsf3>
 348:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__fixunssfsi>
 34c:	60 93 88 00 	sts	0x0088, r22	; 0x800088 <__data_end>
 350:	70 93 89 00 	sts	0x0089, r23	; 0x800089 <__data_end+0x1>
 354:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__data_end+0x2>
 358:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__data_end+0x3>
	
	    TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
 35c:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
 35e:	0e 94 86 01 	call	0x30c	; 0x30c <TMR0_start>
/** @return     TMR0_delay status                                              */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	50 e0       	ldi	r21, 0x00	; 0
 366:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 368:	0a c0       	rjmp	.+20     	; 0x37e <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
 36a:	08 b6       	in	r0, 0x38	; 56
 36c:	00 fe       	sbrs	r0, 0
 36e:	fd cf       	rjmp	.-6      	; 0x36a <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
 370:	88 b7       	in	r24, 0x38	; 56
 372:	81 60       	ori	r24, 0x01	; 1
 374:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
 376:	4f 5f       	subi	r20, 0xFF	; 255
 378:	5f 4f       	sbci	r21, 0xFF	; 255
 37a:	6f 4f       	sbci	r22, 0xFF	; 255
 37c:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 37e:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 382:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 386:	a0 91 8a 00 	lds	r26, 0x008A	; 0x80008a <__data_end+0x2>
 38a:	b0 91 8b 00 	lds	r27, 0x008B	; 0x80008b <__data_end+0x3>
 38e:	48 17       	cp	r20, r24
 390:	59 07       	cpc	r21, r25
 392:	6a 07       	cpc	r22, r26
 394:	7b 07       	cpc	r23, r27
 396:	48 f3       	brcs	.-46     	; 0x36a <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
 398:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__data_end>
 39c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__data_end+0x1>
 3a0:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__data_end+0x2>
 3a4:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__data_end+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
 3a8:	0e 94 91 01 	call	0x322	; 0x322 <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	08 95       	ret

000003b0 <TMR0_delaymicros>:
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	u32_gs_tmr0nuofovs = (u32_a_delaymicros / 256);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
 3b0:	bb 27       	eor	r27, r27
 3b2:	a9 2f       	mov	r26, r25
 3b4:	98 2f       	mov	r25, r24
 3b6:	87 2f       	mov	r24, r23
 3b8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__data_end>
 3bc:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__data_end+0x1>
 3c0:	a0 93 8a 00 	sts	0x008A, r26	; 0x80008a <__data_end+0x2>
 3c4:	b0 93 8b 00 	sts	0x008B, r27	; 0x80008b <__data_end+0x3>
	
	TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
 3c8:	12 be       	out	0x32, r1	; 50
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
 3ca:	0e 94 86 01 	call	0x30c	; 0x30c <TMR0_start>
/** @param      delay_in_microseconds                                          */
/** @return     TMR0_delay status                                              */
/*******************************************************************************/
TMR0_delay_error TMR0_delaymicros(uint32_t u32_a_delaymicros)
{
	uint32_t u32_a_overflowcounter = 0 ;
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	50 e0       	ldi	r21, 0x00	; 0
 3d2:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 3d4:	0a c0       	rjmp	.+20     	; 0x3ea <TMR0_delaymicros+0x3a>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
 3d6:	08 b6       	in	r0, 0x38	; 56
 3d8:	00 fe       	sbrs	r0, 0
 3da:	fd cf       	rjmp	.-6      	; 0x3d6 <TMR0_delaymicros+0x26>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
 3dc:	88 b7       	in	r24, 0x38	; 56
 3de:	81 60       	ori	r24, 0x01	; 1
 3e0:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
 3e2:	4f 5f       	subi	r20, 0xFF	; 255
 3e4:	5f 4f       	sbci	r21, 0xFF	; 255
 3e6:	6f 4f       	sbci	r22, 0xFF	; 255
 3e8:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 3ea:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <__data_end>
 3ee:	90 91 89 00 	lds	r25, 0x0089	; 0x800089 <__data_end+0x1>
 3f2:	a0 91 8a 00 	lds	r26, 0x008A	; 0x80008a <__data_end+0x2>
 3f6:	b0 91 8b 00 	lds	r27, 0x008B	; 0x80008b <__data_end+0x3>
 3fa:	48 17       	cp	r20, r24
 3fc:	59 07       	cpc	r21, r25
 3fe:	6a 07       	cpc	r22, r26
 400:	7b 07       	cpc	r23, r27
 402:	48 f3       	brcs	.-46     	; 0x3d6 <TMR0_delaymicros+0x26>
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_a_overflowcounter = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/

	TMR0_stop(); /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
 404:	0e 94 91 01 	call	0x322	; 0x322 <TMR0_stop>
	
	return en_a_delaystatus ; 
 408:	80 e0       	ldi	r24, 0x00	; 0
 40a:	08 95       	ret

0000040c <__divsf3>:
 40c:	0e 94 1a 02 	call	0x434	; 0x434 <__divsf3x>
 410:	0c 94 fb 02 	jmp	0x5f6	; 0x5f6 <__fp_round>
 414:	0e 94 f4 02 	call	0x5e8	; 0x5e8 <__fp_pscB>
 418:	58 f0       	brcs	.+22     	; 0x430 <__divsf3+0x24>
 41a:	0e 94 ed 02 	call	0x5da	; 0x5da <__fp_pscA>
 41e:	40 f0       	brcs	.+16     	; 0x430 <__divsf3+0x24>
 420:	29 f4       	brne	.+10     	; 0x42c <__divsf3+0x20>
 422:	5f 3f       	cpi	r21, 0xFF	; 255
 424:	29 f0       	breq	.+10     	; 0x430 <__divsf3+0x24>
 426:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_inf>
 42a:	51 11       	cpse	r21, r1
 42c:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__fp_szero>
 430:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__fp_nan>

00000434 <__divsf3x>:
 434:	0e 94 0c 03 	call	0x618	; 0x618 <__fp_split3>
 438:	68 f3       	brcs	.-38     	; 0x414 <__divsf3+0x8>

0000043a <__divsf3_pse>:
 43a:	99 23       	and	r25, r25
 43c:	b1 f3       	breq	.-20     	; 0x42a <__divsf3+0x1e>
 43e:	55 23       	and	r21, r21
 440:	91 f3       	breq	.-28     	; 0x426 <__divsf3+0x1a>
 442:	95 1b       	sub	r25, r21
 444:	55 0b       	sbc	r21, r21
 446:	bb 27       	eor	r27, r27
 448:	aa 27       	eor	r26, r26
 44a:	62 17       	cp	r22, r18
 44c:	73 07       	cpc	r23, r19
 44e:	84 07       	cpc	r24, r20
 450:	38 f0       	brcs	.+14     	; 0x460 <__divsf3_pse+0x26>
 452:	9f 5f       	subi	r25, 0xFF	; 255
 454:	5f 4f       	sbci	r21, 0xFF	; 255
 456:	22 0f       	add	r18, r18
 458:	33 1f       	adc	r19, r19
 45a:	44 1f       	adc	r20, r20
 45c:	aa 1f       	adc	r26, r26
 45e:	a9 f3       	breq	.-22     	; 0x44a <__divsf3_pse+0x10>
 460:	35 d0       	rcall	.+106    	; 0x4cc <__divsf3_pse+0x92>
 462:	0e 2e       	mov	r0, r30
 464:	3a f0       	brmi	.+14     	; 0x474 <__divsf3_pse+0x3a>
 466:	e0 e8       	ldi	r30, 0x80	; 128
 468:	32 d0       	rcall	.+100    	; 0x4ce <__divsf3_pse+0x94>
 46a:	91 50       	subi	r25, 0x01	; 1
 46c:	50 40       	sbci	r21, 0x00	; 0
 46e:	e6 95       	lsr	r30
 470:	00 1c       	adc	r0, r0
 472:	ca f7       	brpl	.-14     	; 0x466 <__divsf3_pse+0x2c>
 474:	2b d0       	rcall	.+86     	; 0x4cc <__divsf3_pse+0x92>
 476:	fe 2f       	mov	r31, r30
 478:	29 d0       	rcall	.+82     	; 0x4cc <__divsf3_pse+0x92>
 47a:	66 0f       	add	r22, r22
 47c:	77 1f       	adc	r23, r23
 47e:	88 1f       	adc	r24, r24
 480:	bb 1f       	adc	r27, r27
 482:	26 17       	cp	r18, r22
 484:	37 07       	cpc	r19, r23
 486:	48 07       	cpc	r20, r24
 488:	ab 07       	cpc	r26, r27
 48a:	b0 e8       	ldi	r27, 0x80	; 128
 48c:	09 f0       	breq	.+2      	; 0x490 <__divsf3_pse+0x56>
 48e:	bb 0b       	sbc	r27, r27
 490:	80 2d       	mov	r24, r0
 492:	bf 01       	movw	r22, r30
 494:	ff 27       	eor	r31, r31
 496:	93 58       	subi	r25, 0x83	; 131
 498:	5f 4f       	sbci	r21, 0xFF	; 255
 49a:	3a f0       	brmi	.+14     	; 0x4aa <__divsf3_pse+0x70>
 49c:	9e 3f       	cpi	r25, 0xFE	; 254
 49e:	51 05       	cpc	r21, r1
 4a0:	78 f0       	brcs	.+30     	; 0x4c0 <__divsf3_pse+0x86>
 4a2:	0c 94 e4 02 	jmp	0x5c8	; 0x5c8 <__fp_inf>
 4a6:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__fp_szero>
 4aa:	5f 3f       	cpi	r21, 0xFF	; 255
 4ac:	e4 f3       	brlt	.-8      	; 0x4a6 <__divsf3_pse+0x6c>
 4ae:	98 3e       	cpi	r25, 0xE8	; 232
 4b0:	d4 f3       	brlt	.-12     	; 0x4a6 <__divsf3_pse+0x6c>
 4b2:	86 95       	lsr	r24
 4b4:	77 95       	ror	r23
 4b6:	67 95       	ror	r22
 4b8:	b7 95       	ror	r27
 4ba:	f7 95       	ror	r31
 4bc:	9f 5f       	subi	r25, 0xFF	; 255
 4be:	c9 f7       	brne	.-14     	; 0x4b2 <__divsf3_pse+0x78>
 4c0:	88 0f       	add	r24, r24
 4c2:	91 1d       	adc	r25, r1
 4c4:	96 95       	lsr	r25
 4c6:	87 95       	ror	r24
 4c8:	97 f9       	bld	r25, 7
 4ca:	08 95       	ret
 4cc:	e1 e0       	ldi	r30, 0x01	; 1
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	88 1f       	adc	r24, r24
 4d4:	bb 1f       	adc	r27, r27
 4d6:	62 17       	cp	r22, r18
 4d8:	73 07       	cpc	r23, r19
 4da:	84 07       	cpc	r24, r20
 4dc:	ba 07       	cpc	r27, r26
 4de:	20 f0       	brcs	.+8      	; 0x4e8 <__divsf3_pse+0xae>
 4e0:	62 1b       	sub	r22, r18
 4e2:	73 0b       	sbc	r23, r19
 4e4:	84 0b       	sbc	r24, r20
 4e6:	ba 0b       	sbc	r27, r26
 4e8:	ee 1f       	adc	r30, r30
 4ea:	88 f7       	brcc	.-30     	; 0x4ce <__divsf3_pse+0x94>
 4ec:	e0 95       	com	r30
 4ee:	08 95       	ret

000004f0 <__fixunssfsi>:
 4f0:	0e 94 14 03 	call	0x628	; 0x628 <__fp_splitA>
 4f4:	88 f0       	brcs	.+34     	; 0x518 <__fixunssfsi+0x28>
 4f6:	9f 57       	subi	r25, 0x7F	; 127
 4f8:	98 f0       	brcs	.+38     	; 0x520 <__fixunssfsi+0x30>
 4fa:	b9 2f       	mov	r27, r25
 4fc:	99 27       	eor	r25, r25
 4fe:	b7 51       	subi	r27, 0x17	; 23
 500:	b0 f0       	brcs	.+44     	; 0x52e <__fixunssfsi+0x3e>
 502:	e1 f0       	breq	.+56     	; 0x53c <__fixunssfsi+0x4c>
 504:	66 0f       	add	r22, r22
 506:	77 1f       	adc	r23, r23
 508:	88 1f       	adc	r24, r24
 50a:	99 1f       	adc	r25, r25
 50c:	1a f0       	brmi	.+6      	; 0x514 <__fixunssfsi+0x24>
 50e:	ba 95       	dec	r27
 510:	c9 f7       	brne	.-14     	; 0x504 <__fixunssfsi+0x14>
 512:	14 c0       	rjmp	.+40     	; 0x53c <__fixunssfsi+0x4c>
 514:	b1 30       	cpi	r27, 0x01	; 1
 516:	91 f0       	breq	.+36     	; 0x53c <__fixunssfsi+0x4c>
 518:	0e 94 2e 03 	call	0x65c	; 0x65c <__fp_zero>
 51c:	b1 e0       	ldi	r27, 0x01	; 1
 51e:	08 95       	ret
 520:	0c 94 2e 03 	jmp	0x65c	; 0x65c <__fp_zero>
 524:	67 2f       	mov	r22, r23
 526:	78 2f       	mov	r23, r24
 528:	88 27       	eor	r24, r24
 52a:	b8 5f       	subi	r27, 0xF8	; 248
 52c:	39 f0       	breq	.+14     	; 0x53c <__fixunssfsi+0x4c>
 52e:	b9 3f       	cpi	r27, 0xF9	; 249
 530:	cc f3       	brlt	.-14     	; 0x524 <__fixunssfsi+0x34>
 532:	86 95       	lsr	r24
 534:	77 95       	ror	r23
 536:	67 95       	ror	r22
 538:	b3 95       	inc	r27
 53a:	d9 f7       	brne	.-10     	; 0x532 <__fixunssfsi+0x42>
 53c:	3e f4       	brtc	.+14     	; 0x54c <__fixunssfsi+0x5c>
 53e:	90 95       	com	r25
 540:	80 95       	com	r24
 542:	70 95       	com	r23
 544:	61 95       	neg	r22
 546:	7f 4f       	sbci	r23, 0xFF	; 255
 548:	8f 4f       	sbci	r24, 0xFF	; 255
 54a:	9f 4f       	sbci	r25, 0xFF	; 255
 54c:	08 95       	ret

0000054e <__floatunsisf>:
 54e:	e8 94       	clt
 550:	09 c0       	rjmp	.+18     	; 0x564 <__floatsisf+0x12>

00000552 <__floatsisf>:
 552:	97 fb       	bst	r25, 7
 554:	3e f4       	brtc	.+14     	; 0x564 <__floatsisf+0x12>
 556:	90 95       	com	r25
 558:	80 95       	com	r24
 55a:	70 95       	com	r23
 55c:	61 95       	neg	r22
 55e:	7f 4f       	sbci	r23, 0xFF	; 255
 560:	8f 4f       	sbci	r24, 0xFF	; 255
 562:	9f 4f       	sbci	r25, 0xFF	; 255
 564:	99 23       	and	r25, r25
 566:	a9 f0       	breq	.+42     	; 0x592 <__floatsisf+0x40>
 568:	f9 2f       	mov	r31, r25
 56a:	96 e9       	ldi	r25, 0x96	; 150
 56c:	bb 27       	eor	r27, r27
 56e:	93 95       	inc	r25
 570:	f6 95       	lsr	r31
 572:	87 95       	ror	r24
 574:	77 95       	ror	r23
 576:	67 95       	ror	r22
 578:	b7 95       	ror	r27
 57a:	f1 11       	cpse	r31, r1
 57c:	f8 cf       	rjmp	.-16     	; 0x56e <__floatsisf+0x1c>
 57e:	fa f4       	brpl	.+62     	; 0x5be <__floatsisf+0x6c>
 580:	bb 0f       	add	r27, r27
 582:	11 f4       	brne	.+4      	; 0x588 <__floatsisf+0x36>
 584:	60 ff       	sbrs	r22, 0
 586:	1b c0       	rjmp	.+54     	; 0x5be <__floatsisf+0x6c>
 588:	6f 5f       	subi	r22, 0xFF	; 255
 58a:	7f 4f       	sbci	r23, 0xFF	; 255
 58c:	8f 4f       	sbci	r24, 0xFF	; 255
 58e:	9f 4f       	sbci	r25, 0xFF	; 255
 590:	16 c0       	rjmp	.+44     	; 0x5be <__floatsisf+0x6c>
 592:	88 23       	and	r24, r24
 594:	11 f0       	breq	.+4      	; 0x59a <__floatsisf+0x48>
 596:	96 e9       	ldi	r25, 0x96	; 150
 598:	11 c0       	rjmp	.+34     	; 0x5bc <__floatsisf+0x6a>
 59a:	77 23       	and	r23, r23
 59c:	21 f0       	breq	.+8      	; 0x5a6 <__floatsisf+0x54>
 59e:	9e e8       	ldi	r25, 0x8E	; 142
 5a0:	87 2f       	mov	r24, r23
 5a2:	76 2f       	mov	r23, r22
 5a4:	05 c0       	rjmp	.+10     	; 0x5b0 <__floatsisf+0x5e>
 5a6:	66 23       	and	r22, r22
 5a8:	71 f0       	breq	.+28     	; 0x5c6 <__floatsisf+0x74>
 5aa:	96 e8       	ldi	r25, 0x86	; 134
 5ac:	86 2f       	mov	r24, r22
 5ae:	70 e0       	ldi	r23, 0x00	; 0
 5b0:	60 e0       	ldi	r22, 0x00	; 0
 5b2:	2a f0       	brmi	.+10     	; 0x5be <__floatsisf+0x6c>
 5b4:	9a 95       	dec	r25
 5b6:	66 0f       	add	r22, r22
 5b8:	77 1f       	adc	r23, r23
 5ba:	88 1f       	adc	r24, r24
 5bc:	da f7       	brpl	.-10     	; 0x5b4 <__floatsisf+0x62>
 5be:	88 0f       	add	r24, r24
 5c0:	96 95       	lsr	r25
 5c2:	87 95       	ror	r24
 5c4:	97 f9       	bld	r25, 7
 5c6:	08 95       	ret

000005c8 <__fp_inf>:
 5c8:	97 f9       	bld	r25, 7
 5ca:	9f 67       	ori	r25, 0x7F	; 127
 5cc:	80 e8       	ldi	r24, 0x80	; 128
 5ce:	70 e0       	ldi	r23, 0x00	; 0
 5d0:	60 e0       	ldi	r22, 0x00	; 0
 5d2:	08 95       	ret

000005d4 <__fp_nan>:
 5d4:	9f ef       	ldi	r25, 0xFF	; 255
 5d6:	80 ec       	ldi	r24, 0xC0	; 192
 5d8:	08 95       	ret

000005da <__fp_pscA>:
 5da:	00 24       	eor	r0, r0
 5dc:	0a 94       	dec	r0
 5de:	16 16       	cp	r1, r22
 5e0:	17 06       	cpc	r1, r23
 5e2:	18 06       	cpc	r1, r24
 5e4:	09 06       	cpc	r0, r25
 5e6:	08 95       	ret

000005e8 <__fp_pscB>:
 5e8:	00 24       	eor	r0, r0
 5ea:	0a 94       	dec	r0
 5ec:	12 16       	cp	r1, r18
 5ee:	13 06       	cpc	r1, r19
 5f0:	14 06       	cpc	r1, r20
 5f2:	05 06       	cpc	r0, r21
 5f4:	08 95       	ret

000005f6 <__fp_round>:
 5f6:	09 2e       	mov	r0, r25
 5f8:	03 94       	inc	r0
 5fa:	00 0c       	add	r0, r0
 5fc:	11 f4       	brne	.+4      	; 0x602 <__fp_round+0xc>
 5fe:	88 23       	and	r24, r24
 600:	52 f0       	brmi	.+20     	; 0x616 <__fp_round+0x20>
 602:	bb 0f       	add	r27, r27
 604:	40 f4       	brcc	.+16     	; 0x616 <__fp_round+0x20>
 606:	bf 2b       	or	r27, r31
 608:	11 f4       	brne	.+4      	; 0x60e <__fp_round+0x18>
 60a:	60 ff       	sbrs	r22, 0
 60c:	04 c0       	rjmp	.+8      	; 0x616 <__fp_round+0x20>
 60e:	6f 5f       	subi	r22, 0xFF	; 255
 610:	7f 4f       	sbci	r23, 0xFF	; 255
 612:	8f 4f       	sbci	r24, 0xFF	; 255
 614:	9f 4f       	sbci	r25, 0xFF	; 255
 616:	08 95       	ret

00000618 <__fp_split3>:
 618:	57 fd       	sbrc	r21, 7
 61a:	90 58       	subi	r25, 0x80	; 128
 61c:	44 0f       	add	r20, r20
 61e:	55 1f       	adc	r21, r21
 620:	59 f0       	breq	.+22     	; 0x638 <__fp_splitA+0x10>
 622:	5f 3f       	cpi	r21, 0xFF	; 255
 624:	71 f0       	breq	.+28     	; 0x642 <__fp_splitA+0x1a>
 626:	47 95       	ror	r20

00000628 <__fp_splitA>:
 628:	88 0f       	add	r24, r24
 62a:	97 fb       	bst	r25, 7
 62c:	99 1f       	adc	r25, r25
 62e:	61 f0       	breq	.+24     	; 0x648 <__fp_splitA+0x20>
 630:	9f 3f       	cpi	r25, 0xFF	; 255
 632:	79 f0       	breq	.+30     	; 0x652 <__fp_splitA+0x2a>
 634:	87 95       	ror	r24
 636:	08 95       	ret
 638:	12 16       	cp	r1, r18
 63a:	13 06       	cpc	r1, r19
 63c:	14 06       	cpc	r1, r20
 63e:	55 1f       	adc	r21, r21
 640:	f2 cf       	rjmp	.-28     	; 0x626 <__fp_split3+0xe>
 642:	46 95       	lsr	r20
 644:	f1 df       	rcall	.-30     	; 0x628 <__fp_splitA>
 646:	08 c0       	rjmp	.+16     	; 0x658 <__fp_splitA+0x30>
 648:	16 16       	cp	r1, r22
 64a:	17 06       	cpc	r1, r23
 64c:	18 06       	cpc	r1, r24
 64e:	99 1f       	adc	r25, r25
 650:	f1 cf       	rjmp	.-30     	; 0x634 <__fp_splitA+0xc>
 652:	86 95       	lsr	r24
 654:	71 05       	cpc	r23, r1
 656:	61 05       	cpc	r22, r1
 658:	08 94       	sec
 65a:	08 95       	ret

0000065c <__fp_zero>:
 65c:	e8 94       	clt

0000065e <__fp_szero>:
 65e:	bb 27       	eor	r27, r27
 660:	66 27       	eor	r22, r22
 662:	77 27       	eor	r23, r23
 664:	cb 01       	movw	r24, r22
 666:	97 f9       	bld	r25, 7
 668:	08 95       	ret

0000066a <_exit>:
 66a:	f8 94       	cli

0000066c <__stop_program>:
 66c:	ff cf       	rjmp	.-2      	; 0x66c <__stop_program>


air conditioning.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ab6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00800060  00000ab6  00000b4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800070  00800070  00000b5a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000b5a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000b8c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00000bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015bc  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000949  00000000  00000000  000022cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cf5  00000000  00000000  00002c15  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000240  00000000  00000000  0000390c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007dc  00000000  00000000  00003b4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a21  00000000  00000000  00004328  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e8  00000000  00000000  00004d49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 eb       	ldi	r30, 0xB6	; 182
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 37       	cpi	r26, 0x70	; 112
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e7       	ldi	r26, 0x70	; 112
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 38       	cpi	r26, 0x80	; 128
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 5b 02 	call	0x4b6	; 0x4b6 <main>
  8a:	0c 94 59 05 	jmp	0xab2	; 0xab2 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
uint32_t u32_a_temp = 0 ;

void APP_init()
{

	ADC_init();
  92:	0e 94 60 02 	call	0x4c0	; 0x4c0 <ADC_init>
	
	TMR0_init();
  96:	0e 94 86 03 	call	0x70c	; 0x70c <TMR0_init>
	
	LCD_init();
  9a:	0e 94 02 01 	call	0x204	; 0x204 <LCD_init>
	
	TMR0_delayms(20);
  9e:	64 e1       	ldi	r22, 0x14	; 20
  a0:	70 e0       	ldi	r23, 0x00	; 0
  a2:	80 e0       	ldi	r24, 0x00	; 0
  a4:	90 e0       	ldi	r25, 0x00	; 0
  a6:	0e 94 ad 03 	call	0x75a	; 0x75a <TMR0_delayms>
		
	LCD_writecustomchar(u8_g_bell , 0);
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	80 e6       	ldi	r24, 0x60	; 96
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_writecustomchar>
	
	LCD_writecustomchar(u8_g_nobell , 1);
  b4:	61 e0       	ldi	r22, 0x01	; 1
  b6:	84 e7       	ldi	r24, 0x74	; 116
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_writecustomchar>
	
	DIO_setpindir(DIO_PORTA , DIO_PIN3 , DIO_PIN_OUTPUT);  /** BUZZER **/
  be:	41 e0       	ldi	r20, 0x01	; 1
  c0:	63 e0       	ldi	r22, 0x03	; 3
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	0e 94 88 02 	call	0x510	; 0x510 <DIO_setpindir>
	
	DIO_setpinvalue(DIO_PORTA , DIO_PIN3 , DIO_PIN_LOW); /** BUZZER IS OFF **/
  c8:	40 e0       	ldi	r20, 0x00	; 0
  ca:	63 e0       	ldi	r22, 0x03	; 3
  cc:	80 e0       	ldi	r24, 0x00	; 0
  ce:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_setpinvalue>
  d2:	08 95       	ret

000000d4 <APP_start>:


void APP_start()
{
		
	u32_a_temp = ADC_read();
  d4:	0e 94 7e 02 	call	0x4fc	; 0x4fc <ADC_read>
  d8:	60 93 70 00 	sts	0x0070, r22	; 0x800070 <__data_end>
  dc:	70 93 71 00 	sts	0x0071, r23	; 0x800071 <__data_end+0x1>
  e0:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__data_end+0x2>
  e4:	90 93 73 00 	sts	0x0073, r25	; 0x800073 <__data_end+0x3>
	
	LCD_goto(1,11);
  e8:	6b e0       	ldi	r22, 0x0B	; 11
  ea:	81 e0       	ldi	r24, 0x01	; 1
  ec:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_goto>
	LCD_writeint(u32_a_temp);
  f0:	60 91 70 00 	lds	r22, 0x0070	; 0x800070 <__data_end>
  f4:	70 91 71 00 	lds	r23, 0x0071	; 0x800071 <__data_end+0x1>
  f8:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__data_end+0x2>
  fc:	90 91 73 00 	lds	r25, 0x0073	; 0x800073 <__data_end+0x3>
 100:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <LCD_writeint>
	
	if (u32_a_temp > 500)
 104:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__data_end>
 108:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <__data_end+0x1>
 10c:	a0 91 72 00 	lds	r26, 0x0072	; 0x800072 <__data_end+0x2>
 110:	b0 91 73 00 	lds	r27, 0x0073	; 0x800073 <__data_end+0x3>
 114:	85 3f       	cpi	r24, 0xF5	; 245
 116:	91 40       	sbci	r25, 0x01	; 1
 118:	a1 05       	cpc	r26, r1
 11a:	b1 05       	cpc	r27, r1
 11c:	a8 f0       	brcs	.+42     	; 0x148 <APP_start+0x74>
	{
		LCD_goto(1,2);
 11e:	62 e0       	ldi	r22, 0x02	; 2
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_goto>
		
		LCD_writestr("Temp = ");
 126:	88 e6       	ldi	r24, 0x68	; 104
 128:	90 e0       	ldi	r25, 0x00	; 0
 12a:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_writestr>
		
		DIO_setpinvalue(DIO_PORTA , DIO_PIN3 , DIO_PIN_HIGH);
 12e:	41 e0       	ldi	r20, 0x01	; 1
 130:	63 e0       	ldi	r22, 0x03	; 3
 132:	80 e0       	ldi	r24, 0x00	; 0
 134:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_setpinvalue>
		
		LCD_goto(0,8);
 138:	68 e0       	ldi	r22, 0x08	; 8
 13a:	80 e0       	ldi	r24, 0x00	; 0
 13c:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_goto>
		LCD_writechar(0);
 140:	80 e0       	ldi	r24, 0x00	; 0
 142:	0e 94 43 01 	call	0x286	; 0x286 <LCD_writechar>
 146:	08 95       	ret
	}
	
	else
	{
		
		LCD_goto(1,2);
 148:	62 e0       	ldi	r22, 0x02	; 2
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_goto>
		
		LCD_writestr("Temp = ");
 150:	88 e6       	ldi	r24, 0x68	; 104
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 8a 01 	call	0x314	; 0x314 <LCD_writestr>
		
		DIO_setpinvalue(DIO_PORTA , DIO_PIN3 , DIO_PIN_LOW);
 158:	40 e0       	ldi	r20, 0x00	; 0
 15a:	63 e0       	ldi	r22, 0x03	; 3
 15c:	80 e0       	ldi	r24, 0x00	; 0
 15e:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_setpinvalue>
		
		LCD_goto(0,8);
 162:	68 e0       	ldi	r22, 0x08	; 8
 164:	80 e0       	ldi	r24, 0x00	; 0
 166:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_goto>
		LCD_writechar(1);
 16a:	81 e0       	ldi	r24, 0x01	; 1
 16c:	0e 94 43 01 	call	0x286	; 0x286 <LCD_writechar>
 170:	08 95       	ret

00000172 <LCD_sendcmd>:
/** FUNCTION TO SEND COMMAND TO LCD                       */
/** ARGUMENTS   : COMMAND                                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_sendcmd(uint8_t u8_a_cmd)
{
 172:	cf 93       	push	r28
 174:	c8 2f       	mov	r28, r24
	TMR0_init();
 176:	0e 94 86 03 	call	0x70c	; 0x70c <TMR0_init>
		DIO_setpinvalue(LCD_8BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
		TMR0_delayms(5); /** LOW **/
		
		#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_LOW);  /** COMMAND MODE       **/
 17a:	40 e0       	ldi	r20, 0x00	; 0
 17c:	61 e0       	ldi	r22, 0x01	; 1
 17e:	81 e0       	ldi	r24, 0x01	; 1
 180:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_setpinvalue>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);  /** WRITE TO LCD MODE  **/
 184:	40 e0       	ldi	r20, 0x00	; 0
 186:	62 e0       	ldi	r22, 0x02	; 2
 188:	81 e0       	ldi	r24, 0x01	; 1
 18a:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_setpinvalue>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);   /** PREPARE FOR LATCH  **/
 18e:	40 e0       	ldi	r20, 0x00	; 0
 190:	63 e0       	ldi	r22, 0x03	; 3
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_setpinvalue>
		
		PORTA = ((u8_a_cmd & 0xF0) | (PORTA & 0x0F)); /** SEND THE MSB(HIGH NIBBLE) **/
 198:	8b b3       	in	r24, 0x1b	; 27
 19a:	9c 2f       	mov	r25, r28
 19c:	90 7f       	andi	r25, 0xF0	; 240
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	89 2b       	or	r24, r25
 1a2:	8b bb       	out	0x1b, r24	; 27
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
 1a4:	41 e0       	ldi	r20, 0x01	; 1
 1a6:	63 e0       	ldi	r22, 0x03	; 3
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_setpinvalue>
		TMR0_delayms(1);
 1ae:	61 e0       	ldi	r22, 0x01	; 1
 1b0:	70 e0       	ldi	r23, 0x00	; 0
 1b2:	80 e0       	ldi	r24, 0x00	; 0
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	0e 94 ad 03 	call	0x75a	; 0x75a <TMR0_delayms>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
 1ba:	40 e0       	ldi	r20, 0x00	; 0
 1bc:	63 e0       	ldi	r22, 0x03	; 3
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_setpinvalue>
		
		
		PORTA = (((u8_a_cmd << 4) & 0xF0) | (PORTA & 0x0F)); /** SEND THE LSB(LOW NIBBLE) **/
 1c4:	20 e1       	ldi	r18, 0x10	; 16
 1c6:	c2 9f       	mul	r28, r18
 1c8:	c0 01       	movw	r24, r0
 1ca:	11 24       	eor	r1, r1
 1cc:	9b b3       	in	r25, 0x1b	; 27
 1ce:	9f 70       	andi	r25, 0x0F	; 15
 1d0:	89 2b       	or	r24, r25
 1d2:	8b bb       	out	0x1b, r24	; 27
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
 1d4:	41 e0       	ldi	r20, 0x01	; 1
 1d6:	63 e0       	ldi	r22, 0x03	; 3
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_setpinvalue>
		TMR0_delayms(1);
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	70 e0       	ldi	r23, 0x00	; 0
 1e2:	80 e0       	ldi	r24, 0x00	; 0
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 ad 03 	call	0x75a	; 0x75a <TMR0_delayms>
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);    /** LATCH **/
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	63 e0       	ldi	r22, 0x03	; 3
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_setpinvalue>
		
		TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT COMMAND **/
 1f4:	65 e0       	ldi	r22, 0x05	; 5
 1f6:	70 e0       	ldi	r23, 0x00	; 0
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	90 e0       	ldi	r25, 0x00	; 0
 1fc:	0e 94 ad 03 	call	0x75a	; 0x75a <TMR0_delayms>
		
		#endif
}
 200:	cf 91       	pop	r28
 202:	08 95       	ret

00000204 <LCD_init>:
/**********************************************************/
LCD_status LCD_init(void)
{
	LCD_status en_a_lcdinitstatus = VALID__LCD_INIT ; /** VARIABLE TO OLD THE RETURN STATUS OF THE FUNCTION **/
	
	TMR0_init();
 204:	0e 94 86 03 	call	0x70c	; 0x70c <TMR0_init>
		LCD_sendcmd(LCD_CLEAR);       /** CLEAR THE LCD                                    **/
		
		
		#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
		
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_OUTPUT); /** SET RS PIN AS OUTPUT PIN **/
 208:	41 e0       	ldi	r20, 0x01	; 1
 20a:	61 e0       	ldi	r22, 0x01	; 1
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	0e 94 88 02 	call	0x510	; 0x510 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_OUTPUT); /** SET RW PIN AS OUTPUT PIN **/
 212:	41 e0       	ldi	r20, 0x01	; 1
 214:	62 e0       	ldi	r22, 0x02	; 2
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	0e 94 88 02 	call	0x510	; 0x510 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_OUTPUT);  /** SET E PIN AS OUTPUT PIN  **/
 21c:	41 e0       	ldi	r20, 0x01	; 1
 21e:	63 e0       	ldi	r22, 0x03	; 3
 220:	81 e0       	ldi	r24, 0x01	; 1
 222:	0e 94 88 02 	call	0x510	; 0x510 <DIO_setpindir>
		
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D4_PIN , DIO_PIN_OUTPUT); /** 4 DATA PINS AS OUTPUT **/
 226:	41 e0       	ldi	r20, 0x01	; 1
 228:	64 e0       	ldi	r22, 0x04	; 4
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	0e 94 88 02 	call	0x510	; 0x510 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D5_PIN , DIO_PIN_OUTPUT);
 230:	41 e0       	ldi	r20, 0x01	; 1
 232:	65 e0       	ldi	r22, 0x05	; 5
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	0e 94 88 02 	call	0x510	; 0x510 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D6_PIN , DIO_PIN_OUTPUT);
 23a:	41 e0       	ldi	r20, 0x01	; 1
 23c:	66 e0       	ldi	r22, 0x06	; 6
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	0e 94 88 02 	call	0x510	; 0x510 <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D7_PIN , DIO_PIN_OUTPUT);
 244:	41 e0       	ldi	r20, 0x01	; 1
 246:	67 e0       	ldi	r22, 0x07	; 7
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	0e 94 88 02 	call	0x510	; 0x510 <DIO_setpindir>
		
		TMR0_delayms(20); /** DELAY FOR LCD TO BE INITIALIZED **/
 24e:	64 e1       	ldi	r22, 0x14	; 20
 250:	70 e0       	ldi	r23, 0x00	; 0
 252:	80 e0       	ldi	r24, 0x00	; 0
 254:	90 e0       	ldi	r25, 0x00	; 0
 256:	0e 94 ad 03 	call	0x75a	; 0x75a <TMR0_delayms>
		
		/** SEND SOME COMMANDS TO THE LCD FOR INITIAL SET   **/
		
		LCD_sendcmd(LCD_4BIT_MODE_CMD1); /** SEND THREE COMMANDS FOR LCD TO SET 4 BIT OPERATION MODE ( 2 LINES , 5*8 MATRIX ) **/
 25a:	83 e3       	ldi	r24, 0x33	; 51
 25c:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_sendcmd>
		LCD_sendcmd(LCD_4BIT_MODE_CMD2);
 260:	82 e3       	ldi	r24, 0x32	; 50
 262:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_sendcmd>
		LCD_sendcmd(LCD_4BIT_MODE_CMD3);
 266:	88 e2       	ldi	r24, 0x28	; 40
 268:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_sendcmd>
		
		LCD_sendcmd(LCD_CURSOR_OFF);     /** NO NEED FOR CURSOR SO IT IS OFF                  **/
 26c:	8c e0       	ldi	r24, 0x0C	; 12
 26e:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_sendcmd>
		LCD_sendcmd(LCD_CURSOR_INC);     /** DIRECTION OF WRITING FROM LEFT TO RIGHT          **/
 272:	86 e0       	ldi	r24, 0x06	; 6
 274:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_sendcmd>
		LCD_sendcmd(LCD_RETURN_HOME);    /** CURSOR STARTS FROM ITS HOME POSITION             **/
 278:	82 e0       	ldi	r24, 0x02	; 2
 27a:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_sendcmd>
		LCD_sendcmd(LCD_CLEAR);          /** CLEAR THE LCD                                    **/
 27e:	81 e0       	ldi	r24, 0x01	; 1
 280:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_sendcmd>
		
		#endif 
		
}
 284:	08 95       	ret

00000286 <LCD_writechar>:
/** FUNCTION TO DISPLAY CHARACTER ON LCD                  */
/** ARGUMENTS   : CHARACTER                               */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writechar(uint8_t u8_a_chr)
{
 286:	cf 93       	push	r28
 288:	c8 2f       	mov	r28, r24
	
	TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT CHARACTER **/
	
	#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_HIGH);  /** DATA MODE         **/
 28a:	41 e0       	ldi	r20, 0x01	; 1
 28c:	61 e0       	ldi	r22, 0x01	; 1
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_setpinvalue>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);   /** WRITE TO LCD MODE **/
 294:	40 e0       	ldi	r20, 0x00	; 0
 296:	62 e0       	ldi	r22, 0x02	; 2
 298:	81 e0       	ldi	r24, 0x01	; 1
 29a:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_setpinvalue>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);    /** DATA MODE         **/
 29e:	40 e0       	ldi	r20, 0x00	; 0
 2a0:	63 e0       	ldi	r22, 0x03	; 3
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_setpinvalue>
	
	
	PORTA = ((u8_a_chr & 0xF0) | (PORTA & 0x0F)); /** SEND THE MSB (HIGH NIBBLE) **/
 2a8:	8b b3       	in	r24, 0x1b	; 27
 2aa:	9c 2f       	mov	r25, r28
 2ac:	90 7f       	andi	r25, 0xF0	; 240
 2ae:	8f 70       	andi	r24, 0x0F	; 15
 2b0:	89 2b       	or	r24, r25
 2b2:	8b bb       	out	0x1b, r24	; 27
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	63 e0       	ldi	r22, 0x03	; 3
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_setpinvalue>
	TMR0_delayms(1);
 2be:	61 e0       	ldi	r22, 0x01	; 1
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	90 e0       	ldi	r25, 0x00	; 0
 2c6:	0e 94 ad 03 	call	0x75a	; 0x75a <TMR0_delayms>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW); /** LATCH **/
 2ca:	40 e0       	ldi	r20, 0x00	; 0
 2cc:	63 e0       	ldi	r22, 0x03	; 3
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_setpinvalue>
		
	PORTA = (((u8_a_chr << 4) & 0xF0) | (PORTA & 0x0F)); /** SEND THE LSB (LOW NIBBLE) **/
 2d4:	20 e1       	ldi	r18, 0x10	; 16
 2d6:	c2 9f       	mul	r28, r18
 2d8:	c0 01       	movw	r24, r0
 2da:	11 24       	eor	r1, r1
 2dc:	9b b3       	in	r25, 0x1b	; 27
 2de:	9f 70       	andi	r25, 0x0F	; 15
 2e0:	89 2b       	or	r24, r25
 2e2:	8b bb       	out	0x1b, r24	; 27
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	63 e0       	ldi	r22, 0x03	; 3
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_setpinvalue>
	TMR0_delayms(1);
 2ee:	61 e0       	ldi	r22, 0x01	; 1
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	80 e0       	ldi	r24, 0x00	; 0
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 ad 03 	call	0x75a	; 0x75a <TMR0_delayms>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
 2fa:	40 e0       	ldi	r20, 0x00	; 0
 2fc:	63 e0       	ldi	r22, 0x03	; 3
 2fe:	81 e0       	ldi	r24, 0x01	; 1
 300:	0e 94 07 03 	call	0x60e	; 0x60e <DIO_setpinvalue>
	
	TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT CHARACTER **/
 304:	65 e0       	ldi	r22, 0x05	; 5
 306:	70 e0       	ldi	r23, 0x00	; 0
 308:	80 e0       	ldi	r24, 0x00	; 0
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	0e 94 ad 03 	call	0x75a	; 0x75a <TMR0_delayms>
	
	#endif
}
 310:	cf 91       	pop	r28
 312:	08 95       	ret

00000314 <LCD_writestr>:
/** FUNCTION TO DISPLAY STRING ON LCD                     */
/** ARGUMENTS   : STRING                                  */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writestr(uint8_t* u8_s_str)
{
 314:	0f 93       	push	r16
 316:	1f 93       	push	r17
 318:	cf 93       	push	r28
 31a:	8c 01       	movw	r16, r24
	uint8_t u8_a_letter = 0;   /** VARIABLE SIMULATES LETTER **/
 31c:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (u8_s_str[u8_a_letter] != '\0') /** WHILE LETTER ISN'T NULL **/
 31e:	03 c0       	rjmp	.+6      	; 0x326 <LCD_writestr+0x12>
	{
		LCD_writechar(u8_s_str[u8_a_letter]); /** SEND LETTER TO LCD **/
 320:	0e 94 43 01 	call	0x286	; 0x286 <LCD_writechar>
		
		u8_a_letter++; /** JUMP TO THE NEXT LETTER **/
 324:	cf 5f       	subi	r28, 0xFF	; 255
/**********************************************************/
LCD_status LCD_writestr(uint8_t* u8_s_str)
{
	uint8_t u8_a_letter = 0;   /** VARIABLE SIMULATES LETTER **/
	
	while (u8_s_str[u8_a_letter] != '\0') /** WHILE LETTER ISN'T NULL **/
 326:	f8 01       	movw	r30, r16
 328:	ec 0f       	add	r30, r28
 32a:	f1 1d       	adc	r31, r1
 32c:	80 81       	ld	r24, Z
 32e:	81 11       	cpse	r24, r1
 330:	f7 cf       	rjmp	.-18     	; 0x320 <LCD_writestr+0xc>
	{
		LCD_writechar(u8_s_str[u8_a_letter]); /** SEND LETTER TO LCD **/
		
		u8_a_letter++; /** JUMP TO THE NEXT LETTER **/
	}
}
 332:	cf 91       	pop	r28
 334:	1f 91       	pop	r17
 336:	0f 91       	pop	r16
 338:	08 95       	ret

0000033a <LCD_goto>:
/** FUNCTION TO JUMP TO SPECIFIC POSITION ON LCD          */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status  LCD_goto(uint8_t u8_a_row , uint8_t u8_a_column)
{
 33a:	cf 93       	push	r28
 33c:	df 93       	push	r29
 33e:	00 d0       	rcall	.+0      	; 0x340 <LCD_goto+0x6>
 340:	cd b7       	in	r28, 0x3d	; 61
 342:	de b7       	in	r29, 0x3e	; 62
	uint8_t positions[2] = {0x80 , 0xC0}; /** POSITIONS OF 1st & 2nd ROWS **/
 344:	90 e8       	ldi	r25, 0x80	; 128
 346:	99 83       	std	Y+1, r25	; 0x01
 348:	90 ec       	ldi	r25, 0xC0	; 192
 34a:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_sendcmd(positions[u8_a_row] + u8_a_column); /** GO TO SPECIFIC MATRIX **/
 34c:	e1 e0       	ldi	r30, 0x01	; 1
 34e:	f0 e0       	ldi	r31, 0x00	; 0
 350:	ec 0f       	add	r30, r28
 352:	fd 1f       	adc	r31, r29
 354:	e8 0f       	add	r30, r24
 356:	f1 1d       	adc	r31, r1
 358:	80 81       	ld	r24, Z
 35a:	86 0f       	add	r24, r22
 35c:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_sendcmd>
}
 360:	0f 90       	pop	r0
 362:	0f 90       	pop	r0
 364:	df 91       	pop	r29
 366:	cf 91       	pop	r28
 368:	08 95       	ret

0000036a <LCD_writecustomchar>:
/** FUNCTION TO WRITE CUSOMIZED CHARACTER ON THE LCD      */
/** ARGUMENTS   : PATTERN , OCATION IN CGRAM              */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writecustomchar(uint8_t * u8_a_pattern , uint8_t u8_a_location)
{
 36a:	0f 93       	push	r16
 36c:	1f 93       	push	r17
 36e:	cf 93       	push	r28
 370:	8c 01       	movw	r16, r24
	uint8_t u8_a_patterncounter = 0 ; /** ITERATOR ON THE ROWS OF CHARACTER PATTERN **/
	
	LCD_sendcmd( 0x40 + (u8_a_location * 8) ); /** SEND COMMAND TO LCD TO WRITE TO ITS RAM **/
 372:	86 2f       	mov	r24, r22
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	08 96       	adiw	r24, 0x08	; 8
 378:	88 0f       	add	r24, r24
 37a:	88 0f       	add	r24, r24
 37c:	88 0f       	add	r24, r24
 37e:	0e 94 b9 00 	call	0x172	; 0x172 <LCD_sendcmd>
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
 382:	c0 e0       	ldi	r28, 0x00	; 0
 384:	07 c0       	rjmp	.+14     	; 0x394 <LCD_writecustomchar+0x2a>
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
 386:	f8 01       	movw	r30, r16
 388:	ec 0f       	add	r30, r28
 38a:	f1 1d       	adc	r31, r1
 38c:	80 81       	ld	r24, Z
 38e:	0e 94 43 01 	call	0x286	; 0x286 <LCD_writechar>
{
	uint8_t u8_a_patterncounter = 0 ; /** ITERATOR ON THE ROWS OF CHARACTER PATTERN **/
	
	LCD_sendcmd( 0x40 + (u8_a_location * 8) ); /** SEND COMMAND TO LCD TO WRITE TO ITS RAM **/
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
 392:	cf 5f       	subi	r28, 0xFF	; 255
 394:	c8 30       	cpi	r28, 0x08	; 8
 396:	b8 f3       	brcs	.-18     	; 0x386 <LCD_writecustomchar+0x1c>
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
	}
}
 398:	cf 91       	pop	r28
 39a:	1f 91       	pop	r17
 39c:	0f 91       	pop	r16
 39e:	08 95       	ret

000003a0 <LCD_writeint>:
/** FUNCTION TO WRITE INT ON THE LCD                      */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
 3a0:	1f 93       	push	r17
 3a2:	cf 93       	push	r28
 3a4:	df 93       	push	r29
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
 3aa:	2a 97       	sbiw	r28, 0x0a	; 10
 3ac:	0f b6       	in	r0, 0x3f	; 63
 3ae:	f8 94       	cli
 3b0:	de bf       	out	0x3e, r29	; 62
 3b2:	0f be       	out	0x3f, r0	; 63
 3b4:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0, k ;
	uint8_t number[10];
	
	/* In case of negative numbers */
	if(s32_a_num < 0)
 3b6:	99 23       	and	r25, r25
 3b8:	dc f5       	brge	.+118    	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
	{
		s32_a_num *= -1;
 3ba:	90 95       	com	r25
 3bc:	80 95       	com	r24
 3be:	70 95       	com	r23
 3c0:	61 95       	neg	r22
 3c2:	7f 4f       	sbci	r23, 0xFF	; 255
 3c4:	8f 4f       	sbci	r24, 0xFF	; 255
 3c6:	9f 4f       	sbci	r25, 0xFF	; 255
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
	uint8_t i = 0, k ;
 3c8:	10 e0       	ldi	r17, 0x00	; 0
	
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		while(s32_a_num > 0)
 3ca:	13 c0       	rjmp	.+38     	; 0x3f2 <LCD_writeint+0x52>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
 3cc:	2a e0       	ldi	r18, 0x0A	; 10
 3ce:	30 e0       	ldi	r19, 0x00	; 0
 3d0:	40 e0       	ldi	r20, 0x00	; 0
 3d2:	50 e0       	ldi	r21, 0x00	; 0
 3d4:	0e 94 18 05 	call	0xa30	; 0xa30 <__divmodsi4>
 3d8:	e1 e0       	ldi	r30, 0x01	; 1
 3da:	f0 e0       	ldi	r31, 0x00	; 0
 3dc:	ec 0f       	add	r30, r28
 3de:	fd 1f       	adc	r31, r29
 3e0:	e1 0f       	add	r30, r17
 3e2:	f1 1d       	adc	r31, r1
 3e4:	60 5d       	subi	r22, 0xD0	; 208
 3e6:	60 83       	st	Z, r22
			s32_a_num /= 10;
 3e8:	62 2f       	mov	r22, r18
 3ea:	73 2f       	mov	r23, r19
 3ec:	84 2f       	mov	r24, r20
 3ee:	95 2f       	mov	r25, r21
			i++;
 3f0:	1f 5f       	subi	r17, 0xFF	; 255
	
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		while(s32_a_num > 0)
 3f2:	16 16       	cp	r1, r22
 3f4:	17 06       	cpc	r1, r23
 3f6:	18 06       	cpc	r1, r24
 3f8:	19 06       	cpc	r1, r25
 3fa:	44 f3       	brlt	.-48     	; 0x3cc <LCD_writeint+0x2c>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
 3fc:	e1 e0       	ldi	r30, 0x01	; 1
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	ec 0f       	add	r30, r28
 402:	fd 1f       	adc	r31, r29
 404:	e1 0f       	add	r30, r17
 406:	f1 1d       	adc	r31, r1
 408:	8d e2       	ldi	r24, 0x2D	; 45
 40a:	80 83       	st	Z, r24
		
		for(k = i+1 ; k > 0 ; k--)
 40c:	1f 5f       	subi	r17, 0xFF	; 255
 40e:	0d c0       	rjmp	.+26     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
		{
			LCD_writechar(number[k - 1]); //Display each number
 410:	e1 2f       	mov	r30, r17
 412:	f0 e0       	ldi	r31, 0x00	; 0
 414:	31 97       	sbiw	r30, 0x01	; 1
 416:	81 e0       	ldi	r24, 0x01	; 1
 418:	90 e0       	ldi	r25, 0x00	; 0
 41a:	8c 0f       	add	r24, r28
 41c:	9d 1f       	adc	r25, r29
 41e:	e8 0f       	add	r30, r24
 420:	f9 1f       	adc	r31, r25
 422:	80 81       	ld	r24, Z
 424:	0e 94 43 01 	call	0x286	; 0x286 <LCD_writechar>
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
		
		for(k = i+1 ; k > 0 ; k--)
 428:	11 50       	subi	r17, 0x01	; 1
 42a:	11 11       	cpse	r17, r1
 42c:	f1 cf       	rjmp	.-30     	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 42e:	39 c0       	rjmp	.+114    	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
		{
			LCD_writechar(number[k - 1]); //Display each number
		}
	}
	/* Zero case */
	else if(s32_a_num == 0)
 430:	61 15       	cp	r22, r1
 432:	71 05       	cpc	r23, r1
 434:	81 05       	cpc	r24, r1
 436:	91 05       	cpc	r25, r1
 438:	21 f4       	brne	.+8      	; 0x442 <__EEPROM_REGION_LENGTH__+0x42>
	{
		LCD_writechar('0');
 43a:	80 e3       	ldi	r24, 0x30	; 48
 43c:	0e 94 43 01 	call	0x286	; 0x286 <LCD_writechar>
 440:	30 c0       	rjmp	.+96     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
 442:	16 16       	cp	r1, r22
 444:	17 06       	cpc	r1, r23
 446:	18 06       	cpc	r1, r24
 448:	19 06       	cpc	r1, r25
 44a:	ac f0       	brlt	.+42     	; 0x476 <__EEPROM_REGION_LENGTH__+0x76>
 44c:	2a c0       	rjmp	.+84     	; 0x4a2 <__EEPROM_REGION_LENGTH__+0xa2>
	{
		while(s32_a_num > 0)
		{
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
 44e:	2a e0       	ldi	r18, 0x0A	; 10
 450:	30 e0       	ldi	r19, 0x00	; 0
 452:	40 e0       	ldi	r20, 0x00	; 0
 454:	50 e0       	ldi	r21, 0x00	; 0
 456:	0e 94 18 05 	call	0xa30	; 0xa30 <__divmodsi4>
 45a:	e1 e0       	ldi	r30, 0x01	; 1
 45c:	f0 e0       	ldi	r31, 0x00	; 0
 45e:	ec 0f       	add	r30, r28
 460:	fd 1f       	adc	r31, r29
 462:	e1 0f       	add	r30, r17
 464:	f1 1d       	adc	r31, r1
 466:	60 5d       	subi	r22, 0xD0	; 208
 468:	60 83       	st	Z, r22
			s32_a_num /= 10;
 46a:	62 2f       	mov	r22, r18
 46c:	73 2f       	mov	r23, r19
 46e:	84 2f       	mov	r24, r20
 470:	95 2f       	mov	r25, r21
			i++;
 472:	1f 5f       	subi	r17, 0xFF	; 255
 474:	01 c0       	rjmp	.+2      	; 0x478 <__EEPROM_REGION_LENGTH__+0x78>
 476:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
	{
		while(s32_a_num > 0)
 478:	16 16       	cp	r1, r22
 47a:	17 06       	cpc	r1, r23
 47c:	18 06       	cpc	r1, r24
 47e:	19 06       	cpc	r1, r25
 480:	34 f3       	brlt	.-52     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 482:	0d c0       	rjmp	.+26     	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
		{
			LCD_writechar(number[k-1]); //Display each number
 484:	e1 2f       	mov	r30, r17
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	31 97       	sbiw	r30, 0x01	; 1
 48a:	81 e0       	ldi	r24, 0x01	; 1
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	8c 0f       	add	r24, r28
 490:	9d 1f       	adc	r25, r29
 492:	e8 0f       	add	r30, r24
 494:	f9 1f       	adc	r31, r25
 496:	80 81       	ld	r24, Z
 498:	0e 94 43 01 	call	0x286	; 0x286 <LCD_writechar>
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
 49c:	11 50       	subi	r17, 0x01	; 1
 49e:	11 11       	cpse	r17, r1
 4a0:	f1 cf       	rjmp	.-30     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
		{
			LCD_writechar(number[k-1]); //Display each number
		}
	}
 4a2:	2a 96       	adiw	r28, 0x0a	; 10
 4a4:	0f b6       	in	r0, 0x3f	; 63
 4a6:	f8 94       	cli
 4a8:	de bf       	out	0x3e, r29	; 62
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	cd bf       	out	0x3d, r28	; 61
 4ae:	df 91       	pop	r29
 4b0:	cf 91       	pop	r28
 4b2:	1f 91       	pop	r17
 4b4:	08 95       	ret

000004b6 <main>:

#include "APP/app.h"

int main(void)
{
	APP_init();
 4b6:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	
   
    /* Replace with your application code */
    while (1) 
    {
		 APP_start();
 4ba:	0e 94 6a 00 	call	0xd4	; 0xd4 <APP_start>
 4be:	fd cf       	rjmp	.-6      	; 0x4ba <main+0x4>

000004c0 <ADC_init>:
/***********************************************************/
ADC_initstatus ADC_init(void)
{
	/** SET THE VOLTAGE REFERENCE AS IT'S CONFIGURED **/
 	#if   ADC_VOLTAGE_REFRENCE   ==      AVCC_SOURCE
 	set_bit(ADMUX , 6);
 4c0:	87 b1       	in	r24, 0x07	; 7
 4c2:	80 64       	ori	r24, 0x40	; 64
 4c4:	87 b9       	out	0x07, r24	; 7
 	clear_bit(ADMUX , 7);
 4c6:	87 b1       	in	r24, 0x07	; 7
 4c8:	8f 77       	andi	r24, 0x7F	; 127
 4ca:	87 b9       	out	0x07, r24	; 7
	
	#endif
	
	
	#if   ADC_CHANNEL           ==     CHANNEL1
	set_bit(ADMUX , 0);
 4cc:	87 b1       	in	r24, 0x07	; 7
 4ce:	81 60       	ori	r24, 0x01	; 1
 4d0:	87 b9       	out	0x07, r24	; 7
	DIO_setpindir(DIO_PORTA , DIO_PIN1 , DIO_PIN_INPUT); /** SET THE DIRECION OF PIN CHANNEL AS INPUT **/
 4d2:	40 e0       	ldi	r20, 0x00	; 0
 4d4:	61 e0       	ldi	r22, 0x01	; 1
 4d6:	80 e0       	ldi	r24, 0x00	; 0
 4d8:	0e 94 88 02 	call	0x510	; 0x510 <DIO_setpindir>
	#elif  ADC_PRESCALER          ==      PRESCALER8
		 set_bit(ADCSRA , 0);
		 set_bit(ADCSRA , 1);
		
	#elif  ADC_PRESCALER          ==      PRESCALER4
		 set_bit(ADCSRA , 1);
 4dc:	86 b1       	in	r24, 0x06	; 6
 4de:	82 60       	ori	r24, 0x02	; 2
 4e0:	86 b9       	out	0x06, r24	; 6
	     
	#endif
	
	/** SET THE ADJUSTING MODE OF ADC VALUE  **/
	#if    ADC_ADjUST            ==     RIGHT_ADJUST
	clear_bit(ADMUX , 5);
 4e2:	87 b1       	in	r24, 0x07	; 7
 4e4:	8f 7d       	andi	r24, 0xDF	; 223
 4e6:	87 b9       	out	0x07, r24	; 7
	
	#endif
		
	/** SET THE OPERATING MODE OF ADC **/
	#if  ADC_CONVERSION_TRIGGER  ==    AUTO_RUNNING_MODE
	set_bit(ADCSRA , 5);
 4e8:	86 b1       	in	r24, 0x06	; 6
 4ea:	80 62       	ori	r24, 0x20	; 32
 4ec:	86 b9       	out	0x06, r24	; 6
 	
	 
	/** ADC INTERRUPT STATUS **/
	#if  ADC_INTERRUPT_STATUS   ==     ADC_INT_DISABLED
	
	clear_bit(ADCSRA , 3);
 4ee:	86 b1       	in	r24, 0x06	; 6
 4f0:	87 7f       	andi	r24, 0xF7	; 247
 4f2:	86 b9       	out	0x06, r24	; 6
 	set_bit(SREG , 7);
 	set_bit(ADCSRA , 3);
	#endif
	
	/** Enable  ADC **/
	set_bit(ADCSRA , 7);
 4f4:	86 b1       	in	r24, 0x06	; 6
 4f6:	80 68       	ori	r24, 0x80	; 128
 4f8:	86 b9       	out	0x06, r24	; 6
}
 4fa:	08 95       	ret

000004fc <ADC_read>:
/***********************************************************/
uint32_t ADC_read(void)
{
	uint32_t u16_a_analogvalue = 0;
		
	set_bit(ADCSRA , 6); /** SATRT CONVERSION **/
 4fc:	86 b1       	in	r24, 0x06	; 6
 4fe:	80 64       	ori	r24, 0x40	; 64
 500:	86 b9       	out	0x06, r24	; 6
	
	while( (ADCSRA & (1 << 4)) == 0); /** WAIT UNTILL CONVERSION ENDS **/
 502:	34 9b       	sbis	0x06, 4	; 6
 504:	fe cf       	rjmp	.-4      	; 0x502 <ADC_read+0x6>
	
	u16_a_analogvalue = ADC_VAL ; /** GET THE VALUE FORM ADC VALUE REGISTER **/
 506:	64 b1       	in	r22, 0x04	; 4
 508:	75 b1       	in	r23, 0x05	; 5
 50a:	80 e0       	ldi	r24, 0x00	; 0
 50c:	90 e0       	ldi	r25, 0x00	; 0
	 
	return u16_a_analogvalue; /** RETURN THE ANALOG VALUE **/ 
 50e:	08 95       	ret

00000510 <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
 510:	44 23       	and	r20, r20
 512:	19 f0       	breq	.+6      	; 0x51a <DIO_setpindir+0xa>
 514:	41 30       	cpi	r20, 0x01	; 1
 516:	e9 f1       	breq	.+122    	; 0x592 <DIO_setpindir+0x82>
 518:	74 c0       	rjmp	.+232    	; 0x602 <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 51a:	81 30       	cpi	r24, 0x01	; 1
 51c:	99 f0       	breq	.+38     	; 0x544 <DIO_setpindir+0x34>
 51e:	28 f0       	brcs	.+10     	; 0x52a <DIO_setpindir+0x1a>
 520:	82 30       	cpi	r24, 0x02	; 2
 522:	e9 f0       	breq	.+58     	; 0x55e <DIO_setpindir+0x4e>
 524:	83 30       	cpi	r24, 0x03	; 3
 526:	41 f1       	breq	.+80     	; 0x578 <DIO_setpindir+0x68>
 528:	6e c0       	rjmp	.+220    	; 0x606 <DIO_setpindir+0xf6>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
 52a:	2a b3       	in	r18, 0x1a	; 26
 52c:	81 e0       	ldi	r24, 0x01	; 1
 52e:	90 e0       	ldi	r25, 0x00	; 0
 530:	02 c0       	rjmp	.+4      	; 0x536 <DIO_setpindir+0x26>
 532:	88 0f       	add	r24, r24
 534:	99 1f       	adc	r25, r25
 536:	6a 95       	dec	r22
 538:	e2 f7       	brpl	.-8      	; 0x532 <DIO_setpindir+0x22>
 53a:	80 95       	com	r24
 53c:	82 23       	and	r24, r18
 53e:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 540:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
 542:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
 544:	27 b3       	in	r18, 0x17	; 23
 546:	81 e0       	ldi	r24, 0x01	; 1
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	02 c0       	rjmp	.+4      	; 0x550 <DIO_setpindir+0x40>
 54c:	88 0f       	add	r24, r24
 54e:	99 1f       	adc	r25, r25
 550:	6a 95       	dec	r22
 552:	e2 f7       	brpl	.-8      	; 0x54c <DIO_setpindir+0x3c>
 554:	80 95       	com	r24
 556:	82 23       	and	r24, r18
 558:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 55a:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
 55c:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
 55e:	24 b3       	in	r18, 0x14	; 20
 560:	81 e0       	ldi	r24, 0x01	; 1
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	02 c0       	rjmp	.+4      	; 0x56a <DIO_setpindir+0x5a>
 566:	88 0f       	add	r24, r24
 568:	99 1f       	adc	r25, r25
 56a:	6a 95       	dec	r22
 56c:	e2 f7       	brpl	.-8      	; 0x566 <DIO_setpindir+0x56>
 56e:	80 95       	com	r24
 570:	82 23       	and	r24, r18
 572:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 574:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
 576:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
 578:	21 b3       	in	r18, 0x11	; 17
 57a:	81 e0       	ldi	r24, 0x01	; 1
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	02 c0       	rjmp	.+4      	; 0x584 <DIO_setpindir+0x74>
 580:	88 0f       	add	r24, r24
 582:	99 1f       	adc	r25, r25
 584:	6a 95       	dec	r22
 586:	e2 f7       	brpl	.-8      	; 0x580 <DIO_setpindir+0x70>
 588:	80 95       	com	r24
 58a:	82 23       	and	r24, r18
 58c:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 58e:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
 590:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
 592:	81 30       	cpi	r24, 0x01	; 1
 594:	91 f0       	breq	.+36     	; 0x5ba <DIO_setpindir+0xaa>
 596:	28 f0       	brcs	.+10     	; 0x5a2 <DIO_setpindir+0x92>
 598:	82 30       	cpi	r24, 0x02	; 2
 59a:	d9 f0       	breq	.+54     	; 0x5d2 <DIO_setpindir+0xc2>
 59c:	83 30       	cpi	r24, 0x03	; 3
 59e:	29 f1       	breq	.+74     	; 0x5ea <DIO_setpindir+0xda>
 5a0:	34 c0       	rjmp	.+104    	; 0x60a <DIO_setpindir+0xfa>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 5a2:	2a b3       	in	r18, 0x1a	; 26
 5a4:	81 e0       	ldi	r24, 0x01	; 1
 5a6:	90 e0       	ldi	r25, 0x00	; 0
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <DIO_setpindir+0x9e>
 5aa:	88 0f       	add	r24, r24
 5ac:	99 1f       	adc	r25, r25
 5ae:	6a 95       	dec	r22
 5b0:	e2 f7       	brpl	.-8      	; 0x5aa <DIO_setpindir+0x9a>
 5b2:	82 2b       	or	r24, r18
 5b4:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 5b6:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 5b8:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 5ba:	27 b3       	in	r18, 0x17	; 23
 5bc:	81 e0       	ldi	r24, 0x01	; 1
 5be:	90 e0       	ldi	r25, 0x00	; 0
 5c0:	02 c0       	rjmp	.+4      	; 0x5c6 <DIO_setpindir+0xb6>
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	6a 95       	dec	r22
 5c8:	e2 f7       	brpl	.-8      	; 0x5c2 <DIO_setpindir+0xb2>
 5ca:	82 2b       	or	r24, r18
 5cc:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 5ce:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 5d0:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 5d2:	24 b3       	in	r18, 0x14	; 20
 5d4:	81 e0       	ldi	r24, 0x01	; 1
 5d6:	90 e0       	ldi	r25, 0x00	; 0
 5d8:	02 c0       	rjmp	.+4      	; 0x5de <DIO_setpindir+0xce>
 5da:	88 0f       	add	r24, r24
 5dc:	99 1f       	adc	r25, r25
 5de:	6a 95       	dec	r22
 5e0:	e2 f7       	brpl	.-8      	; 0x5da <DIO_setpindir+0xca>
 5e2:	82 2b       	or	r24, r18
 5e4:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 5e6:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 5e8:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
 5ea:	21 b3       	in	r18, 0x11	; 17
 5ec:	81 e0       	ldi	r24, 0x01	; 1
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	02 c0       	rjmp	.+4      	; 0x5f6 <DIO_setpindir+0xe6>
 5f2:	88 0f       	add	r24, r24
 5f4:	99 1f       	adc	r25, r25
 5f6:	6a 95       	dec	r22
 5f8:	e2 f7       	brpl	.-8      	; 0x5f2 <DIO_setpindir+0xe2>
 5fa:	82 2b       	or	r24, r18
 5fc:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
 5fe:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
 600:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 606:	81 e0       	ldi	r24, 0x01	; 1
 608:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
 60a:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
 60c:	08 95       	ret

0000060e <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
 60e:	44 23       	and	r20, r20
 610:	19 f0       	breq	.+6      	; 0x618 <DIO_setpinvalue+0xa>
 612:	41 30       	cpi	r20, 0x01	; 1
 614:	e9 f1       	breq	.+122    	; 0x690 <DIO_setpinvalue+0x82>
 616:	74 c0       	rjmp	.+232    	; 0x700 <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
 618:	81 30       	cpi	r24, 0x01	; 1
 61a:	99 f0       	breq	.+38     	; 0x642 <DIO_setpinvalue+0x34>
 61c:	28 f0       	brcs	.+10     	; 0x628 <DIO_setpinvalue+0x1a>
 61e:	82 30       	cpi	r24, 0x02	; 2
 620:	e9 f0       	breq	.+58     	; 0x65c <DIO_setpinvalue+0x4e>
 622:	83 30       	cpi	r24, 0x03	; 3
 624:	41 f1       	breq	.+80     	; 0x676 <DIO_setpinvalue+0x68>
 626:	6e c0       	rjmp	.+220    	; 0x704 <DIO_setpinvalue+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 628:	2b b3       	in	r18, 0x1b	; 27
 62a:	81 e0       	ldi	r24, 0x01	; 1
 62c:	90 e0       	ldi	r25, 0x00	; 0
 62e:	02 c0       	rjmp	.+4      	; 0x634 <DIO_setpinvalue+0x26>
 630:	88 0f       	add	r24, r24
 632:	99 1f       	adc	r25, r25
 634:	6a 95       	dec	r22
 636:	e2 f7       	brpl	.-8      	; 0x630 <DIO_setpinvalue+0x22>
 638:	80 95       	com	r24
 63a:	82 23       	and	r24, r18
 63c:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 63e:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 640:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 642:	28 b3       	in	r18, 0x18	; 24
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	90 e0       	ldi	r25, 0x00	; 0
 648:	02 c0       	rjmp	.+4      	; 0x64e <DIO_setpinvalue+0x40>
 64a:	88 0f       	add	r24, r24
 64c:	99 1f       	adc	r25, r25
 64e:	6a 95       	dec	r22
 650:	e2 f7       	brpl	.-8      	; 0x64a <DIO_setpinvalue+0x3c>
 652:	80 95       	com	r24
 654:	82 23       	and	r24, r18
 656:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 658:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 65a:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 65c:	25 b3       	in	r18, 0x15	; 21
 65e:	81 e0       	ldi	r24, 0x01	; 1
 660:	90 e0       	ldi	r25, 0x00	; 0
 662:	02 c0       	rjmp	.+4      	; 0x668 <DIO_setpinvalue+0x5a>
 664:	88 0f       	add	r24, r24
 666:	99 1f       	adc	r25, r25
 668:	6a 95       	dec	r22
 66a:	e2 f7       	brpl	.-8      	; 0x664 <DIO_setpinvalue+0x56>
 66c:	80 95       	com	r24
 66e:	82 23       	and	r24, r18
 670:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 672:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 674:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
 676:	22 b3       	in	r18, 0x12	; 18
 678:	81 e0       	ldi	r24, 0x01	; 1
 67a:	90 e0       	ldi	r25, 0x00	; 0
 67c:	02 c0       	rjmp	.+4      	; 0x682 <DIO_setpinvalue+0x74>
 67e:	88 0f       	add	r24, r24
 680:	99 1f       	adc	r25, r25
 682:	6a 95       	dec	r22
 684:	e2 f7       	brpl	.-8      	; 0x67e <DIO_setpinvalue+0x70>
 686:	80 95       	com	r24
 688:	82 23       	and	r24, r18
 68a:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 68c:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
 68e:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
 690:	81 30       	cpi	r24, 0x01	; 1
 692:	91 f0       	breq	.+36     	; 0x6b8 <DIO_setpinvalue+0xaa>
 694:	28 f0       	brcs	.+10     	; 0x6a0 <DIO_setpinvalue+0x92>
 696:	82 30       	cpi	r24, 0x02	; 2
 698:	d9 f0       	breq	.+54     	; 0x6d0 <DIO_setpinvalue+0xc2>
 69a:	83 30       	cpi	r24, 0x03	; 3
 69c:	29 f1       	breq	.+74     	; 0x6e8 <DIO_setpinvalue+0xda>
 69e:	34 c0       	rjmp	.+104    	; 0x708 <DIO_setpinvalue+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 6a0:	2b b3       	in	r18, 0x1b	; 27
 6a2:	81 e0       	ldi	r24, 0x01	; 1
 6a4:	90 e0       	ldi	r25, 0x00	; 0
 6a6:	02 c0       	rjmp	.+4      	; 0x6ac <DIO_setpinvalue+0x9e>
 6a8:	88 0f       	add	r24, r24
 6aa:	99 1f       	adc	r25, r25
 6ac:	6a 95       	dec	r22
 6ae:	e2 f7       	brpl	.-8      	; 0x6a8 <DIO_setpinvalue+0x9a>
 6b0:	82 2b       	or	r24, r18
 6b2:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 6b4:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 6b6:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 6b8:	28 b3       	in	r18, 0x18	; 24
 6ba:	81 e0       	ldi	r24, 0x01	; 1
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	02 c0       	rjmp	.+4      	; 0x6c4 <DIO_setpinvalue+0xb6>
 6c0:	88 0f       	add	r24, r24
 6c2:	99 1f       	adc	r25, r25
 6c4:	6a 95       	dec	r22
 6c6:	e2 f7       	brpl	.-8      	; 0x6c0 <DIO_setpinvalue+0xb2>
 6c8:	82 2b       	or	r24, r18
 6ca:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 6cc:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 6ce:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 6d0:	25 b3       	in	r18, 0x15	; 21
 6d2:	81 e0       	ldi	r24, 0x01	; 1
 6d4:	90 e0       	ldi	r25, 0x00	; 0
 6d6:	02 c0       	rjmp	.+4      	; 0x6dc <DIO_setpinvalue+0xce>
 6d8:	88 0f       	add	r24, r24
 6da:	99 1f       	adc	r25, r25
 6dc:	6a 95       	dec	r22
 6de:	e2 f7       	brpl	.-8      	; 0x6d8 <DIO_setpinvalue+0xca>
 6e0:	82 2b       	or	r24, r18
 6e2:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 6e4:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 6e6:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
 6e8:	22 b3       	in	r18, 0x12	; 18
 6ea:	81 e0       	ldi	r24, 0x01	; 1
 6ec:	90 e0       	ldi	r25, 0x00	; 0
 6ee:	02 c0       	rjmp	.+4      	; 0x6f4 <DIO_setpinvalue+0xe6>
 6f0:	88 0f       	add	r24, r24
 6f2:	99 1f       	adc	r25, r25
 6f4:	6a 95       	dec	r22
 6f6:	e2 f7       	brpl	.-8      	; 0x6f0 <DIO_setpinvalue+0xe2>
 6f8:	82 2b       	or	r24, r18
 6fa:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
 6fc:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
 6fe:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 704:	81 e0       	ldi	r24, 0x01	; 1
 706:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
 708:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
 70a:	08 95       	ret

0000070c <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
 70c:	83 b7       	in	r24, 0x33	; 51
 70e:	8f 77       	andi	r24, 0x7F	; 127
 710:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
 712:	83 b7       	in	r24, 0x33	; 51
 714:	8f 7b       	andi	r24, 0xBF	; 191
 716:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
 718:	83 b7       	in	r24, 0x33	; 51
 71a:	87 7f       	andi	r24, 0xF7	; 247
 71c:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
 71e:	83 b7       	in	r24, 0x33	; 51
 720:	8f 7e       	andi	r24, 0xEF	; 239
 722:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
 724:	83 b7       	in	r24, 0x33	; 51
 726:	8f 7d       	andi	r24, 0xDF	; 223
 728:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
 72a:	80 e0       	ldi	r24, 0x00	; 0
 72c:	08 95       	ret

0000072e <TMR0_start>:
{
	TMR0_start_error en_a_startstatus = VALID_START ; /** VARIABLE TO RETURN THE STATUS OF START **/
	
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024
	
	set_bit(TCCR0 , 0);
 72e:	83 b7       	in	r24, 0x33	; 51
 730:	81 60       	ori	r24, 0x01	; 1
 732:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 734:	83 b7       	in	r24, 0x33	; 51
 736:	8d 7f       	andi	r24, 0xFD	; 253
 738:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0 , 2);
 73a:	83 b7       	in	r24, 0x33	; 51
 73c:	84 60       	ori	r24, 0x04	; 4
 73e:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
 740:	80 e0       	ldi	r24, 0x00	; 0
 742:	08 95       	ret

00000744 <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
 744:	83 b7       	in	r24, 0x33	; 51
 746:	8e 7f       	andi	r24, 0xFE	; 254
 748:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 74a:	83 b7       	in	r24, 0x33	; 51
 74c:	8d 7f       	andi	r24, 0xFD	; 253
 74e:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 750:	83 b7       	in	r24, 0x33	; 51
 752:	8b 7f       	andi	r24, 0xFB	; 251
 754:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
 756:	80 e0       	ldi	r24, 0x00	; 0
 758:	08 95       	ret

0000075a <TMR0_delayms>:
	/******************************************************************************************/
	/**               THIS CALCULATIONS CONFIGURED AS F_CPU   16 MHZ                         **/
	/******************************************************************************************/
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024  /** CHECK THE PRESCALLER FROM CONFIG FILE **/
	 
        u32_gs_tmr0nuofovs = (u32_a_delayms / 16.384);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/ 
 75a:	0e 94 8a 04 	call	0x914	; 0x914 <__floatunsisf>
 75e:	2f e6       	ldi	r18, 0x6F	; 111
 760:	32 e1       	ldi	r19, 0x12	; 18
 762:	43 e8       	ldi	r20, 0x83	; 131
 764:	51 e4       	ldi	r21, 0x41	; 65
 766:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <__divsf3>
 76a:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__fixunssfsi>
 76e:	60 93 7c 00 	sts	0x007C, r22	; 0x80007c <u32_gs_tmr0nuofovs>
 772:	70 93 7d 00 	sts	0x007D, r23	; 0x80007d <u32_gs_tmr0nuofovs+0x1>
 776:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <u32_gs_tmr0nuofovs+0x2>
 77a:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <u32_gs_tmr0nuofovs+0x3>
	
        TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
 77e:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
 780:	0e 94 97 03 	call	0x72e	; 0x72e <TMR0_start>
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
 784:	40 e0       	ldi	r20, 0x00	; 0
 786:	50 e0       	ldi	r21, 0x00	; 0
 788:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 78a:	0a c0       	rjmp	.+20     	; 0x7a0 <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
 78c:	08 b6       	in	r0, 0x38	; 56
 78e:	00 fe       	sbrs	r0, 0
 790:	fd cf       	rjmp	.-6      	; 0x78c <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
 792:	88 b7       	in	r24, 0x38	; 56
 794:	81 60       	ori	r24, 0x01	; 1
 796:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
 798:	4f 5f       	subi	r20, 0xFF	; 255
 79a:	5f 4f       	sbci	r21, 0xFF	; 255
 79c:	6f 4f       	sbci	r22, 0xFF	; 255
 79e:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 7a0:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <u32_gs_tmr0nuofovs>
 7a4:	90 91 7d 00 	lds	r25, 0x007D	; 0x80007d <u32_gs_tmr0nuofovs+0x1>
 7a8:	a0 91 7e 00 	lds	r26, 0x007E	; 0x80007e <u32_gs_tmr0nuofovs+0x2>
 7ac:	b0 91 7f 00 	lds	r27, 0x007F	; 0x80007f <u32_gs_tmr0nuofovs+0x3>
 7b0:	48 17       	cp	r20, r24
 7b2:	59 07       	cpc	r21, r25
 7b4:	6a 07       	cpc	r22, r26
 7b6:	7b 07       	cpc	r23, r27
 7b8:	48 f3       	brcs	.-46     	; 0x78c <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
 7ba:	10 92 7c 00 	sts	0x007C, r1	; 0x80007c <u32_gs_tmr0nuofovs>
 7be:	10 92 7d 00 	sts	0x007D, r1	; 0x80007d <u32_gs_tmr0nuofovs+0x1>
 7c2:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <u32_gs_tmr0nuofovs+0x2>
 7c6:	10 92 7f 00 	sts	0x007F, r1	; 0x80007f <u32_gs_tmr0nuofovs+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
 7ca:	0e 94 a2 03 	call	0x744	; 0x744 <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
 7ce:	80 e0       	ldi	r24, 0x00	; 0
 7d0:	08 95       	ret

000007d2 <__divsf3>:
 7d2:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__divsf3x>
 7d6:	0c 94 de 04 	jmp	0x9bc	; 0x9bc <__fp_round>
 7da:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__fp_pscB>
 7de:	58 f0       	brcs	.+22     	; 0x7f6 <__divsf3+0x24>
 7e0:	0e 94 d0 04 	call	0x9a0	; 0x9a0 <__fp_pscA>
 7e4:	40 f0       	brcs	.+16     	; 0x7f6 <__divsf3+0x24>
 7e6:	29 f4       	brne	.+10     	; 0x7f2 <__divsf3+0x20>
 7e8:	5f 3f       	cpi	r21, 0xFF	; 255
 7ea:	29 f0       	breq	.+10     	; 0x7f6 <__divsf3+0x24>
 7ec:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__fp_inf>
 7f0:	51 11       	cpse	r21, r1
 7f2:	0c 94 12 05 	jmp	0xa24	; 0xa24 <__fp_szero>
 7f6:	0c 94 cd 04 	jmp	0x99a	; 0x99a <__fp_nan>

000007fa <__divsf3x>:
 7fa:	0e 94 ef 04 	call	0x9de	; 0x9de <__fp_split3>
 7fe:	68 f3       	brcs	.-38     	; 0x7da <__divsf3+0x8>

00000800 <__divsf3_pse>:
 800:	99 23       	and	r25, r25
 802:	b1 f3       	breq	.-20     	; 0x7f0 <__divsf3+0x1e>
 804:	55 23       	and	r21, r21
 806:	91 f3       	breq	.-28     	; 0x7ec <__divsf3+0x1a>
 808:	95 1b       	sub	r25, r21
 80a:	55 0b       	sbc	r21, r21
 80c:	bb 27       	eor	r27, r27
 80e:	aa 27       	eor	r26, r26
 810:	62 17       	cp	r22, r18
 812:	73 07       	cpc	r23, r19
 814:	84 07       	cpc	r24, r20
 816:	38 f0       	brcs	.+14     	; 0x826 <__divsf3_pse+0x26>
 818:	9f 5f       	subi	r25, 0xFF	; 255
 81a:	5f 4f       	sbci	r21, 0xFF	; 255
 81c:	22 0f       	add	r18, r18
 81e:	33 1f       	adc	r19, r19
 820:	44 1f       	adc	r20, r20
 822:	aa 1f       	adc	r26, r26
 824:	a9 f3       	breq	.-22     	; 0x810 <__divsf3_pse+0x10>
 826:	35 d0       	rcall	.+106    	; 0x892 <__stack+0x33>
 828:	0e 2e       	mov	r0, r30
 82a:	3a f0       	brmi	.+14     	; 0x83a <__divsf3_pse+0x3a>
 82c:	e0 e8       	ldi	r30, 0x80	; 128
 82e:	32 d0       	rcall	.+100    	; 0x894 <__stack+0x35>
 830:	91 50       	subi	r25, 0x01	; 1
 832:	50 40       	sbci	r21, 0x00	; 0
 834:	e6 95       	lsr	r30
 836:	00 1c       	adc	r0, r0
 838:	ca f7       	brpl	.-14     	; 0x82c <__divsf3_pse+0x2c>
 83a:	2b d0       	rcall	.+86     	; 0x892 <__stack+0x33>
 83c:	fe 2f       	mov	r31, r30
 83e:	29 d0       	rcall	.+82     	; 0x892 <__stack+0x33>
 840:	66 0f       	add	r22, r22
 842:	77 1f       	adc	r23, r23
 844:	88 1f       	adc	r24, r24
 846:	bb 1f       	adc	r27, r27
 848:	26 17       	cp	r18, r22
 84a:	37 07       	cpc	r19, r23
 84c:	48 07       	cpc	r20, r24
 84e:	ab 07       	cpc	r26, r27
 850:	b0 e8       	ldi	r27, 0x80	; 128
 852:	09 f0       	breq	.+2      	; 0x856 <__divsf3_pse+0x56>
 854:	bb 0b       	sbc	r27, r27
 856:	80 2d       	mov	r24, r0
 858:	bf 01       	movw	r22, r30
 85a:	ff 27       	eor	r31, r31
 85c:	93 58       	subi	r25, 0x83	; 131
 85e:	5f 4f       	sbci	r21, 0xFF	; 255
 860:	3a f0       	brmi	.+14     	; 0x870 <__stack+0x11>
 862:	9e 3f       	cpi	r25, 0xFE	; 254
 864:	51 05       	cpc	r21, r1
 866:	78 f0       	brcs	.+30     	; 0x886 <__stack+0x27>
 868:	0c 94 c7 04 	jmp	0x98e	; 0x98e <__fp_inf>
 86c:	0c 94 12 05 	jmp	0xa24	; 0xa24 <__fp_szero>
 870:	5f 3f       	cpi	r21, 0xFF	; 255
 872:	e4 f3       	brlt	.-8      	; 0x86c <__stack+0xd>
 874:	98 3e       	cpi	r25, 0xE8	; 232
 876:	d4 f3       	brlt	.-12     	; 0x86c <__stack+0xd>
 878:	86 95       	lsr	r24
 87a:	77 95       	ror	r23
 87c:	67 95       	ror	r22
 87e:	b7 95       	ror	r27
 880:	f7 95       	ror	r31
 882:	9f 5f       	subi	r25, 0xFF	; 255
 884:	c9 f7       	brne	.-14     	; 0x878 <__stack+0x19>
 886:	88 0f       	add	r24, r24
 888:	91 1d       	adc	r25, r1
 88a:	96 95       	lsr	r25
 88c:	87 95       	ror	r24
 88e:	97 f9       	bld	r25, 7
 890:	08 95       	ret
 892:	e1 e0       	ldi	r30, 0x01	; 1
 894:	66 0f       	add	r22, r22
 896:	77 1f       	adc	r23, r23
 898:	88 1f       	adc	r24, r24
 89a:	bb 1f       	adc	r27, r27
 89c:	62 17       	cp	r22, r18
 89e:	73 07       	cpc	r23, r19
 8a0:	84 07       	cpc	r24, r20
 8a2:	ba 07       	cpc	r27, r26
 8a4:	20 f0       	brcs	.+8      	; 0x8ae <__stack+0x4f>
 8a6:	62 1b       	sub	r22, r18
 8a8:	73 0b       	sbc	r23, r19
 8aa:	84 0b       	sbc	r24, r20
 8ac:	ba 0b       	sbc	r27, r26
 8ae:	ee 1f       	adc	r30, r30
 8b0:	88 f7       	brcc	.-30     	; 0x894 <__stack+0x35>
 8b2:	e0 95       	com	r30
 8b4:	08 95       	ret

000008b6 <__fixunssfsi>:
 8b6:	0e 94 f7 04 	call	0x9ee	; 0x9ee <__fp_splitA>
 8ba:	88 f0       	brcs	.+34     	; 0x8de <__fixunssfsi+0x28>
 8bc:	9f 57       	subi	r25, 0x7F	; 127
 8be:	98 f0       	brcs	.+38     	; 0x8e6 <__fixunssfsi+0x30>
 8c0:	b9 2f       	mov	r27, r25
 8c2:	99 27       	eor	r25, r25
 8c4:	b7 51       	subi	r27, 0x17	; 23
 8c6:	b0 f0       	brcs	.+44     	; 0x8f4 <__fixunssfsi+0x3e>
 8c8:	e1 f0       	breq	.+56     	; 0x902 <__fixunssfsi+0x4c>
 8ca:	66 0f       	add	r22, r22
 8cc:	77 1f       	adc	r23, r23
 8ce:	88 1f       	adc	r24, r24
 8d0:	99 1f       	adc	r25, r25
 8d2:	1a f0       	brmi	.+6      	; 0x8da <__fixunssfsi+0x24>
 8d4:	ba 95       	dec	r27
 8d6:	c9 f7       	brne	.-14     	; 0x8ca <__fixunssfsi+0x14>
 8d8:	14 c0       	rjmp	.+40     	; 0x902 <__fixunssfsi+0x4c>
 8da:	b1 30       	cpi	r27, 0x01	; 1
 8dc:	91 f0       	breq	.+36     	; 0x902 <__fixunssfsi+0x4c>
 8de:	0e 94 11 05 	call	0xa22	; 0xa22 <__fp_zero>
 8e2:	b1 e0       	ldi	r27, 0x01	; 1
 8e4:	08 95       	ret
 8e6:	0c 94 11 05 	jmp	0xa22	; 0xa22 <__fp_zero>
 8ea:	67 2f       	mov	r22, r23
 8ec:	78 2f       	mov	r23, r24
 8ee:	88 27       	eor	r24, r24
 8f0:	b8 5f       	subi	r27, 0xF8	; 248
 8f2:	39 f0       	breq	.+14     	; 0x902 <__fixunssfsi+0x4c>
 8f4:	b9 3f       	cpi	r27, 0xF9	; 249
 8f6:	cc f3       	brlt	.-14     	; 0x8ea <__fixunssfsi+0x34>
 8f8:	86 95       	lsr	r24
 8fa:	77 95       	ror	r23
 8fc:	67 95       	ror	r22
 8fe:	b3 95       	inc	r27
 900:	d9 f7       	brne	.-10     	; 0x8f8 <__fixunssfsi+0x42>
 902:	3e f4       	brtc	.+14     	; 0x912 <__fixunssfsi+0x5c>
 904:	90 95       	com	r25
 906:	80 95       	com	r24
 908:	70 95       	com	r23
 90a:	61 95       	neg	r22
 90c:	7f 4f       	sbci	r23, 0xFF	; 255
 90e:	8f 4f       	sbci	r24, 0xFF	; 255
 910:	9f 4f       	sbci	r25, 0xFF	; 255
 912:	08 95       	ret

00000914 <__floatunsisf>:
 914:	e8 94       	clt
 916:	09 c0       	rjmp	.+18     	; 0x92a <__floatsisf+0x12>

00000918 <__floatsisf>:
 918:	97 fb       	bst	r25, 7
 91a:	3e f4       	brtc	.+14     	; 0x92a <__floatsisf+0x12>
 91c:	90 95       	com	r25
 91e:	80 95       	com	r24
 920:	70 95       	com	r23
 922:	61 95       	neg	r22
 924:	7f 4f       	sbci	r23, 0xFF	; 255
 926:	8f 4f       	sbci	r24, 0xFF	; 255
 928:	9f 4f       	sbci	r25, 0xFF	; 255
 92a:	99 23       	and	r25, r25
 92c:	a9 f0       	breq	.+42     	; 0x958 <__floatsisf+0x40>
 92e:	f9 2f       	mov	r31, r25
 930:	96 e9       	ldi	r25, 0x96	; 150
 932:	bb 27       	eor	r27, r27
 934:	93 95       	inc	r25
 936:	f6 95       	lsr	r31
 938:	87 95       	ror	r24
 93a:	77 95       	ror	r23
 93c:	67 95       	ror	r22
 93e:	b7 95       	ror	r27
 940:	f1 11       	cpse	r31, r1
 942:	f8 cf       	rjmp	.-16     	; 0x934 <__floatsisf+0x1c>
 944:	fa f4       	brpl	.+62     	; 0x984 <__floatsisf+0x6c>
 946:	bb 0f       	add	r27, r27
 948:	11 f4       	brne	.+4      	; 0x94e <__floatsisf+0x36>
 94a:	60 ff       	sbrs	r22, 0
 94c:	1b c0       	rjmp	.+54     	; 0x984 <__floatsisf+0x6c>
 94e:	6f 5f       	subi	r22, 0xFF	; 255
 950:	7f 4f       	sbci	r23, 0xFF	; 255
 952:	8f 4f       	sbci	r24, 0xFF	; 255
 954:	9f 4f       	sbci	r25, 0xFF	; 255
 956:	16 c0       	rjmp	.+44     	; 0x984 <__floatsisf+0x6c>
 958:	88 23       	and	r24, r24
 95a:	11 f0       	breq	.+4      	; 0x960 <__floatsisf+0x48>
 95c:	96 e9       	ldi	r25, 0x96	; 150
 95e:	11 c0       	rjmp	.+34     	; 0x982 <__floatsisf+0x6a>
 960:	77 23       	and	r23, r23
 962:	21 f0       	breq	.+8      	; 0x96c <__floatsisf+0x54>
 964:	9e e8       	ldi	r25, 0x8E	; 142
 966:	87 2f       	mov	r24, r23
 968:	76 2f       	mov	r23, r22
 96a:	05 c0       	rjmp	.+10     	; 0x976 <__floatsisf+0x5e>
 96c:	66 23       	and	r22, r22
 96e:	71 f0       	breq	.+28     	; 0x98c <__floatsisf+0x74>
 970:	96 e8       	ldi	r25, 0x86	; 134
 972:	86 2f       	mov	r24, r22
 974:	70 e0       	ldi	r23, 0x00	; 0
 976:	60 e0       	ldi	r22, 0x00	; 0
 978:	2a f0       	brmi	.+10     	; 0x984 <__floatsisf+0x6c>
 97a:	9a 95       	dec	r25
 97c:	66 0f       	add	r22, r22
 97e:	77 1f       	adc	r23, r23
 980:	88 1f       	adc	r24, r24
 982:	da f7       	brpl	.-10     	; 0x97a <__floatsisf+0x62>
 984:	88 0f       	add	r24, r24
 986:	96 95       	lsr	r25
 988:	87 95       	ror	r24
 98a:	97 f9       	bld	r25, 7
 98c:	08 95       	ret

0000098e <__fp_inf>:
 98e:	97 f9       	bld	r25, 7
 990:	9f 67       	ori	r25, 0x7F	; 127
 992:	80 e8       	ldi	r24, 0x80	; 128
 994:	70 e0       	ldi	r23, 0x00	; 0
 996:	60 e0       	ldi	r22, 0x00	; 0
 998:	08 95       	ret

0000099a <__fp_nan>:
 99a:	9f ef       	ldi	r25, 0xFF	; 255
 99c:	80 ec       	ldi	r24, 0xC0	; 192
 99e:	08 95       	ret

000009a0 <__fp_pscA>:
 9a0:	00 24       	eor	r0, r0
 9a2:	0a 94       	dec	r0
 9a4:	16 16       	cp	r1, r22
 9a6:	17 06       	cpc	r1, r23
 9a8:	18 06       	cpc	r1, r24
 9aa:	09 06       	cpc	r0, r25
 9ac:	08 95       	ret

000009ae <__fp_pscB>:
 9ae:	00 24       	eor	r0, r0
 9b0:	0a 94       	dec	r0
 9b2:	12 16       	cp	r1, r18
 9b4:	13 06       	cpc	r1, r19
 9b6:	14 06       	cpc	r1, r20
 9b8:	05 06       	cpc	r0, r21
 9ba:	08 95       	ret

000009bc <__fp_round>:
 9bc:	09 2e       	mov	r0, r25
 9be:	03 94       	inc	r0
 9c0:	00 0c       	add	r0, r0
 9c2:	11 f4       	brne	.+4      	; 0x9c8 <__fp_round+0xc>
 9c4:	88 23       	and	r24, r24
 9c6:	52 f0       	brmi	.+20     	; 0x9dc <__fp_round+0x20>
 9c8:	bb 0f       	add	r27, r27
 9ca:	40 f4       	brcc	.+16     	; 0x9dc <__fp_round+0x20>
 9cc:	bf 2b       	or	r27, r31
 9ce:	11 f4       	brne	.+4      	; 0x9d4 <__fp_round+0x18>
 9d0:	60 ff       	sbrs	r22, 0
 9d2:	04 c0       	rjmp	.+8      	; 0x9dc <__fp_round+0x20>
 9d4:	6f 5f       	subi	r22, 0xFF	; 255
 9d6:	7f 4f       	sbci	r23, 0xFF	; 255
 9d8:	8f 4f       	sbci	r24, 0xFF	; 255
 9da:	9f 4f       	sbci	r25, 0xFF	; 255
 9dc:	08 95       	ret

000009de <__fp_split3>:
 9de:	57 fd       	sbrc	r21, 7
 9e0:	90 58       	subi	r25, 0x80	; 128
 9e2:	44 0f       	add	r20, r20
 9e4:	55 1f       	adc	r21, r21
 9e6:	59 f0       	breq	.+22     	; 0x9fe <__fp_splitA+0x10>
 9e8:	5f 3f       	cpi	r21, 0xFF	; 255
 9ea:	71 f0       	breq	.+28     	; 0xa08 <__fp_splitA+0x1a>
 9ec:	47 95       	ror	r20

000009ee <__fp_splitA>:
 9ee:	88 0f       	add	r24, r24
 9f0:	97 fb       	bst	r25, 7
 9f2:	99 1f       	adc	r25, r25
 9f4:	61 f0       	breq	.+24     	; 0xa0e <__fp_splitA+0x20>
 9f6:	9f 3f       	cpi	r25, 0xFF	; 255
 9f8:	79 f0       	breq	.+30     	; 0xa18 <__fp_splitA+0x2a>
 9fa:	87 95       	ror	r24
 9fc:	08 95       	ret
 9fe:	12 16       	cp	r1, r18
 a00:	13 06       	cpc	r1, r19
 a02:	14 06       	cpc	r1, r20
 a04:	55 1f       	adc	r21, r21
 a06:	f2 cf       	rjmp	.-28     	; 0x9ec <__fp_split3+0xe>
 a08:	46 95       	lsr	r20
 a0a:	f1 df       	rcall	.-30     	; 0x9ee <__fp_splitA>
 a0c:	08 c0       	rjmp	.+16     	; 0xa1e <__fp_splitA+0x30>
 a0e:	16 16       	cp	r1, r22
 a10:	17 06       	cpc	r1, r23
 a12:	18 06       	cpc	r1, r24
 a14:	99 1f       	adc	r25, r25
 a16:	f1 cf       	rjmp	.-30     	; 0x9fa <__fp_splitA+0xc>
 a18:	86 95       	lsr	r24
 a1a:	71 05       	cpc	r23, r1
 a1c:	61 05       	cpc	r22, r1
 a1e:	08 94       	sec
 a20:	08 95       	ret

00000a22 <__fp_zero>:
 a22:	e8 94       	clt

00000a24 <__fp_szero>:
 a24:	bb 27       	eor	r27, r27
 a26:	66 27       	eor	r22, r22
 a28:	77 27       	eor	r23, r23
 a2a:	cb 01       	movw	r24, r22
 a2c:	97 f9       	bld	r25, 7
 a2e:	08 95       	ret

00000a30 <__divmodsi4>:
 a30:	05 2e       	mov	r0, r21
 a32:	97 fb       	bst	r25, 7
 a34:	1e f4       	brtc	.+6      	; 0xa3c <__divmodsi4+0xc>
 a36:	00 94       	com	r0
 a38:	0e 94 2f 05 	call	0xa5e	; 0xa5e <__negsi2>
 a3c:	57 fd       	sbrc	r21, 7
 a3e:	07 d0       	rcall	.+14     	; 0xa4e <__divmodsi4_neg2>
 a40:	0e 94 37 05 	call	0xa6e	; 0xa6e <__udivmodsi4>
 a44:	07 fc       	sbrc	r0, 7
 a46:	03 d0       	rcall	.+6      	; 0xa4e <__divmodsi4_neg2>
 a48:	4e f4       	brtc	.+18     	; 0xa5c <__divmodsi4_exit>
 a4a:	0c 94 2f 05 	jmp	0xa5e	; 0xa5e <__negsi2>

00000a4e <__divmodsi4_neg2>:
 a4e:	50 95       	com	r21
 a50:	40 95       	com	r20
 a52:	30 95       	com	r19
 a54:	21 95       	neg	r18
 a56:	3f 4f       	sbci	r19, 0xFF	; 255
 a58:	4f 4f       	sbci	r20, 0xFF	; 255
 a5a:	5f 4f       	sbci	r21, 0xFF	; 255

00000a5c <__divmodsi4_exit>:
 a5c:	08 95       	ret

00000a5e <__negsi2>:
 a5e:	90 95       	com	r25
 a60:	80 95       	com	r24
 a62:	70 95       	com	r23
 a64:	61 95       	neg	r22
 a66:	7f 4f       	sbci	r23, 0xFF	; 255
 a68:	8f 4f       	sbci	r24, 0xFF	; 255
 a6a:	9f 4f       	sbci	r25, 0xFF	; 255
 a6c:	08 95       	ret

00000a6e <__udivmodsi4>:
 a6e:	a1 e2       	ldi	r26, 0x21	; 33
 a70:	1a 2e       	mov	r1, r26
 a72:	aa 1b       	sub	r26, r26
 a74:	bb 1b       	sub	r27, r27
 a76:	fd 01       	movw	r30, r26
 a78:	0d c0       	rjmp	.+26     	; 0xa94 <__udivmodsi4_ep>

00000a7a <__udivmodsi4_loop>:
 a7a:	aa 1f       	adc	r26, r26
 a7c:	bb 1f       	adc	r27, r27
 a7e:	ee 1f       	adc	r30, r30
 a80:	ff 1f       	adc	r31, r31
 a82:	a2 17       	cp	r26, r18
 a84:	b3 07       	cpc	r27, r19
 a86:	e4 07       	cpc	r30, r20
 a88:	f5 07       	cpc	r31, r21
 a8a:	20 f0       	brcs	.+8      	; 0xa94 <__udivmodsi4_ep>
 a8c:	a2 1b       	sub	r26, r18
 a8e:	b3 0b       	sbc	r27, r19
 a90:	e4 0b       	sbc	r30, r20
 a92:	f5 0b       	sbc	r31, r21

00000a94 <__udivmodsi4_ep>:
 a94:	66 1f       	adc	r22, r22
 a96:	77 1f       	adc	r23, r23
 a98:	88 1f       	adc	r24, r24
 a9a:	99 1f       	adc	r25, r25
 a9c:	1a 94       	dec	r1
 a9e:	69 f7       	brne	.-38     	; 0xa7a <__udivmodsi4_loop>
 aa0:	60 95       	com	r22
 aa2:	70 95       	com	r23
 aa4:	80 95       	com	r24
 aa6:	90 95       	com	r25
 aa8:	9b 01       	movw	r18, r22
 aaa:	ac 01       	movw	r20, r24
 aac:	bd 01       	movw	r22, r26
 aae:	cf 01       	movw	r24, r30
 ab0:	08 95       	ret

00000ab2 <_exit>:
 ab2:	f8 94       	cli

00000ab4 <__stop_program>:
 ab4:	ff cf       	rjmp	.-2      	; 0xab4 <__stop_program>

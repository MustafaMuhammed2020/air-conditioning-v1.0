
air conditioning.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004d4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000008  00800060  000004d4  00000568  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800068  00800068  00000570  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000570  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005a0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000005dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d3b  00000000  00000000  0000068c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000748  00000000  00000000  000013c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000666  00000000  00000000  00001b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000140  00000000  00000000  00002178  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ed  00000000  00000000  000022b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002d8  00000000  00000000  000028a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000080  00000000  00000000  00002b7d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e4 ed       	ldi	r30, 0xD4	; 212
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 36       	cpi	r26, 0x68	; 104
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a8 e6       	ldi	r26, 0x68	; 104
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ac 36       	cpi	r26, 0x6C	; 108
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  8a:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_8_bit_sendCommand>:
    TMR0_delayms(0.001);
    clear_bit(LCD_Command_Port,EN);
    TMR0_delayms(2);

    return char_send_OK;
}
  92:	85 bb       	out	0x15, r24	; 21
  94:	8b b3       	in	r24, 0x1b	; 27
  96:	8b 7f       	andi	r24, 0xFB	; 251
  98:	8b bb       	out	0x1b, r24	; 27
  9a:	8b b3       	in	r24, 0x1b	; 27
  9c:	8d 7f       	andi	r24, 0xFD	; 253
  9e:	8b bb       	out	0x1b, r24	; 27
  a0:	8b b3       	in	r24, 0x1b	; 27
  a2:	81 60       	ori	r24, 0x01	; 1
  a4:	8b bb       	out	0x1b, r24	; 27
  a6:	60 e0       	ldi	r22, 0x00	; 0
  a8:	70 e0       	ldi	r23, 0x00	; 0
  aa:	cb 01       	movw	r24, r22
  ac:	0e 94 fd 00 	call	0x1fa	; 0x1fa <TMR0_delayms>
  b0:	8b b3       	in	r24, 0x1b	; 27
  b2:	8e 7f       	andi	r24, 0xFE	; 254
  b4:	8b bb       	out	0x1b, r24	; 27
  b6:	60 e0       	ldi	r22, 0x00	; 0
  b8:	70 e0       	ldi	r23, 0x00	; 0
  ba:	cb 01       	movw	r24, r22
  bc:	0e 94 fd 00 	call	0x1fa	; 0x1fa <TMR0_delayms>
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	08 95       	ret

000000c4 <LCD_8_bit_init>:
  c4:	8a b3       	in	r24, 0x1a	; 26
  c6:	84 60       	ori	r24, 0x04	; 4
  c8:	8a bb       	out	0x1a, r24	; 26
  ca:	8a b3       	in	r24, 0x1a	; 26
  cc:	82 60       	ori	r24, 0x02	; 2
  ce:	8a bb       	out	0x1a, r24	; 26
  d0:	8a b3       	in	r24, 0x1a	; 26
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	8a bb       	out	0x1a, r24	; 26
  d6:	84 b3       	in	r24, 0x14	; 20
  d8:	8f ef       	ldi	r24, 0xFF	; 255
  da:	84 bb       	out	0x14, r24	; 20
  dc:	64 e1       	ldi	r22, 0x14	; 20
  de:	70 e0       	ldi	r23, 0x00	; 0
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 fd 00 	call	0x1fa	; 0x1fa <TMR0_delayms>
  e8:	88 e3       	ldi	r24, 0x38	; 56
  ea:	0e 94 49 00 	call	0x92	; 0x92 <LCD_8_bit_sendCommand>
  ee:	8c e0       	ldi	r24, 0x0C	; 12
  f0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_8_bit_sendCommand>
  f4:	86 e0       	ldi	r24, 0x06	; 6
  f6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_8_bit_sendCommand>
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	0e 94 49 00 	call	0x92	; 0x92 <LCD_8_bit_sendCommand>
 100:	80 e8       	ldi	r24, 0x80	; 128
 102:	0e 94 49 00 	call	0x92	; 0x92 <LCD_8_bit_sendCommand>
 106:	80 e0       	ldi	r24, 0x00	; 0
 108:	08 95       	ret

0000010a <LCD_8_bit_sendChar>:
 10a:	85 bb       	out	0x15, r24	; 21
 10c:	8b b3       	in	r24, 0x1b	; 27
 10e:	84 60       	ori	r24, 0x04	; 4
 110:	8b bb       	out	0x1b, r24	; 27
 112:	8b b3       	in	r24, 0x1b	; 27
 114:	8d 7f       	andi	r24, 0xFD	; 253
 116:	8b bb       	out	0x1b, r24	; 27
 118:	8b b3       	in	r24, 0x1b	; 27
 11a:	81 60       	ori	r24, 0x01	; 1
 11c:	8b bb       	out	0x1b, r24	; 27
 11e:	60 e0       	ldi	r22, 0x00	; 0
 120:	70 e0       	ldi	r23, 0x00	; 0
 122:	cb 01       	movw	r24, r22
 124:	0e 94 fd 00 	call	0x1fa	; 0x1fa <TMR0_delayms>
 128:	8b b3       	in	r24, 0x1b	; 27
 12a:	8e 7f       	andi	r24, 0xFE	; 254
 12c:	8b bb       	out	0x1b, r24	; 27
 12e:	60 e0       	ldi	r22, 0x00	; 0
 130:	70 e0       	ldi	r23, 0x00	; 0
 132:	cb 01       	movw	r24, r22
 134:	0e 94 fd 00 	call	0x1fa	; 0x1fa <TMR0_delayms>
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	08 95       	ret

0000013c <LCD_sendString>:
/** @brief    Sends string to 8 bit mode LCD                               */
/** @param    *u8_a_string                                                 */
/** @return   string_send_OK                                               */
/***************************************************************************/
LCD_sendString_error LCD_sendString(uint8_t *u8_a_string)
{
 13c:	0f 93       	push	r16
 13e:	1f 93       	push	r17
 140:	cf 93       	push	r28
 142:	df 93       	push	r29
 144:	8c 01       	movw	r16, r24
    uint16_t u16_l_charCount;
    for (u16_l_charCount = 0; u8_a_string[u16_l_charCount] != 0; u16_l_charCount++)
 146:	c0 e0       	ldi	r28, 0x00	; 0
 148:	d0 e0       	ldi	r29, 0x00	; 0
 14a:	03 c0       	rjmp	.+6      	; 0x152 <LCD_sendString+0x16>
    {
		#if LCD_Bit_Mode == 8
			LCD_8_bit_sendChar(u8_a_string[u16_l_charCount]);
 14c:	0e 94 85 00 	call	0x10a	; 0x10a <LCD_8_bit_sendChar>
/** @return   string_send_OK                                               */
/***************************************************************************/
LCD_sendString_error LCD_sendString(uint8_t *u8_a_string)
{
    uint16_t u16_l_charCount;
    for (u16_l_charCount = 0; u8_a_string[u16_l_charCount] != 0; u16_l_charCount++)
 150:	21 96       	adiw	r28, 0x01	; 1
 152:	f8 01       	movw	r30, r16
 154:	ec 0f       	add	r30, r28
 156:	fd 1f       	adc	r31, r29
 158:	80 81       	ld	r24, Z
 15a:	81 11       	cpse	r24, r1
 15c:	f7 cf       	rjmp	.-18     	; 0x14c <LCD_sendString+0x10>
		#elif LCD_Bit_Mode == 4
			LCD_4_bit_sendChar(u8_a_string[u16_l_charCount]);
		#endif
    }
    return string_send_OK;
 15e:	df 91       	pop	r29
 160:	cf 91       	pop	r28
 162:	1f 91       	pop	r17
 164:	0f 91       	pop	r16
 166:	08 95       	ret

00000168 <main>:
/***********************************************************************************/

#include "HAL/lcd/lcd_interface.h"
#include "MCAL/timer0/TMR0_interface.h"
int main(void)
{
 168:	cf 93       	push	r28
 16a:	df 93       	push	r29
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	27 97       	sbiw	r28, 0x07	; 7
 172:	0f b6       	in	r0, 0x3f	; 63
 174:	f8 94       	cli
 176:	de bf       	out	0x3e, r29	; 62
 178:	0f be       	out	0x3f, r0	; 63
 17a:	cd bf       	out	0x3d, r28	; 61
    /* Replace with your application code */
    uint8_t val[] = "Hi! Omar";
    uint8_t val2[]= "Hello!";
 17c:	87 e0       	ldi	r24, 0x07	; 7
 17e:	e0 e6       	ldi	r30, 0x60	; 96
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	de 01       	movw	r26, r28
 184:	11 96       	adiw	r26, 0x01	; 1
 186:	01 90       	ld	r0, Z+
 188:	0d 92       	st	X+, r0
 18a:	8a 95       	dec	r24
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0x1e>
	TMR0_init();
 18e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <TMR0_init>
   // LCD_4_bit_init();
    LCD_8_bit_init();
 192:	0e 94 62 00 	call	0xc4	; 0xc4 <LCD_8_bit_init>
    LCD_sendString(val2);
 196:	ce 01       	movw	r24, r28
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_sendString>
 19e:	ff cf       	rjmp	.-2      	; 0x19e <main+0x36>

000001a0 <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
 1a0:	83 b7       	in	r24, 0x33	; 51
 1a2:	8f 77       	andi	r24, 0x7F	; 127
 1a4:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
 1a6:	83 b7       	in	r24, 0x33	; 51
 1a8:	8f 7b       	andi	r24, 0xBF	; 191
 1aa:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
 1ac:	83 b7       	in	r24, 0x33	; 51
 1ae:	87 7f       	andi	r24, 0xF7	; 247
 1b0:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
 1b2:	83 b7       	in	r24, 0x33	; 51
 1b4:	8f 7e       	andi	r24, 0xEF	; 239
 1b6:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
 1b8:	83 b7       	in	r24, 0x33	; 51
 1ba:	8f 7d       	andi	r24, 0xDF	; 223
 1bc:	83 bf       	out	0x33, r24	; 51
	 
	 en_a_initstatus = VALID_INIT ; /** INITIALIZATION STATUS IS TRUE **/
	 
	 /* ENABLE INTERRUPT */
	 set_bit(SREG , 7);
 1be:	8f b7       	in	r24, 0x3f	; 63
 1c0:	80 68       	ori	r24, 0x80	; 128
 1c2:	8f bf       	out	0x3f, r24	; 63
	 set_bit(TIMSK , 0);
 1c4:	89 b7       	in	r24, 0x39	; 57
 1c6:	81 60       	ori	r24, 0x01	; 1
 1c8:	89 bf       	out	0x39, r24	; 57
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
 1ca:	80 e0       	ldi	r24, 0x00	; 0
 1cc:	08 95       	ret

000001ce <TMR0_start>:
	
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	set_bit(TCCR0 , 0);
 1ce:	83 b7       	in	r24, 0x33	; 51
 1d0:	81 60       	ori	r24, 0x01	; 1
 1d2:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 1d4:	83 b7       	in	r24, 0x33	; 51
 1d6:	8d 7f       	andi	r24, 0xFD	; 253
 1d8:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 1da:	83 b7       	in	r24, 0x33	; 51
 1dc:	8b 7f       	andi	r24, 0xFB	; 251
 1de:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
 1e0:	80 e0       	ldi	r24, 0x00	; 0
 1e2:	08 95       	ret

000001e4 <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
 1e4:	83 b7       	in	r24, 0x33	; 51
 1e6:	8e 7f       	andi	r24, 0xFE	; 254
 1e8:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
 1ea:	83 b7       	in	r24, 0x33	; 51
 1ec:	8d 7f       	andi	r24, 0xFD	; 253
 1ee:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
 1f0:	83 b7       	in	r24, 0x33	; 51
 1f2:	8b 7f       	andi	r24, 0xFB	; 251
 1f4:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
 1f6:	80 e0       	ldi	r24, 0x00	; 0
 1f8:	08 95       	ret

000001fa <TMR0_delayms>:
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	    u32_gs_tmr0nuofovs = (u32_a_delayms / 0.256);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
 1fa:	0e 94 da 01 	call	0x3b4	; 0x3b4 <__floatunsisf>
 1fe:	2f e6       	ldi	r18, 0x6F	; 111
 200:	32 e1       	ldi	r19, 0x12	; 18
 202:	43 e8       	ldi	r20, 0x83	; 131
 204:	5e e3       	ldi	r21, 0x3E	; 62
 206:	0e 94 39 01 	call	0x272	; 0x272 <__divsf3>
 20a:	0e 94 ab 01 	call	0x356	; 0x356 <__fixunssfsi>
 20e:	60 93 68 00 	sts	0x0068, r22	; 0x800068 <__data_end>
 212:	70 93 69 00 	sts	0x0069, r23	; 0x800069 <__data_end+0x1>
 216:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end+0x2>
 21a:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <__data_end+0x3>
	
	    TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
 21e:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
 220:	0e 94 e7 00 	call	0x1ce	; 0x1ce <TMR0_start>
/** @return     TMR0_delay status                                              */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
 224:	40 e0       	ldi	r20, 0x00	; 0
 226:	50 e0       	ldi	r21, 0x00	; 0
 228:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 22a:	0a c0       	rjmp	.+20     	; 0x240 <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
 22c:	08 b6       	in	r0, 0x38	; 56
 22e:	00 fe       	sbrs	r0, 0
 230:	fd cf       	rjmp	.-6      	; 0x22c <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
 232:	88 b7       	in	r24, 0x38	; 56
 234:	81 60       	ori	r24, 0x01	; 1
 236:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
 238:	4f 5f       	subi	r20, 0xFF	; 255
 23a:	5f 4f       	sbci	r21, 0xFF	; 255
 23c:	6f 4f       	sbci	r22, 0xFF	; 255
 23e:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
 240:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__data_end>
 244:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <__data_end+0x1>
 248:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <__data_end+0x2>
 24c:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <__data_end+0x3>
 250:	48 17       	cp	r20, r24
 252:	59 07       	cpc	r21, r25
 254:	6a 07       	cpc	r22, r26
 256:	7b 07       	cpc	r23, r27
 258:	48 f3       	brcs	.-46     	; 0x22c <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
 25a:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__data_end>
 25e:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <__data_end+0x1>
 262:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end+0x2>
 266:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <__data_end+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
 26a:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	08 95       	ret

00000272 <__divsf3>:
 272:	0e 94 4d 01 	call	0x29a	; 0x29a <__divsf3x>
 276:	0c 94 2e 02 	jmp	0x45c	; 0x45c <__fp_round>
 27a:	0e 94 27 02 	call	0x44e	; 0x44e <__fp_pscB>
 27e:	58 f0       	brcs	.+22     	; 0x296 <__divsf3+0x24>
 280:	0e 94 20 02 	call	0x440	; 0x440 <__fp_pscA>
 284:	40 f0       	brcs	.+16     	; 0x296 <__divsf3+0x24>
 286:	29 f4       	brne	.+10     	; 0x292 <__divsf3+0x20>
 288:	5f 3f       	cpi	r21, 0xFF	; 255
 28a:	29 f0       	breq	.+10     	; 0x296 <__divsf3+0x24>
 28c:	0c 94 17 02 	jmp	0x42e	; 0x42e <__fp_inf>
 290:	51 11       	cpse	r21, r1
 292:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__fp_szero>
 296:	0c 94 1d 02 	jmp	0x43a	; 0x43a <__fp_nan>

0000029a <__divsf3x>:
 29a:	0e 94 3f 02 	call	0x47e	; 0x47e <__fp_split3>
 29e:	68 f3       	brcs	.-38     	; 0x27a <__divsf3+0x8>

000002a0 <__divsf3_pse>:
 2a0:	99 23       	and	r25, r25
 2a2:	b1 f3       	breq	.-20     	; 0x290 <__divsf3+0x1e>
 2a4:	55 23       	and	r21, r21
 2a6:	91 f3       	breq	.-28     	; 0x28c <__divsf3+0x1a>
 2a8:	95 1b       	sub	r25, r21
 2aa:	55 0b       	sbc	r21, r21
 2ac:	bb 27       	eor	r27, r27
 2ae:	aa 27       	eor	r26, r26
 2b0:	62 17       	cp	r22, r18
 2b2:	73 07       	cpc	r23, r19
 2b4:	84 07       	cpc	r24, r20
 2b6:	38 f0       	brcs	.+14     	; 0x2c6 <__divsf3_pse+0x26>
 2b8:	9f 5f       	subi	r25, 0xFF	; 255
 2ba:	5f 4f       	sbci	r21, 0xFF	; 255
 2bc:	22 0f       	add	r18, r18
 2be:	33 1f       	adc	r19, r19
 2c0:	44 1f       	adc	r20, r20
 2c2:	aa 1f       	adc	r26, r26
 2c4:	a9 f3       	breq	.-22     	; 0x2b0 <__divsf3_pse+0x10>
 2c6:	35 d0       	rcall	.+106    	; 0x332 <__divsf3_pse+0x92>
 2c8:	0e 2e       	mov	r0, r30
 2ca:	3a f0       	brmi	.+14     	; 0x2da <__divsf3_pse+0x3a>
 2cc:	e0 e8       	ldi	r30, 0x80	; 128
 2ce:	32 d0       	rcall	.+100    	; 0x334 <__divsf3_pse+0x94>
 2d0:	91 50       	subi	r25, 0x01	; 1
 2d2:	50 40       	sbci	r21, 0x00	; 0
 2d4:	e6 95       	lsr	r30
 2d6:	00 1c       	adc	r0, r0
 2d8:	ca f7       	brpl	.-14     	; 0x2cc <__divsf3_pse+0x2c>
 2da:	2b d0       	rcall	.+86     	; 0x332 <__divsf3_pse+0x92>
 2dc:	fe 2f       	mov	r31, r30
 2de:	29 d0       	rcall	.+82     	; 0x332 <__divsf3_pse+0x92>
 2e0:	66 0f       	add	r22, r22
 2e2:	77 1f       	adc	r23, r23
 2e4:	88 1f       	adc	r24, r24
 2e6:	bb 1f       	adc	r27, r27
 2e8:	26 17       	cp	r18, r22
 2ea:	37 07       	cpc	r19, r23
 2ec:	48 07       	cpc	r20, r24
 2ee:	ab 07       	cpc	r26, r27
 2f0:	b0 e8       	ldi	r27, 0x80	; 128
 2f2:	09 f0       	breq	.+2      	; 0x2f6 <__divsf3_pse+0x56>
 2f4:	bb 0b       	sbc	r27, r27
 2f6:	80 2d       	mov	r24, r0
 2f8:	bf 01       	movw	r22, r30
 2fa:	ff 27       	eor	r31, r31
 2fc:	93 58       	subi	r25, 0x83	; 131
 2fe:	5f 4f       	sbci	r21, 0xFF	; 255
 300:	3a f0       	brmi	.+14     	; 0x310 <__divsf3_pse+0x70>
 302:	9e 3f       	cpi	r25, 0xFE	; 254
 304:	51 05       	cpc	r21, r1
 306:	78 f0       	brcs	.+30     	; 0x326 <__divsf3_pse+0x86>
 308:	0c 94 17 02 	jmp	0x42e	; 0x42e <__fp_inf>
 30c:	0c 94 62 02 	jmp	0x4c4	; 0x4c4 <__fp_szero>
 310:	5f 3f       	cpi	r21, 0xFF	; 255
 312:	e4 f3       	brlt	.-8      	; 0x30c <__divsf3_pse+0x6c>
 314:	98 3e       	cpi	r25, 0xE8	; 232
 316:	d4 f3       	brlt	.-12     	; 0x30c <__divsf3_pse+0x6c>
 318:	86 95       	lsr	r24
 31a:	77 95       	ror	r23
 31c:	67 95       	ror	r22
 31e:	b7 95       	ror	r27
 320:	f7 95       	ror	r31
 322:	9f 5f       	subi	r25, 0xFF	; 255
 324:	c9 f7       	brne	.-14     	; 0x318 <__divsf3_pse+0x78>
 326:	88 0f       	add	r24, r24
 328:	91 1d       	adc	r25, r1
 32a:	96 95       	lsr	r25
 32c:	87 95       	ror	r24
 32e:	97 f9       	bld	r25, 7
 330:	08 95       	ret
 332:	e1 e0       	ldi	r30, 0x01	; 1
 334:	66 0f       	add	r22, r22
 336:	77 1f       	adc	r23, r23
 338:	88 1f       	adc	r24, r24
 33a:	bb 1f       	adc	r27, r27
 33c:	62 17       	cp	r22, r18
 33e:	73 07       	cpc	r23, r19
 340:	84 07       	cpc	r24, r20
 342:	ba 07       	cpc	r27, r26
 344:	20 f0       	brcs	.+8      	; 0x34e <__divsf3_pse+0xae>
 346:	62 1b       	sub	r22, r18
 348:	73 0b       	sbc	r23, r19
 34a:	84 0b       	sbc	r24, r20
 34c:	ba 0b       	sbc	r27, r26
 34e:	ee 1f       	adc	r30, r30
 350:	88 f7       	brcc	.-30     	; 0x334 <__divsf3_pse+0x94>
 352:	e0 95       	com	r30
 354:	08 95       	ret

00000356 <__fixunssfsi>:
 356:	0e 94 47 02 	call	0x48e	; 0x48e <__fp_splitA>
 35a:	88 f0       	brcs	.+34     	; 0x37e <__fixunssfsi+0x28>
 35c:	9f 57       	subi	r25, 0x7F	; 127
 35e:	98 f0       	brcs	.+38     	; 0x386 <__fixunssfsi+0x30>
 360:	b9 2f       	mov	r27, r25
 362:	99 27       	eor	r25, r25
 364:	b7 51       	subi	r27, 0x17	; 23
 366:	b0 f0       	brcs	.+44     	; 0x394 <__fixunssfsi+0x3e>
 368:	e1 f0       	breq	.+56     	; 0x3a2 <__fixunssfsi+0x4c>
 36a:	66 0f       	add	r22, r22
 36c:	77 1f       	adc	r23, r23
 36e:	88 1f       	adc	r24, r24
 370:	99 1f       	adc	r25, r25
 372:	1a f0       	brmi	.+6      	; 0x37a <__fixunssfsi+0x24>
 374:	ba 95       	dec	r27
 376:	c9 f7       	brne	.-14     	; 0x36a <__fixunssfsi+0x14>
 378:	14 c0       	rjmp	.+40     	; 0x3a2 <__fixunssfsi+0x4c>
 37a:	b1 30       	cpi	r27, 0x01	; 1
 37c:	91 f0       	breq	.+36     	; 0x3a2 <__fixunssfsi+0x4c>
 37e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <__fp_zero>
 382:	b1 e0       	ldi	r27, 0x01	; 1
 384:	08 95       	ret
 386:	0c 94 61 02 	jmp	0x4c2	; 0x4c2 <__fp_zero>
 38a:	67 2f       	mov	r22, r23
 38c:	78 2f       	mov	r23, r24
 38e:	88 27       	eor	r24, r24
 390:	b8 5f       	subi	r27, 0xF8	; 248
 392:	39 f0       	breq	.+14     	; 0x3a2 <__fixunssfsi+0x4c>
 394:	b9 3f       	cpi	r27, 0xF9	; 249
 396:	cc f3       	brlt	.-14     	; 0x38a <__fixunssfsi+0x34>
 398:	86 95       	lsr	r24
 39a:	77 95       	ror	r23
 39c:	67 95       	ror	r22
 39e:	b3 95       	inc	r27
 3a0:	d9 f7       	brne	.-10     	; 0x398 <__fixunssfsi+0x42>
 3a2:	3e f4       	brtc	.+14     	; 0x3b2 <__fixunssfsi+0x5c>
 3a4:	90 95       	com	r25
 3a6:	80 95       	com	r24
 3a8:	70 95       	com	r23
 3aa:	61 95       	neg	r22
 3ac:	7f 4f       	sbci	r23, 0xFF	; 255
 3ae:	8f 4f       	sbci	r24, 0xFF	; 255
 3b0:	9f 4f       	sbci	r25, 0xFF	; 255
 3b2:	08 95       	ret

000003b4 <__floatunsisf>:
 3b4:	e8 94       	clt
 3b6:	09 c0       	rjmp	.+18     	; 0x3ca <__floatsisf+0x12>

000003b8 <__floatsisf>:
 3b8:	97 fb       	bst	r25, 7
 3ba:	3e f4       	brtc	.+14     	; 0x3ca <__floatsisf+0x12>
 3bc:	90 95       	com	r25
 3be:	80 95       	com	r24
 3c0:	70 95       	com	r23
 3c2:	61 95       	neg	r22
 3c4:	7f 4f       	sbci	r23, 0xFF	; 255
 3c6:	8f 4f       	sbci	r24, 0xFF	; 255
 3c8:	9f 4f       	sbci	r25, 0xFF	; 255
 3ca:	99 23       	and	r25, r25
 3cc:	a9 f0       	breq	.+42     	; 0x3f8 <__floatsisf+0x40>
 3ce:	f9 2f       	mov	r31, r25
 3d0:	96 e9       	ldi	r25, 0x96	; 150
 3d2:	bb 27       	eor	r27, r27
 3d4:	93 95       	inc	r25
 3d6:	f6 95       	lsr	r31
 3d8:	87 95       	ror	r24
 3da:	77 95       	ror	r23
 3dc:	67 95       	ror	r22
 3de:	b7 95       	ror	r27
 3e0:	f1 11       	cpse	r31, r1
 3e2:	f8 cf       	rjmp	.-16     	; 0x3d4 <__floatsisf+0x1c>
 3e4:	fa f4       	brpl	.+62     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3e6:	bb 0f       	add	r27, r27
 3e8:	11 f4       	brne	.+4      	; 0x3ee <__floatsisf+0x36>
 3ea:	60 ff       	sbrs	r22, 0
 3ec:	1b c0       	rjmp	.+54     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3ee:	6f 5f       	subi	r22, 0xFF	; 255
 3f0:	7f 4f       	sbci	r23, 0xFF	; 255
 3f2:	8f 4f       	sbci	r24, 0xFF	; 255
 3f4:	9f 4f       	sbci	r25, 0xFF	; 255
 3f6:	16 c0       	rjmp	.+44     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3f8:	88 23       	and	r24, r24
 3fa:	11 f0       	breq	.+4      	; 0x400 <__EEPROM_REGION_LENGTH__>
 3fc:	96 e9       	ldi	r25, 0x96	; 150
 3fe:	11 c0       	rjmp	.+34     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 400:	77 23       	and	r23, r23
 402:	21 f0       	breq	.+8      	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
 404:	9e e8       	ldi	r25, 0x8E	; 142
 406:	87 2f       	mov	r24, r23
 408:	76 2f       	mov	r23, r22
 40a:	05 c0       	rjmp	.+10     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 40c:	66 23       	and	r22, r22
 40e:	71 f0       	breq	.+28     	; 0x42c <__EEPROM_REGION_LENGTH__+0x2c>
 410:	96 e8       	ldi	r25, 0x86	; 134
 412:	86 2f       	mov	r24, r22
 414:	70 e0       	ldi	r23, 0x00	; 0
 416:	60 e0       	ldi	r22, 0x00	; 0
 418:	2a f0       	brmi	.+10     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 41a:	9a 95       	dec	r25
 41c:	66 0f       	add	r22, r22
 41e:	77 1f       	adc	r23, r23
 420:	88 1f       	adc	r24, r24
 422:	da f7       	brpl	.-10     	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 424:	88 0f       	add	r24, r24
 426:	96 95       	lsr	r25
 428:	87 95       	ror	r24
 42a:	97 f9       	bld	r25, 7
 42c:	08 95       	ret

0000042e <__fp_inf>:
 42e:	97 f9       	bld	r25, 7
 430:	9f 67       	ori	r25, 0x7F	; 127
 432:	80 e8       	ldi	r24, 0x80	; 128
 434:	70 e0       	ldi	r23, 0x00	; 0
 436:	60 e0       	ldi	r22, 0x00	; 0
 438:	08 95       	ret

0000043a <__fp_nan>:
 43a:	9f ef       	ldi	r25, 0xFF	; 255
 43c:	80 ec       	ldi	r24, 0xC0	; 192
 43e:	08 95       	ret

00000440 <__fp_pscA>:
 440:	00 24       	eor	r0, r0
 442:	0a 94       	dec	r0
 444:	16 16       	cp	r1, r22
 446:	17 06       	cpc	r1, r23
 448:	18 06       	cpc	r1, r24
 44a:	09 06       	cpc	r0, r25
 44c:	08 95       	ret

0000044e <__fp_pscB>:
 44e:	00 24       	eor	r0, r0
 450:	0a 94       	dec	r0
 452:	12 16       	cp	r1, r18
 454:	13 06       	cpc	r1, r19
 456:	14 06       	cpc	r1, r20
 458:	05 06       	cpc	r0, r21
 45a:	08 95       	ret

0000045c <__fp_round>:
 45c:	09 2e       	mov	r0, r25
 45e:	03 94       	inc	r0
 460:	00 0c       	add	r0, r0
 462:	11 f4       	brne	.+4      	; 0x468 <__fp_round+0xc>
 464:	88 23       	and	r24, r24
 466:	52 f0       	brmi	.+20     	; 0x47c <__fp_round+0x20>
 468:	bb 0f       	add	r27, r27
 46a:	40 f4       	brcc	.+16     	; 0x47c <__fp_round+0x20>
 46c:	bf 2b       	or	r27, r31
 46e:	11 f4       	brne	.+4      	; 0x474 <__fp_round+0x18>
 470:	60 ff       	sbrs	r22, 0
 472:	04 c0       	rjmp	.+8      	; 0x47c <__fp_round+0x20>
 474:	6f 5f       	subi	r22, 0xFF	; 255
 476:	7f 4f       	sbci	r23, 0xFF	; 255
 478:	8f 4f       	sbci	r24, 0xFF	; 255
 47a:	9f 4f       	sbci	r25, 0xFF	; 255
 47c:	08 95       	ret

0000047e <__fp_split3>:
 47e:	57 fd       	sbrc	r21, 7
 480:	90 58       	subi	r25, 0x80	; 128
 482:	44 0f       	add	r20, r20
 484:	55 1f       	adc	r21, r21
 486:	59 f0       	breq	.+22     	; 0x49e <__fp_splitA+0x10>
 488:	5f 3f       	cpi	r21, 0xFF	; 255
 48a:	71 f0       	breq	.+28     	; 0x4a8 <__fp_splitA+0x1a>
 48c:	47 95       	ror	r20

0000048e <__fp_splitA>:
 48e:	88 0f       	add	r24, r24
 490:	97 fb       	bst	r25, 7
 492:	99 1f       	adc	r25, r25
 494:	61 f0       	breq	.+24     	; 0x4ae <__fp_splitA+0x20>
 496:	9f 3f       	cpi	r25, 0xFF	; 255
 498:	79 f0       	breq	.+30     	; 0x4b8 <__fp_splitA+0x2a>
 49a:	87 95       	ror	r24
 49c:	08 95       	ret
 49e:	12 16       	cp	r1, r18
 4a0:	13 06       	cpc	r1, r19
 4a2:	14 06       	cpc	r1, r20
 4a4:	55 1f       	adc	r21, r21
 4a6:	f2 cf       	rjmp	.-28     	; 0x48c <__fp_split3+0xe>
 4a8:	46 95       	lsr	r20
 4aa:	f1 df       	rcall	.-30     	; 0x48e <__fp_splitA>
 4ac:	08 c0       	rjmp	.+16     	; 0x4be <__fp_splitA+0x30>
 4ae:	16 16       	cp	r1, r22
 4b0:	17 06       	cpc	r1, r23
 4b2:	18 06       	cpc	r1, r24
 4b4:	99 1f       	adc	r25, r25
 4b6:	f1 cf       	rjmp	.-30     	; 0x49a <__fp_splitA+0xc>
 4b8:	86 95       	lsr	r24
 4ba:	71 05       	cpc	r23, r1
 4bc:	61 05       	cpc	r22, r1
 4be:	08 94       	sec
 4c0:	08 95       	ret

000004c2 <__fp_zero>:
 4c2:	e8 94       	clt

000004c4 <__fp_szero>:
 4c4:	bb 27       	eor	r27, r27
 4c6:	66 27       	eor	r22, r22
 4c8:	77 27       	eor	r23, r23
 4ca:	cb 01       	movw	r24, r22
 4cc:	97 f9       	bld	r25, 7
 4ce:	08 95       	ret

000004d0 <_exit>:
 4d0:	f8 94       	cli

000004d2 <__stop_program>:
 4d2:	ff cf       	rjmp	.-2      	; 0x4d2 <__stop_program>


air conditioning.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001286  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000a6  00800060  00001286  0000131a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800106  00800106  000013c0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000013c0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000013f0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  0000142c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024c9  00000000  00000000  00001694  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000dbd  00000000  00000000  00003b5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001550  00000000  00000000  0000491a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000654  00000000  00000000  00005e6c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000c27  00000000  00000000  000064c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000148d  00000000  00000000  000070e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001d8  00000000  00000000  00008574  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 c6 04 	jmp	0x98c	; 0x98c <__vector_1>
       8:	0c 94 ed 04 	jmp	0x9da	; 0x9da <__vector_2>
       c:	0c 94 14 05 	jmp	0xa28	; 0xa28 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 64 06 	jmp	0xcc8	; 0xcc8 <__vector_5>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 e8       	ldi	r30, 0x86	; 134
      68:	f2 e1       	ldi	r31, 0x12	; 18
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 30       	cpi	r26, 0x06	; 6
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a6 e0       	ldi	r26, 0x06	; 6
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 31       	cpi	r26, 0x18	; 24
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ea 03 	call	0x7d4	; 0x7d4 <main>
      8a:	0c 94 41 09 	jmp	0x1282	; 0x1282 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <get_current_overflow>:
/** @param  void                                                                  */
/** @return void                                                                  */
/**********************************************************************************/
void get_current_overflow(void)
{
    u16_gs_currentCount++;
      92:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <u16_gs_currentCount>
      96:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <u16_gs_currentCount+0x1>
      9a:	01 96       	adiw	r24, 0x01	; 1
      9c:	90 93 16 01 	sts	0x0116, r25	; 0x800116 <u16_gs_currentCount+0x1>
      a0:	80 93 15 01 	sts	0x0115, r24	; 0x800115 <u16_gs_currentCount>
      a4:	08 95       	ret

000000a6 <APP_printString>:
/** @param u8_a_column column to print into                                */
/** @param u8_a_str string to be printed in the passed coordinates         */
/** @return void                                                           */
/***************************************************************************/
void APP_printString(uint8_t u8_a_row, uint8_t u8_a_column, uint8_t *u8_a_str)
{
      a6:	cf 93       	push	r28
      a8:	df 93       	push	r29
      aa:	ea 01       	movw	r28, r20
    LCD_goTo(u8_a_row, u8_a_column); /*Sets the cursos position to the passed row and column number*/
      ac:	0e 94 42 03 	call	0x684	; 0x684 <LCD_goTo>
    LCD_sendString(u8_a_str);        /*Sends the passed string to the LCD*/
      b0:	ce 01       	movw	r24, r28
      b2:	0e 94 2c 03 	call	0x658	; 0x658 <LCD_sendString>
}
      b6:	df 91       	pop	r29
      b8:	cf 91       	pop	r28
      ba:	08 95       	ret

000000bc <APP_printChar>:
/** @param u8_a_column column to print into                                */
/** @param u8_a_char character to be printed in the passed coordinates     */
/** @return void                                                           */
/***************************************************************************/
void APP_printChar(uint8_t u8_a_row, uint8_t u8_a_column, uint8_t u8_a_char)
{
      bc:	cf 93       	push	r28
      be:	c4 2f       	mov	r28, r20
    LCD_goTo(u8_a_row, u8_a_column); /*Sets the cursos position to the passed row and column number*/
      c0:	0e 94 42 03 	call	0x684	; 0x684 <LCD_goTo>
    LCD_sendChar(u8_a_char);         /*Sends the passed character to the LCD*/
      c4:	8c 2f       	mov	r24, r28
      c6:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_sendChar>
}
      ca:	cf 91       	pop	r28
      cc:	08 95       	ret

000000ce <APP_printInteger>:
/** @param u8_a_column column to print into                                */
/** @param u8_a_integer integer to be printed in the passed coordinates    */
/** @return void                                                           */
/***************************************************************************/
void APP_printInteger(uint8_t u8_a_row, uint8_t u8_a_column, uint16_t u16_a_integer)
{
      ce:	cf 93       	push	r28
      d0:	df 93       	push	r29
      d2:	ea 01       	movw	r28, r20
    LCD_goTo(u8_a_row, u8_a_column); /*Sets the cursos position to the passed row and column number*/
      d4:	0e 94 42 03 	call	0x684	; 0x684 <LCD_goTo>
    LCD_sendInteger(u16_a_integer);  /*Sends the passed integer to the LCD*/
      d8:	ce 01       	movw	r24, r28
      da:	0e 94 81 03 	call	0x702	; 0x702 <LCD_sendInteger>
}
      de:	df 91       	pop	r29
      e0:	cf 91       	pop	r28
      e2:	08 95       	ret

000000e4 <APP_incrementBar>:
/** @param void                                                            */
/** @return void                                                           */
/***************************************************************************/
void APP_incrementBar()
{
    APP_printChar(1, u8_g_barCount, '|'); /*Prints '|' which resembles the temprature value*/
      e4:	4c e7       	ldi	r20, 0x7C	; 124
      e6:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <u8_g_barCount>
      ea:	81 e0       	ldi	r24, 0x01	; 1
      ec:	0e 94 5e 00 	call	0xbc	; 0xbc <APP_printChar>

    u8_g_barCount++;        /*increments the u8_g_barCount which the next empty space available to write in*/
      f0:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <u8_g_barCount>
      f4:	8f 5f       	subi	r24, 0xFF	; 255
      f6:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <u8_g_barCount>
    u8_g_requiredTemp++; /*increments the required temprature*/
      fa:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <u8_g_requiredTemp>
      fe:	4f 5f       	subi	r20, 0xFF	; 255
     100:	40 93 14 01 	sts	0x0114, r20	; 0x800114 <u8_g_requiredTemp>

    APP_printInteger(0, 7, u8_g_requiredTemp); /*update the temprature on the LCD*/
     104:	50 e0       	ldi	r21, 0x00	; 0
     106:	67 e0       	ldi	r22, 0x07	; 7
     108:	80 e0       	ldi	r24, 0x00	; 0
     10a:	0e 94 67 00 	call	0xce	; 0xce <APP_printInteger>

    if (u8_g_barCount > 16) /*Check if the cursor is incrementing outside the LCD range*/
     10e:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <u8_g_barCount>
     112:	81 31       	cpi	r24, 0x11	; 17
     114:	18 f0       	brcs	.+6      	; 0x11c <APP_incrementBar+0x38>
    {
        u8_g_barCount = 16;
     116:	80 e1       	ldi	r24, 0x10	; 16
     118:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <u8_g_barCount>
     11c:	08 95       	ret

0000011e <APP_decrementBar>:
/** @param void                                                            */
/** @return void                                                           */
/***************************************************************************/
void APP_decrementBar()
{
    u8_g_barCount--;        /*decrements the u8_g_barCount to set the cursor on the last printed value to be able to clear it*/
     11e:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <u8_g_barCount>
     122:	61 50       	subi	r22, 0x01	; 1
     124:	60 93 17 01 	sts	0x0117, r22	; 0x800117 <u8_g_barCount>
    u8_g_requiredTemp--; /*decrements the required temprature*/
     128:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <u8_g_requiredTemp>
     12c:	81 50       	subi	r24, 0x01	; 1
     12e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <u8_g_requiredTemp>
    if (u8_g_barCount < 0) /*Check if the cursor is decrementing outside of the LCD range*/
    {
        u8_g_barCount = 0;
    }

    APP_printChar(1, u8_g_barCount, ' ');         /*prints ' ' which clears the last printed value*/
     132:	40 e2       	ldi	r20, 0x20	; 32
     134:	81 e0       	ldi	r24, 0x01	; 1
     136:	0e 94 5e 00 	call	0xbc	; 0xbc <APP_printChar>
    APP_printInteger(0, 7, u8_g_requiredTemp); /*update the required temprature*/
     13a:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <u8_g_requiredTemp>
     13e:	50 e0       	ldi	r21, 0x00	; 0
     140:	67 e0       	ldi	r22, 0x07	; 7
     142:	80 e0       	ldi	r24, 0x00	; 0
     144:	0e 94 67 00 	call	0xce	; 0xce <APP_printInteger>
     148:	08 95       	ret

0000014a <APP_setTemp>:
/** @brief Sets the required temprature by incrementing and decrementing   */
/** @param void                                                            */
/** @return void                                                           */
/***************************************************************************/
void APP_setTemp()
{
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	cf 93       	push	r28
    uint16_t u16_l_ovf;  /*number of overflows needed to reach a certain time*/
    uint8_t keypadValue; /*value read from the keypad*/

    /*Asking the user to set the required temprature*/
    LCD_sendCommand(Clear_Screen);
     150:	81 e0       	ldi	r24, 0x01	; 1
     152:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_sendCommand>
    APP_printString(0, 0, "Set Temp");
     156:	47 e7       	ldi	r20, 0x77	; 119
     158:	50 e0       	ldi	r21, 0x00	; 0
     15a:	60 e0       	ldi	r22, 0x00	; 0
     15c:	80 e0       	ldi	r24, 0x00	; 0
     15e:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_printString>
    TMR0_delaymicros(500000);
     162:	60 e2       	ldi	r22, 0x20	; 32
     164:	71 ea       	ldi	r23, 0xA1	; 161
     166:	87 e0       	ldi	r24, 0x07	; 7
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	0e 94 62 05 	call	0xac4	; 0xac4 <TMR0_delaymicros>
    LCD_sendCommand(Clear_Screen);
     16e:	81 e0       	ldi	r24, 0x01	; 1
     170:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_sendCommand>

    /*Display the min and max values for the temprature*/
    APP_printString(0, 0, "Min=18");
     174:	40 e8       	ldi	r20, 0x80	; 128
     176:	50 e0       	ldi	r21, 0x00	; 0
     178:	60 e0       	ldi	r22, 0x00	; 0
     17a:	80 e0       	ldi	r24, 0x00	; 0
     17c:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_printString>
    APP_printInteger(0, 7, u8_g_requiredTemp);
     180:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <u8_g_requiredTemp>
     184:	50 e0       	ldi	r21, 0x00	; 0
     186:	67 e0       	ldi	r22, 0x07	; 7
     188:	80 e0       	ldi	r24, 0x00	; 0
     18a:	0e 94 67 00 	call	0xce	; 0xce <APP_printInteger>
    APP_printString(0, 10, "Max=35");
     18e:	47 e8       	ldi	r20, 0x87	; 135
     190:	50 e0       	ldi	r21, 0x00	; 0
     192:	6a e0       	ldi	r22, 0x0A	; 10
     194:	80 e0       	ldi	r24, 0x00	; 0
     196:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_printString>

    /*Setting the loading bar to match the required temp*/
    while (u8_g_barCount < (u8_g_requiredTemp - 18))
     19a:	0b c0       	rjmp	.+22     	; 0x1b2 <APP_setTemp+0x68>
    {
        LCD_goTo(1, u8_g_barCount);
     19c:	81 e0       	ldi	r24, 0x01	; 1
     19e:	0e 94 42 03 	call	0x684	; 0x684 <LCD_goTo>
        LCD_sendChar('|');
     1a2:	8c e7       	ldi	r24, 0x7C	; 124
     1a4:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_sendChar>
        u8_g_barCount++;
     1a8:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <u8_g_barCount>
     1ac:	8f 5f       	subi	r24, 0xFF	; 255
     1ae:	80 93 17 01 	sts	0x0117, r24	; 0x800117 <u8_g_barCount>
    APP_printString(0, 0, "Min=18");
    APP_printInteger(0, 7, u8_g_requiredTemp);
    APP_printString(0, 10, "Max=35");

    /*Setting the loading bar to match the required temp*/
    while (u8_g_barCount < (u8_g_requiredTemp - 18))
     1b2:	60 91 17 01 	lds	r22, 0x0117	; 0x800117 <u8_g_barCount>
     1b6:	26 2f       	mov	r18, r22
     1b8:	30 e0       	ldi	r19, 0x00	; 0
     1ba:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <u8_g_requiredTemp>
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	42 97       	sbiw	r24, 0x12	; 18
     1c2:	28 17       	cp	r18, r24
     1c4:	39 07       	cpc	r19, r25
     1c6:	54 f3       	brlt	.-44     	; 0x19c <APP_setTemp+0x52>
        LCD_goTo(1, u8_g_barCount);
        LCD_sendChar('|');
        u8_g_barCount++;
    }

    u16_l_ovf = TIMER2_getInitialValue(3000); // gets the number of overflows needed to reach 3 secs on timer2
     1c8:	60 e0       	ldi	r22, 0x00	; 0
     1ca:	70 e8       	ldi	r23, 0x80	; 128
     1cc:	8b e3       	ldi	r24, 0x3B	; 59
     1ce:	95 e4       	ldi	r25, 0x45	; 69
     1d0:	0e 94 0f 06 	call	0xc1e	; 0xc1e <TIMER2_getInitialValue>
     1d4:	8c 01       	movw	r16, r24
    TIMER2_perscalerMode(PRESCALER_MODE);     // sets the prescaler and starts timer2
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	0e 94 98 05 	call	0xb30	; 0xb30 <TIMER2_perscalerMode>

    /*Check if the user is incrementing or decrementing the required temprature and if the user did not increment or decrement for 3 seconds, automatically set the value to its current state*/
    while ((keypadValue != '3') && (u16_gs_currentCount < u16_l_ovf)) /*Check if the user manually sets the temp or it timed out*/
     1de:	28 c0       	rjmp	.+80     	; 0x230 <APP_setTemp+0xe6>
    {
        keypadValue = KEYPAD_getpressedkey(); /*read the keypad input*/
     1e0:	0e 94 35 02 	call	0x46a	; 0x46a <KEYPAD_getpressedkey>
     1e4:	c8 2f       	mov	r28, r24

        if (keypadValue == '1' && u8_g_barCount < 16) /*Check if the user is incrementing and reset overflow u8_g_barCounter to restart the time again for the user*/
     1e6:	81 33       	cpi	r24, 0x31	; 49
     1e8:	89 f4       	brne	.+34     	; 0x20c <APP_setTemp+0xc2>
     1ea:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <u8_g_barCount>
     1ee:	80 31       	cpi	r24, 0x10	; 16
     1f0:	68 f4       	brcc	.+26     	; 0x20c <APP_setTemp+0xc2>
        {
            u16_gs_currentCount = 0; /*reset the overflow u8_g_barCounter to 0 if user increments*/
     1f2:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <u16_gs_currentCount+0x1>
     1f6:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <u16_gs_currentCount>
            APP_incrementBar();
     1fa:	0e 94 72 00 	call	0xe4	; 0xe4 <APP_incrementBar>
            TMR0_delaymicros(200000);
     1fe:	60 e4       	ldi	r22, 0x40	; 64
     200:	7d e0       	ldi	r23, 0x0D	; 13
     202:	83 e0       	ldi	r24, 0x03	; 3
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 62 05 	call	0xac4	; 0xac4 <TMR0_delaymicros>
     20a:	12 c0       	rjmp	.+36     	; 0x230 <APP_setTemp+0xe6>
        }

        else if (keypadValue == '2' && u8_g_barCount != 0) /*Check if the user is decrementing and reset overflow u8_g_barCounter to restart the time again for the user*/
     20c:	c2 33       	cpi	r28, 0x32	; 50
     20e:	81 f4       	brne	.+32     	; 0x230 <APP_setTemp+0xe6>
     210:	80 91 17 01 	lds	r24, 0x0117	; 0x800117 <u8_g_barCount>
     214:	88 23       	and	r24, r24
     216:	61 f0       	breq	.+24     	; 0x230 <APP_setTemp+0xe6>
        {
            u16_gs_currentCount = 0; /*reset the overflow u8_g_barCounter to 0 if user decrements*/
     218:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <u16_gs_currentCount+0x1>
     21c:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <u16_gs_currentCount>
            APP_decrementBar();
     220:	0e 94 8f 00 	call	0x11e	; 0x11e <APP_decrementBar>
            TMR0_delaymicros(200000);
     224:	60 e4       	ldi	r22, 0x40	; 64
     226:	7d e0       	ldi	r23, 0x0D	; 13
     228:	83 e0       	ldi	r24, 0x03	; 3
     22a:	90 e0       	ldi	r25, 0x00	; 0
     22c:	0e 94 62 05 	call	0xac4	; 0xac4 <TMR0_delaymicros>

    u16_l_ovf = TIMER2_getInitialValue(3000); // gets the number of overflows needed to reach 3 secs on timer2
    TIMER2_perscalerMode(PRESCALER_MODE);     // sets the prescaler and starts timer2

    /*Check if the user is incrementing or decrementing the required temprature and if the user did not increment or decrement for 3 seconds, automatically set the value to its current state*/
    while ((keypadValue != '3') && (u16_gs_currentCount < u16_l_ovf)) /*Check if the user manually sets the temp or it timed out*/
     230:	c3 33       	cpi	r28, 0x33	; 51
     232:	39 f0       	breq	.+14     	; 0x242 <APP_setTemp+0xf8>
     234:	80 91 15 01 	lds	r24, 0x0115	; 0x800115 <u16_gs_currentCount>
     238:	90 91 16 01 	lds	r25, 0x0116	; 0x800116 <u16_gs_currentCount+0x1>
     23c:	80 17       	cp	r24, r16
     23e:	91 07       	cpc	r25, r17
     240:	78 f2       	brcs	.-98     	; 0x1e0 <APP_setTemp+0x96>
            u16_gs_currentCount = 0; /*reset the overflow u8_g_barCounter to 0 if user decrements*/
            APP_decrementBar();
            TMR0_delaymicros(200000);
        }
    }
    TIMER2_perscalerMode(TIMER_OFF_); // close the timer
     242:	80 e0       	ldi	r24, 0x00	; 0
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	0e 94 98 05 	call	0xb30	; 0xb30 <TIMER2_perscalerMode>
    TCNT2 = 0;                        // set the timer u8_g_barCounter register value to 0
     24a:	14 bc       	out	0x24, r1	; 36
    u16_gs_currentCount = 0;          // reset the u8_g_barCounter
     24c:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <u16_gs_currentCount+0x1>
     250:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <u16_gs_currentCount>

    APP_printString(0, 0, "Temp set to >  "); /*Print the set value to the user*/
     254:	4e e8       	ldi	r20, 0x8E	; 142
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	60 e0       	ldi	r22, 0x00	; 0
     25a:	80 e0       	ldi	r24, 0x00	; 0
     25c:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_printString>
    APP_printInteger(0, 14, (u8_g_requiredTemp));
     260:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <u8_g_requiredTemp>
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	6e e0       	ldi	r22, 0x0E	; 14
     268:	80 e0       	ldi	r24, 0x00	; 0
     26a:	0e 94 67 00 	call	0xce	; 0xce <APP_printInteger>
    TMR0_delaymicros(1000000);
     26e:	60 e4       	ldi	r22, 0x40	; 64
     270:	72 e4       	ldi	r23, 0x42	; 66
     272:	8f e0       	ldi	r24, 0x0F	; 15
     274:	90 e0       	ldi	r25, 0x00	; 0
     276:	0e 94 62 05 	call	0xac4	; 0xac4 <TMR0_delaymicros>
    LCD_sendCommand(Clear_Screen);
     27a:	81 e0       	ldi	r24, 0x01	; 1
     27c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_sendCommand>
}
     280:	cf 91       	pop	r28
     282:	1f 91       	pop	r17
     284:	0f 91       	pop	r16
     286:	08 95       	ret

00000288 <APP_init>:
/** @return APP_initFail                                                   */
/***************************************************************************/
APP_initError APP_init(void)
{
    /*Initialize global variables*/
    u8_g_barCount = 0;
     288:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <u8_g_barCount>
    u8_g_requiredTemp = 20;
     28c:	84 e1       	ldi	r24, 0x14	; 20
     28e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <u8_g_requiredTemp>
    u16_gs_currentCount = 0;
     292:	10 92 16 01 	sts	0x0116, r1	; 0x800116 <u16_gs_currentCount+0x1>
     296:	10 92 15 01 	sts	0x0115, r1	; 0x800115 <u16_gs_currentCount>
    TMR0_init();
     29a:	0e 94 3b 05 	call	0xa76	; 0xa76 <TMR0_init>
    /*All modules intializations*/
    LCD_init();
     29e:	0e 94 75 03 	call	0x6ea	; 0x6ea <LCD_init>
    //KEYPAD_init();
    //ADC_init();

    /*Timer 2 Initialization*/

	SREG |= (1 << 7);                              // enable global interrupt
     2a2:	8f b7       	in	r24, 0x3f	; 63
     2a4:	80 68       	ori	r24, 0x80	; 128
     2a6:	8f bf       	out	0x3f, r24	; 63
	TIMSK |= (1 << 6);                             // enable timer 2 interrupt
     2a8:	89 b7       	in	r24, 0x39	; 57
     2aa:	80 64       	ori	r24, 0x40	; 64
     2ac:	89 bf       	out	0x39, r24	; 57
    TIMER2_normalMode();                           // Set timer 2 to normal mode
     2ae:	0e 94 90 05 	call	0xb20	; 0xb20 <TIMER2_normalMode>
    set_TIMER2_OVF_callBack(get_current_overflow); /*Set the timer 2 callback function*/
     2b2:	89 e4       	ldi	r24, 0x49	; 73
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	0e 94 5f 06 	call	0xcbe	; 0xcbe <set_TIMER2_OVF_callBack>

    APP_printString(0, 4, "Welcome");               /*Welcome Screen*/
     2ba:	4e e9       	ldi	r20, 0x9E	; 158
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	64 e0       	ldi	r22, 0x04	; 4
     2c0:	80 e0       	ldi	r24, 0x00	; 0
     2c2:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_printString>
    LCD_createCustomCharacter(u8_g_bell_center, 0); /*Adding custom characters to CGRAM*/
     2c6:	60 e0       	ldi	r22, 0x00	; 0
     2c8:	80 e6       	ldi	r24, 0x60	; 96
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <LCD_createCustomCharacter>
    TMR0_delaymicros(1000000);
     2d0:	60 e4       	ldi	r22, 0x40	; 64
     2d2:	72 e4       	ldi	r23, 0x42	; 66
     2d4:	8f e0       	ldi	r24, 0x0F	; 15
     2d6:	90 e0       	ldi	r25, 0x00	; 0
     2d8:	0e 94 62 05 	call	0xac4	; 0xac4 <TMR0_delaymicros>
    LCD_sendCommand(Clear_Screen);
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_sendCommand>

    /*Print the default temprature*/
    APP_printString(0, 0, "Default Temp 20");
     2e2:	46 ea       	ldi	r20, 0xA6	; 166
     2e4:	50 e0       	ldi	r21, 0x00	; 0
     2e6:	60 e0       	ldi	r22, 0x00	; 0
     2e8:	80 e0       	ldi	r24, 0x00	; 0
     2ea:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_printString>
    TMR0_delaymicros(1000000);
     2ee:	60 e4       	ldi	r22, 0x40	; 64
     2f0:	72 e4       	ldi	r23, 0x42	; 66
     2f2:	8f e0       	ldi	r24, 0x0F	; 15
     2f4:	90 e0       	ldi	r25, 0x00	; 0
     2f6:	0e 94 62 05 	call	0xac4	; 0xac4 <TMR0_delaymicros>

    /*Call the set temprature function*/
    APP_setTemp();
     2fa:	0e 94 a5 00 	call	0x14a	; 0x14a <APP_setTemp>

    return APP_initSuccess;
}
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	08 95       	ret

00000302 <APP_defaultView>:
/** @brief Shows the current and required temprature on the LCD while checking if the user wants to readjust the temp or reset it to its default value  */
/** @param void                                                                                                                                         */
/** @return void                                                                                                                                        */
/********************************************************************************************************************************************************/
void APP_defaultView(void)
{
     302:	cf 92       	push	r12
     304:	df 92       	push	r13
     306:	ef 92       	push	r14
     308:	ff 92       	push	r15
     30a:	cf 93       	push	r28
    float adc_value;     /*variable to store the read adc value in*/
    uint8_t keypadValue; /*value read from the keypad*/

    adc_value = ADC_read(); /*get the sensor's reading*/
     30c:	0e 94 ef 03 	call	0x7de	; 0x7de <ADC_read>
     310:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__floatunsisf>
    adc_value += 18;         /*if the sensor reads 0 then this translates to 18 degrees celsius*/
     314:	20 e0       	ldi	r18, 0x00	; 0
     316:	30 e0       	ldi	r19, 0x00	; 0
     318:	40 e9       	ldi	r20, 0x90	; 144
     31a:	51 e4       	ldi	r21, 0x41	; 65
     31c:	0e 94 8c 06 	call	0xd18	; 0xd18 <__addsf3>
     320:	6b 01       	movw	r12, r22
     322:	7c 01       	movw	r14, r24
    APP_printString(0, 0, "Current  T :");
     324:	46 eb       	ldi	r20, 0xB6	; 182
     326:	50 e0       	ldi	r21, 0x00	; 0
     328:	60 e0       	ldi	r22, 0x00	; 0
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_printString>

    /*Approximate the adc value to floor or ceiling*/
    if (((int)(adc_value * 10) % 10) >= 5) /*Checks if the value after the decimal point is equal to 5 or higher*/
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	40 e2       	ldi	r20, 0x20	; 32
     336:	51 e4       	ldi	r21, 0x41	; 65
     338:	c7 01       	movw	r24, r14
     33a:	b6 01       	movw	r22, r12
     33c:	0e 94 9d 08 	call	0x113a	; 0x113a <__mulsf3>
     340:	0e 94 81 07 	call	0xf02	; 0xf02 <__fixsfsi>
     344:	cb 01       	movw	r24, r22
     346:	6a e0       	ldi	r22, 0x0A	; 10
     348:	70 e0       	ldi	r23, 0x00	; 0
     34a:	0e 94 0a 09 	call	0x1214	; 0x1214 <__divmodhi4>
     34e:	05 97       	sbiw	r24, 0x05	; 5
     350:	3c f0       	brlt	.+14     	; 0x360 <APP_defaultView+0x5e>
    {
        adc_value = ceil(adc_value);
     352:	c7 01       	movw	r24, r14
     354:	b6 01       	movw	r22, r12
     356:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <ceil>
     35a:	6b 01       	movw	r12, r22
     35c:	7c 01       	movw	r14, r24
     35e:	06 c0       	rjmp	.+12     	; 0x36c <APP_defaultView+0x6a>
    }
    else
    {
        adc_value = floor(adc_value);
     360:	c7 01       	movw	r24, r14
     362:	b6 01       	movw	r22, r12
     364:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <floor>
     368:	6b 01       	movw	r12, r22
     36a:	7c 01       	movw	r14, r24
    }

    /*Print the sensor value and the user's required temp*/
    APP_printInteger(0, 13, adc_value);
     36c:	c7 01       	movw	r24, r14
     36e:	b6 01       	movw	r22, r12
     370:	0e 94 88 07 	call	0xf10	; 0xf10 <__fixunssfsi>
     374:	ab 01       	movw	r20, r22
     376:	6d e0       	ldi	r22, 0x0D	; 13
     378:	80 e0       	ldi	r24, 0x00	; 0
     37a:	0e 94 67 00 	call	0xce	; 0xce <APP_printInteger>
    APP_printString(1, 0, "Required T :");
     37e:	43 ec       	ldi	r20, 0xC3	; 195
     380:	50 e0       	ldi	r21, 0x00	; 0
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	81 e0       	ldi	r24, 0x01	; 1
     386:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_printString>
    APP_printInteger(1, 13, u8_g_requiredTemp);
     38a:	40 91 14 01 	lds	r20, 0x0114	; 0x800114 <u8_g_requiredTemp>
     38e:	50 e0       	ldi	r21, 0x00	; 0
     390:	6d e0       	ldi	r22, 0x0D	; 13
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	0e 94 67 00 	call	0xce	; 0xce <APP_printInteger>

    /*Show buzzer if the sensor's reading is higher than the user required temp*/
    if ((int)adc_value > u8_g_requiredTemp)
     398:	c7 01       	movw	r24, r14
     39a:	b6 01       	movw	r22, r12
     39c:	0e 94 81 07 	call	0xf02	; 0xf02 <__fixsfsi>
     3a0:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <u8_g_requiredTemp>
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	86 17       	cp	r24, r22
     3a8:	97 07       	cpc	r25, r23
     3aa:	34 f4       	brge	.+12     	; 0x3b8 <APP_defaultView+0xb6>
    {
        APP_printChar(0, 15, 0); /*Show the bell custom character*/
     3ac:	40 e0       	ldi	r20, 0x00	; 0
     3ae:	6f e0       	ldi	r22, 0x0F	; 15
     3b0:	80 e0       	ldi	r24, 0x00	; 0
     3b2:	0e 94 5e 00 	call	0xbc	; 0xbc <APP_printChar>
     3b6:	08 c0       	rjmp	.+16     	; 0x3c8 <APP_defaultView+0xc6>
    }
    else if ((int)adc_value <= u8_g_requiredTemp)
     3b8:	86 17       	cp	r24, r22
     3ba:	97 07       	cpc	r25, r23
     3bc:	2c f0       	brlt	.+10     	; 0x3c8 <APP_defaultView+0xc6>
    {
        APP_printChar(0, 15, ' '); /*Clear the bell*/
     3be:	40 e2       	ldi	r20, 0x20	; 32
     3c0:	6f e0       	ldi	r22, 0x0F	; 15
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	0e 94 5e 00 	call	0xbc	; 0xbc <APP_printChar>
    }

    /*Check if the user wants to readjust the required temprature or reset it to its default value*/
    keypadValue = KEYPAD_getpressedkey();
     3c8:	0e 94 35 02 	call	0x46a	; 0x46a <KEYPAD_getpressedkey>
     3cc:	c8 2f       	mov	r28, r24
    if (((keypadValue >= 48) && (keypadValue < 58)) || (keypadValue == '*') || (keypadValue == '#')) /*Checks only for valid inputs from the keypad and ignore any unwanted data*/
     3ce:	80 ed       	ldi	r24, 0xD0	; 208
     3d0:	8c 0f       	add	r24, r28
     3d2:	8a 30       	cpi	r24, 0x0A	; 10
     3d4:	28 f0       	brcs	.+10     	; 0x3e0 <APP_defaultView+0xde>
     3d6:	ca 32       	cpi	r28, 0x2A	; 42
     3d8:	19 f0       	breq	.+6      	; 0x3e0 <APP_defaultView+0xde>
     3da:	c3 32       	cpi	r28, 0x23	; 35
     3dc:	09 f0       	breq	.+2      	; 0x3e0 <APP_defaultView+0xde>
     3de:	3f c0       	rjmp	.+126    	; 0x45e <__EEPROM_REGION_LENGTH__+0x5e>
    {
        LCD_sendCommand(Clear_Screen);
     3e0:	81 e0       	ldi	r24, 0x01	; 1
     3e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_sendCommand>
        if (keypadValue == '4') /*checks if the user wants to readjust*/
     3e6:	c4 33       	cpi	r28, 0x34	; 52
     3e8:	89 f4       	brne	.+34     	; 0x40c <__EEPROM_REGION_LENGTH__+0xc>
        {
            APP_printString(0, 0, " Readjust mode");
     3ea:	40 ed       	ldi	r20, 0xD0	; 208
     3ec:	50 e0       	ldi	r21, 0x00	; 0
     3ee:	60 e0       	ldi	r22, 0x00	; 0
     3f0:	80 e0       	ldi	r24, 0x00	; 0
     3f2:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_printString>
            u8_g_barCount = 0;
     3f6:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <u8_g_barCount>
            TMR0_delaymicros(1000000);
     3fa:	60 e4       	ldi	r22, 0x40	; 64
     3fc:	72 e4       	ldi	r23, 0x42	; 66
     3fe:	8f e0       	ldi	r24, 0x0F	; 15
     400:	90 e0       	ldi	r25, 0x00	; 0
     402:	0e 94 62 05 	call	0xac4	; 0xac4 <TMR0_delaymicros>
            APP_setTemp();
     406:	0e 94 a5 00 	call	0x14a	; 0x14a <APP_setTemp>
     40a:	26 c0       	rjmp	.+76     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
        }

        else if (keypadValue == '5') /*checks if the user wants to reset*/
     40c:	c5 33       	cpi	r28, 0x35	; 53
     40e:	91 f4       	brne	.+36     	; 0x434 <__EEPROM_REGION_LENGTH__+0x34>
        {
            APP_printString(0, 0, "Temp reset to 20");
     410:	4f ed       	ldi	r20, 0xDF	; 223
     412:	50 e0       	ldi	r21, 0x00	; 0
     414:	60 e0       	ldi	r22, 0x00	; 0
     416:	80 e0       	ldi	r24, 0x00	; 0
     418:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_printString>
            u8_g_requiredTemp = 20;
     41c:	84 e1       	ldi	r24, 0x14	; 20
     41e:	80 93 14 01 	sts	0x0114, r24	; 0x800114 <u8_g_requiredTemp>
            u8_g_barCount = 0;
     422:	10 92 17 01 	sts	0x0117, r1	; 0x800117 <u8_g_barCount>
            TMR0_delaymicros(1000000);
     426:	60 e4       	ldi	r22, 0x40	; 64
     428:	72 e4       	ldi	r23, 0x42	; 66
     42a:	8f e0       	ldi	r24, 0x0F	; 15
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 62 05 	call	0xac4	; 0xac4 <TMR0_delaymicros>
     432:	12 c0       	rjmp	.+36     	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
        }

        else /*any other input other than '4' or '5' is an invalid operation*/
        {
            APP_printString(0, 0, "Operation not");
     434:	40 ef       	ldi	r20, 0xF0	; 240
     436:	50 e0       	ldi	r21, 0x00	; 0
     438:	60 e0       	ldi	r22, 0x00	; 0
     43a:	80 e0       	ldi	r24, 0x00	; 0
     43c:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_printString>
            APP_printString(1, 0, "allowed");
     440:	4e ef       	ldi	r20, 0xFE	; 254
     442:	50 e0       	ldi	r21, 0x00	; 0
     444:	60 e0       	ldi	r22, 0x00	; 0
     446:	81 e0       	ldi	r24, 0x01	; 1
     448:	0e 94 53 00 	call	0xa6	; 0xa6 <APP_printString>
            TMR0_delaymicros(1000000);
     44c:	60 e4       	ldi	r22, 0x40	; 64
     44e:	72 e4       	ldi	r23, 0x42	; 66
     450:	8f e0       	ldi	r24, 0x0F	; 15
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	0e 94 62 05 	call	0xac4	; 0xac4 <TMR0_delaymicros>
        }
        LCD_sendCommand(Clear_Screen);
     458:	81 e0       	ldi	r24, 0x01	; 1
     45a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <LCD_sendCommand>
    }
}
     45e:	cf 91       	pop	r28
     460:	ff 90       	pop	r15
     462:	ef 90       	pop	r14
     464:	df 90       	pop	r13
     466:	cf 90       	pop	r12
     468:	08 95       	ret

0000046a <KEYPAD_getpressedkey>:
  DIO_setpinvalue(DIO_PORTC, ROW_2, DIO_PIN_HIGH);
  DIO_setpinvalue(DIO_PORTC, ROW_3, DIO_PIN_HIGH);
}

uint8_t KEYPAD_getpressedkey(void)
{
     46a:	cf 92       	push	r12
     46c:	df 92       	push	r13
     46e:	ef 92       	push	r14
     470:	ff 92       	push	r15
     472:	0f 93       	push	r16
     474:	1f 93       	push	r17
     476:	cf 93       	push	r28
     478:	df 93       	push	r29
     47a:	1f 92       	push	r1
     47c:	cd b7       	in	r28, 0x3d	; 61
     47e:	de b7       	in	r29, 0x3e	; 62

  uint8_t colValue;

  // Scan all keypad columns
  for (uint8_t counter_row = 0; counter_row < KEYPADSIZE; counter_row++)
     480:	00 e0       	ldi	r16, 0x00	; 0
     482:	3b c0       	rjmp	.+118    	; 0x4fa <KEYPAD_getpressedkey+0x90>
  {
    // activate current colmun
    DIO_setpinvalue(DIO_PORTC, Row_Arr[counter_row], DIO_PIN_LOW);
     484:	c0 2e       	mov	r12, r16
     486:	d1 2c       	mov	r13, r1
     488:	f6 01       	movw	r30, r12
     48a:	ef 58       	subi	r30, 0x8F	; 143
     48c:	ff 4f       	sbci	r31, 0xFF	; 255
     48e:	40 e0       	ldi	r20, 0x00	; 0
     490:	60 81       	ld	r22, Z
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	0e 94 09 04 	call	0x812	; 0x812 <DIO_setpinvalue>

    for (uint8_t counter_col = 0; counter_col < KEYPADSIZE; counter_col++)
     498:	10 e0       	ldi	r17, 0x00	; 0
     49a:	24 c0       	rjmp	.+72     	; 0x4e4 <KEYPAD_getpressedkey+0x7a>
    {
      // check row value if it is 0 then this column and row is connected
      DIO_readpin(DIO_PORTC, Col_Arr[counter_col], &colValue);
     49c:	e1 2e       	mov	r14, r17
     49e:	f1 2c       	mov	r15, r1
     4a0:	f7 01       	movw	r30, r14
     4a2:	ec 58       	subi	r30, 0x8C	; 140
     4a4:	ff 4f       	sbci	r31, 0xFF	; 255
     4a6:	ae 01       	movw	r20, r28
     4a8:	4f 5f       	subi	r20, 0xFF	; 255
     4aa:	5f 4f       	sbci	r21, 0xFF	; 255
     4ac:	60 81       	ld	r22, Z
     4ae:	82 e0       	ldi	r24, 0x02	; 2
     4b0:	0e 94 88 04 	call	0x910	; 0x910 <DIO_readpin>
      if (colValue == 0)
     4b4:	89 81       	ldd	r24, Y+1	; 0x01
     4b6:	81 11       	cpse	r24, r1
     4b8:	14 c0       	rjmp	.+40     	; 0x4e2 <KEYPAD_getpressedkey+0x78>
      {
        // Return pressed button value
        DIO_setpinvalue(DIO_PORTC, Row_Arr[counter_row], DIO_PIN_HIGH);
     4ba:	f6 01       	movw	r30, r12
     4bc:	ef 58       	subi	r30, 0x8F	; 143
     4be:	ff 4f       	sbci	r31, 0xFF	; 255
     4c0:	41 e0       	ldi	r20, 0x01	; 1
     4c2:	60 81       	ld	r22, Z
     4c4:	82 e0       	ldi	r24, 0x02	; 2
     4c6:	0e 94 09 04 	call	0x812	; 0x812 <DIO_setpinvalue>
        return Button_Arr[counter_row][counter_col];
     4ca:	c6 01       	movw	r24, r12
     4cc:	88 0f       	add	r24, r24
     4ce:	99 1f       	adc	r25, r25
     4d0:	8c 0d       	add	r24, r12
     4d2:	9d 1d       	adc	r25, r13
     4d4:	88 59       	subi	r24, 0x98	; 152
     4d6:	9f 4f       	sbci	r25, 0xFF	; 255
     4d8:	fc 01       	movw	r30, r24
     4da:	ee 0d       	add	r30, r14
     4dc:	ff 1d       	adc	r31, r15
     4de:	80 81       	ld	r24, Z
     4e0:	0f c0       	rjmp	.+30     	; 0x500 <KEYPAD_getpressedkey+0x96>
  for (uint8_t counter_row = 0; counter_row < KEYPADSIZE; counter_row++)
  {
    // activate current colmun
    DIO_setpinvalue(DIO_PORTC, Row_Arr[counter_row], DIO_PIN_LOW);

    for (uint8_t counter_col = 0; counter_col < KEYPADSIZE; counter_col++)
     4e2:	1f 5f       	subi	r17, 0xFF	; 255
     4e4:	13 30       	cpi	r17, 0x03	; 3
     4e6:	d0 f2       	brcs	.-76     	; 0x49c <KEYPAD_getpressedkey+0x32>
        DIO_setpinvalue(DIO_PORTC, Row_Arr[counter_row], DIO_PIN_HIGH);
        return Button_Arr[counter_row][counter_col];
      }
    }
    // set current column pin HIGH again
    DIO_setpinvalue(DIO_PORTC, Row_Arr[counter_row], DIO_PIN_HIGH);
     4e8:	f6 01       	movw	r30, r12
     4ea:	ef 58       	subi	r30, 0x8F	; 143
     4ec:	ff 4f       	sbci	r31, 0xFF	; 255
     4ee:	41 e0       	ldi	r20, 0x01	; 1
     4f0:	60 81       	ld	r22, Z
     4f2:	82 e0       	ldi	r24, 0x02	; 2
     4f4:	0e 94 09 04 	call	0x812	; 0x812 <DIO_setpinvalue>
{

  uint8_t colValue;

  // Scan all keypad columns
  for (uint8_t counter_row = 0; counter_row < KEYPADSIZE; counter_row++)
     4f8:	0f 5f       	subi	r16, 0xFF	; 255
     4fa:	03 30       	cpi	r16, 0x03	; 3
     4fc:	18 f2       	brcs	.-122    	; 0x484 <KEYPAD_getpressedkey+0x1a>
    // set current column pin HIGH again
    DIO_setpinvalue(DIO_PORTC, Row_Arr[counter_row], DIO_PIN_HIGH);
  }

  // Report no Button pressed
  return 0;
     4fe:	80 e0       	ldi	r24, 0x00	; 0
}
     500:	0f 90       	pop	r0
     502:	df 91       	pop	r29
     504:	cf 91       	pop	r28
     506:	1f 91       	pop	r17
     508:	0f 91       	pop	r16
     50a:	ff 90       	pop	r15
     50c:	ef 90       	pop	r14
     50e:	df 90       	pop	r13
     510:	cf 90       	pop	r12
     512:	08 95       	ret

00000514 <LCD_4_bit_sendCommand>:
	LCD_sendChar('.');
	LCD_sendChar(decimalPart+48);
	//LCD_sendString("  ");
	
    return char_send_OK;
}
     514:	cf 93       	push	r28
     516:	c8 2f       	mov	r28, r24
     518:	8b b3       	in	r24, 0x1b	; 27
     51a:	8f 70       	andi	r24, 0x0F	; 15
     51c:	9c 2f       	mov	r25, r28
     51e:	90 7f       	andi	r25, 0xF0	; 240
     520:	89 2b       	or	r24, r25
     522:	8b bb       	out	0x1b, r24	; 27
     524:	8b b3       	in	r24, 0x1b	; 27
     526:	8d 7f       	andi	r24, 0xFD	; 253
     528:	8b bb       	out	0x1b, r24	; 27
     52a:	8b b3       	in	r24, 0x1b	; 27
     52c:	8b 7f       	andi	r24, 0xFB	; 251
     52e:	8b bb       	out	0x1b, r24	; 27
     530:	8b b3       	in	r24, 0x1b	; 27
     532:	88 60       	ori	r24, 0x08	; 8
     534:	8b bb       	out	0x1b, r24	; 27
     536:	61 e0       	ldi	r22, 0x01	; 1
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	80 e0       	ldi	r24, 0x00	; 0
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 62 05 	call	0xac4	; 0xac4 <TMR0_delaymicros>
     542:	8b b3       	in	r24, 0x1b	; 27
     544:	87 7f       	andi	r24, 0xF7	; 247
     546:	8b bb       	out	0x1b, r24	; 27
     548:	62 e0       	ldi	r22, 0x02	; 2
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	80 e0       	ldi	r24, 0x00	; 0
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 62 05 	call	0xac4	; 0xac4 <TMR0_delaymicros>
     554:	2b b3       	in	r18, 0x1b	; 27
     556:	30 e1       	ldi	r19, 0x10	; 16
     558:	c3 9f       	mul	r28, r19
     55a:	c0 01       	movw	r24, r0
     55c:	11 24       	eor	r1, r1
     55e:	92 2f       	mov	r25, r18
     560:	9f 70       	andi	r25, 0x0F	; 15
     562:	89 2b       	or	r24, r25
     564:	8b bb       	out	0x1b, r24	; 27
     566:	8b b3       	in	r24, 0x1b	; 27
     568:	88 60       	ori	r24, 0x08	; 8
     56a:	8b bb       	out	0x1b, r24	; 27
     56c:	61 e0       	ldi	r22, 0x01	; 1
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 62 05 	call	0xac4	; 0xac4 <TMR0_delaymicros>
     578:	8b b3       	in	r24, 0x1b	; 27
     57a:	87 7f       	andi	r24, 0xF7	; 247
     57c:	8b bb       	out	0x1b, r24	; 27
     57e:	60 ed       	ldi	r22, 0xD0	; 208
     580:	77 e0       	ldi	r23, 0x07	; 7
     582:	80 e0       	ldi	r24, 0x00	; 0
     584:	90 e0       	ldi	r25, 0x00	; 0
     586:	0e 94 62 05 	call	0xac4	; 0xac4 <TMR0_delaymicros>
     58a:	80 e0       	ldi	r24, 0x00	; 0
     58c:	cf 91       	pop	r28
     58e:	08 95       	ret

00000590 <LCD_4_bit_init>:
     590:	8a b3       	in	r24, 0x1a	; 26
     592:	82 60       	ori	r24, 0x02	; 2
     594:	8a bb       	out	0x1a, r24	; 26
     596:	8a b3       	in	r24, 0x1a	; 26
     598:	84 60       	ori	r24, 0x04	; 4
     59a:	8a bb       	out	0x1a, r24	; 26
     59c:	8a b3       	in	r24, 0x1a	; 26
     59e:	88 60       	ori	r24, 0x08	; 8
     5a0:	8a bb       	out	0x1a, r24	; 26
     5a2:	8a b3       	in	r24, 0x1a	; 26
     5a4:	80 6f       	ori	r24, 0xF0	; 240
     5a6:	8a bb       	out	0x1a, r24	; 26
     5a8:	60 e2       	ldi	r22, 0x20	; 32
     5aa:	7e e4       	ldi	r23, 0x4E	; 78
     5ac:	80 e0       	ldi	r24, 0x00	; 0
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 62 05 	call	0xac4	; 0xac4 <TMR0_delaymicros>
     5b4:	82 e0       	ldi	r24, 0x02	; 2
     5b6:	0e 94 8a 02 	call	0x514	; 0x514 <LCD_4_bit_sendCommand>
     5ba:	88 e2       	ldi	r24, 0x28	; 40
     5bc:	0e 94 8a 02 	call	0x514	; 0x514 <LCD_4_bit_sendCommand>
     5c0:	8c e0       	ldi	r24, 0x0C	; 12
     5c2:	0e 94 8a 02 	call	0x514	; 0x514 <LCD_4_bit_sendCommand>
     5c6:	86 e0       	ldi	r24, 0x06	; 6
     5c8:	0e 94 8a 02 	call	0x514	; 0x514 <LCD_4_bit_sendCommand>
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	0e 94 8a 02 	call	0x514	; 0x514 <LCD_4_bit_sendCommand>
     5d2:	80 e8       	ldi	r24, 0x80	; 128
     5d4:	0e 94 8a 02 	call	0x514	; 0x514 <LCD_4_bit_sendCommand>
     5d8:	80 e0       	ldi	r24, 0x00	; 0
     5da:	08 95       	ret

000005dc <LCD_4_bit_sendChar>:
     5dc:	cf 93       	push	r28
     5de:	c8 2f       	mov	r28, r24
     5e0:	8b b3       	in	r24, 0x1b	; 27
     5e2:	8f 70       	andi	r24, 0x0F	; 15
     5e4:	9c 2f       	mov	r25, r28
     5e6:	90 7f       	andi	r25, 0xF0	; 240
     5e8:	89 2b       	or	r24, r25
     5ea:	8b bb       	out	0x1b, r24	; 27
     5ec:	8b b3       	in	r24, 0x1b	; 27
     5ee:	82 60       	ori	r24, 0x02	; 2
     5f0:	8b bb       	out	0x1b, r24	; 27
     5f2:	8b b3       	in	r24, 0x1b	; 27
     5f4:	8b 7f       	andi	r24, 0xFB	; 251
     5f6:	8b bb       	out	0x1b, r24	; 27
     5f8:	8b b3       	in	r24, 0x1b	; 27
     5fa:	88 60       	ori	r24, 0x08	; 8
     5fc:	8b bb       	out	0x1b, r24	; 27
     5fe:	61 e0       	ldi	r22, 0x01	; 1
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	0e 94 62 05 	call	0xac4	; 0xac4 <TMR0_delaymicros>
     60a:	8b b3       	in	r24, 0x1b	; 27
     60c:	87 7f       	andi	r24, 0xF7	; 247
     60e:	8b bb       	out	0x1b, r24	; 27
     610:	68 ec       	ldi	r22, 0xC8	; 200
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	80 e0       	ldi	r24, 0x00	; 0
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	0e 94 62 05 	call	0xac4	; 0xac4 <TMR0_delaymicros>
     61c:	2b b3       	in	r18, 0x1b	; 27
     61e:	30 e1       	ldi	r19, 0x10	; 16
     620:	c3 9f       	mul	r28, r19
     622:	c0 01       	movw	r24, r0
     624:	11 24       	eor	r1, r1
     626:	92 2f       	mov	r25, r18
     628:	9f 70       	andi	r25, 0x0F	; 15
     62a:	89 2b       	or	r24, r25
     62c:	8b bb       	out	0x1b, r24	; 27
     62e:	8b b3       	in	r24, 0x1b	; 27
     630:	88 60       	ori	r24, 0x08	; 8
     632:	8b bb       	out	0x1b, r24	; 27
     634:	61 e0       	ldi	r22, 0x01	; 1
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	80 e0       	ldi	r24, 0x00	; 0
     63a:	90 e0       	ldi	r25, 0x00	; 0
     63c:	0e 94 62 05 	call	0xac4	; 0xac4 <TMR0_delaymicros>
     640:	8b b3       	in	r24, 0x1b	; 27
     642:	87 7f       	andi	r24, 0xF7	; 247
     644:	8b bb       	out	0x1b, r24	; 27
     646:	68 ec       	ldi	r22, 0xC8	; 200
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	0e 94 62 05 	call	0xac4	; 0xac4 <TMR0_delaymicros>
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	cf 91       	pop	r28
     656:	08 95       	ret

00000658 <LCD_sendString>:
     658:	0f 93       	push	r16
     65a:	1f 93       	push	r17
     65c:	cf 93       	push	r28
     65e:	df 93       	push	r29
     660:	8c 01       	movw	r16, r24
     662:	c0 e0       	ldi	r28, 0x00	; 0
     664:	d0 e0       	ldi	r29, 0x00	; 0
     666:	03 c0       	rjmp	.+6      	; 0x66e <LCD_sendString+0x16>
     668:	0e 94 ee 02 	call	0x5dc	; 0x5dc <LCD_4_bit_sendChar>
     66c:	21 96       	adiw	r28, 0x01	; 1
     66e:	f8 01       	movw	r30, r16
     670:	ec 0f       	add	r30, r28
     672:	fd 1f       	adc	r31, r29
     674:	80 81       	ld	r24, Z
     676:	81 11       	cpse	r24, r1
     678:	f7 cf       	rjmp	.-18     	; 0x668 <LCD_sendString+0x10>
     67a:	df 91       	pop	r29
     67c:	cf 91       	pop	r28
     67e:	1f 91       	pop	r17
     680:	0f 91       	pop	r16
     682:	08 95       	ret

00000684 <LCD_goTo>:
     684:	cf 93       	push	r28
     686:	df 93       	push	r29
     688:	00 d0       	rcall	.+0      	; 0x68a <LCD_goTo+0x6>
     68a:	cd b7       	in	r28, 0x3d	; 61
     68c:	de b7       	in	r29, 0x3e	; 62
     68e:	90 e8       	ldi	r25, 0x80	; 128
     690:	99 83       	std	Y+1, r25	; 0x01
     692:	90 ec       	ldi	r25, 0xC0	; 192
     694:	9a 83       	std	Y+2, r25	; 0x02
     696:	e1 e0       	ldi	r30, 0x01	; 1
     698:	f0 e0       	ldi	r31, 0x00	; 0
     69a:	ec 0f       	add	r30, r28
     69c:	fd 1f       	adc	r31, r29
     69e:	e8 0f       	add	r30, r24
     6a0:	f1 1d       	adc	r31, r1
     6a2:	80 81       	ld	r24, Z
     6a4:	86 0f       	add	r24, r22
     6a6:	0e 94 8a 02 	call	0x514	; 0x514 <LCD_4_bit_sendCommand>
     6aa:	0f 90       	pop	r0
     6ac:	0f 90       	pop	r0
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	08 95       	ret

000006b4 <LCD_createCustomCharacter>:
     6b4:	0f 93       	push	r16
     6b6:	1f 93       	push	r17
     6b8:	cf 93       	push	r28
     6ba:	8c 01       	movw	r16, r24
     6bc:	86 2f       	mov	r24, r22
     6be:	90 e0       	ldi	r25, 0x00	; 0
     6c0:	08 96       	adiw	r24, 0x08	; 8
     6c2:	88 0f       	add	r24, r24
     6c4:	88 0f       	add	r24, r24
     6c6:	88 0f       	add	r24, r24
     6c8:	0e 94 8a 02 	call	0x514	; 0x514 <LCD_4_bit_sendCommand>
     6cc:	c0 e0       	ldi	r28, 0x00	; 0
     6ce:	07 c0       	rjmp	.+14     	; 0x6de <LCD_createCustomCharacter+0x2a>
     6d0:	f8 01       	movw	r30, r16
     6d2:	ec 0f       	add	r30, r28
     6d4:	f1 1d       	adc	r31, r1
     6d6:	80 81       	ld	r24, Z
     6d8:	0e 94 ee 02 	call	0x5dc	; 0x5dc <LCD_4_bit_sendChar>
     6dc:	cf 5f       	subi	r28, 0xFF	; 255
     6de:	c8 30       	cpi	r28, 0x08	; 8
     6e0:	b8 f3       	brcs	.-18     	; 0x6d0 <LCD_createCustomCharacter+0x1c>
     6e2:	cf 91       	pop	r28
     6e4:	1f 91       	pop	r17
     6e6:	0f 91       	pop	r16
     6e8:	08 95       	ret

000006ea <LCD_init>:
     6ea:	0e 94 c8 02 	call	0x590	; 0x590 <LCD_4_bit_init>
     6ee:	80 e0       	ldi	r24, 0x00	; 0
     6f0:	08 95       	ret

000006f2 <LCD_sendCommand>:
     6f2:	0e 94 8a 02 	call	0x514	; 0x514 <LCD_4_bit_sendCommand>
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	08 95       	ret

000006fa <LCD_sendChar>:
     6fa:	0e 94 ee 02 	call	0x5dc	; 0x5dc <LCD_4_bit_sendChar>
     6fe:	80 e0       	ldi	r24, 0x00	; 0
     700:	08 95       	ret

00000702 <LCD_sendInteger>:
/** @brief    Sends an integer value to LCD                                */
/** @param    u16_a_number                                                 */
/** @return   char_send_OK                                                 */
/***************************************************************************/
LCD_sendChar_error LCD_sendInteger(uint16_t u16_a_number)
{
     702:	ef 92       	push	r14
     704:	ff 92       	push	r15
     706:	1f 93       	push	r17
     708:	cf 93       	push	r28
     70a:	df 93       	push	r29
     70c:	cd b7       	in	r28, 0x3d	; 61
     70e:	de b7       	in	r29, 0x3e	; 62
     710:	64 97       	sbiw	r28, 0x14	; 20
     712:	0f b6       	in	r0, 0x3f	; 63
     714:	f8 94       	cli
     716:	de bf       	out	0x3e, r29	; 62
     718:	0f be       	out	0x3f, r0	; 63
     71a:	cd bf       	out	0x3d, r28	; 61
     71c:	7c 01       	movw	r14, r24
	uint16_t u_l_toString[10];
	uint8_t i =0;
	uint8_t j =0;
	
	if(u16_a_number == 0)
     71e:	89 2b       	or	r24, r25
     720:	19 f4       	brne	.+6      	; 0x728 <LCD_sendInteger+0x26>
	{
		LCD_sendChar('0');
     722:	80 e3       	ldi	r24, 0x30	; 48
     724:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_sendChar>
/** @brief    Sends an integer value to LCD                                */
/** @param    u16_a_number                                                 */
/** @return   char_send_OK                                                 */
/***************************************************************************/
LCD_sendChar_error LCD_sendInteger(uint16_t u16_a_number)
{
     728:	10 e0       	ldi	r17, 0x00	; 0
     72a:	32 c0       	rjmp	.+100    	; 0x790 <LCD_sendInteger+0x8e>
	{
		LCD_sendChar('0');
	}
	while( u16_a_number > 0)
	{
		u_l_toString[i]=(u16_a_number % 10) +48;
     72c:	41 2f       	mov	r20, r17
     72e:	50 e0       	ldi	r21, 0x00	; 0
     730:	97 01       	movw	r18, r14
     732:	ad ec       	ldi	r26, 0xCD	; 205
     734:	bc ec       	ldi	r27, 0xCC	; 204
     736:	0e 94 1e 09 	call	0x123c	; 0x123c <__umulhisi3>
     73a:	96 95       	lsr	r25
     73c:	87 95       	ror	r24
     73e:	96 95       	lsr	r25
     740:	87 95       	ror	r24
     742:	96 95       	lsr	r25
     744:	87 95       	ror	r24
     746:	9c 01       	movw	r18, r24
     748:	22 0f       	add	r18, r18
     74a:	33 1f       	adc	r19, r19
     74c:	88 0f       	add	r24, r24
     74e:	99 1f       	adc	r25, r25
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	82 0f       	add	r24, r18
     75a:	93 1f       	adc	r25, r19
     75c:	97 01       	movw	r18, r14
     75e:	28 1b       	sub	r18, r24
     760:	39 0b       	sbc	r19, r25
     762:	c9 01       	movw	r24, r18
     764:	c0 96       	adiw	r24, 0x30	; 48
     766:	44 0f       	add	r20, r20
     768:	55 1f       	adc	r21, r21
     76a:	e1 e0       	ldi	r30, 0x01	; 1
     76c:	f0 e0       	ldi	r31, 0x00	; 0
     76e:	ec 0f       	add	r30, r28
     770:	fd 1f       	adc	r31, r29
     772:	e4 0f       	add	r30, r20
     774:	f5 1f       	adc	r31, r21
     776:	91 83       	std	Z+1, r25	; 0x01
     778:	80 83       	st	Z, r24
		u16_a_number/=10;
     77a:	97 01       	movw	r18, r14
     77c:	0e 94 1e 09 	call	0x123c	; 0x123c <__umulhisi3>
     780:	7c 01       	movw	r14, r24
     782:	f6 94       	lsr	r15
     784:	e7 94       	ror	r14
     786:	f6 94       	lsr	r15
     788:	e7 94       	ror	r14
     78a:	f6 94       	lsr	r15
     78c:	e7 94       	ror	r14
		i++;
     78e:	1f 5f       	subi	r17, 0xFF	; 255
	
	if(u16_a_number == 0)
	{
		LCD_sendChar('0');
	}
	while( u16_a_number > 0)
     790:	e1 14       	cp	r14, r1
     792:	f1 04       	cpc	r15, r1
     794:	59 f6       	brne	.-106    	; 0x72c <LCD_sendInteger+0x2a>
     796:	0f c0       	rjmp	.+30     	; 0x7b6 <LCD_sendInteger+0xb4>
		u16_a_number/=10;
		i++;
	}
	for(j=i; j > 0; j--)
	{
		LCD_sendChar(u_l_toString[j-1]);
     798:	e1 2f       	mov	r30, r17
     79a:	f0 e0       	ldi	r31, 0x00	; 0
     79c:	31 97       	sbiw	r30, 0x01	; 1
     79e:	ee 0f       	add	r30, r30
     7a0:	ff 1f       	adc	r31, r31
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	90 e0       	ldi	r25, 0x00	; 0
     7a6:	8c 0f       	add	r24, r28
     7a8:	9d 1f       	adc	r25, r29
     7aa:	e8 0f       	add	r30, r24
     7ac:	f9 1f       	adc	r31, r25
     7ae:	80 81       	ld	r24, Z
     7b0:	0e 94 7d 03 	call	0x6fa	; 0x6fa <LCD_sendChar>
	{
		u_l_toString[i]=(u16_a_number % 10) +48;
		u16_a_number/=10;
		i++;
	}
	for(j=i; j > 0; j--)
     7b4:	11 50       	subi	r17, 0x01	; 1
     7b6:	11 11       	cpse	r17, r1
     7b8:	ef cf       	rjmp	.-34     	; 0x798 <LCD_sendInteger+0x96>
	{
		LCD_sendChar(u_l_toString[j-1]);
	}
	//LCD_sendString("  ");
	return char_send_OK;
     7ba:	80 e0       	ldi	r24, 0x00	; 0
     7bc:	64 96       	adiw	r28, 0x14	; 20
     7be:	0f b6       	in	r0, 0x3f	; 63
     7c0:	f8 94       	cli
     7c2:	de bf       	out	0x3e, r29	; 62
     7c4:	0f be       	out	0x3f, r0	; 63
     7c6:	cd bf       	out	0x3d, r28	; 61
     7c8:	df 91       	pop	r29
     7ca:	cf 91       	pop	r28
     7cc:	1f 91       	pop	r17
     7ce:	ff 90       	pop	r15
     7d0:	ef 90       	pop	r14
     7d2:	08 95       	ret

000007d4 <main>:

int main(void)
{
	/* Replace with your application code */

	APP_init();
     7d4:	0e 94 44 01 	call	0x288	; 0x288 <APP_init>
	
	while (1)
	{
		APP_defaultView();
     7d8:	0e 94 81 01 	call	0x302	; 0x302 <APP_defaultView>
     7dc:	fd cf       	rjmp	.-6      	; 0x7d8 <main+0x4>

000007de <ADC_read>:
	float f_a_sensorValue;
	uint16_t u16_l_digitalValue = 0;
    float    u16_l_analogValue  = 0;
    uint16_t u16_l_tempValue    = 0;
		
	set_bit(ADCSRA , 6); /** SATRT CONVERSION **/
     7de:	86 b1       	in	r24, 0x06	; 6
     7e0:	80 64       	ori	r24, 0x40	; 64
     7e2:	86 b9       	out	0x06, r24	; 6
	
	while( (ADCSRA & (1 << 4)) == 0); /** WAIT UNTILL CONVERSION ENDS **/
     7e4:	34 9b       	sbis	0x06, 4	; 6
     7e6:	fe cf       	rjmp	.-4      	; 0x7e4 <ADC_read+0x6>
	
	u16_l_digitalValue = ADC_VAL;
     7e8:	64 b1       	in	r22, 0x04	; 4
     7ea:	75 b1       	in	r23, 0x05	; 5
	u16_l_analogValue  = u16_l_digitalValue * ADC_STEP;
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__floatunsisf>
     7f4:	20 e0       	ldi	r18, 0x00	; 0
     7f6:	30 e0       	ldi	r19, 0x00	; 0
     7f8:	40 ea       	ldi	r20, 0xA0	; 160
     7fa:	5b e3       	ldi	r21, 0x3B	; 59
     7fc:	0e 94 9d 08 	call	0x113a	; 0x113a <__mulsf3>
	f_a_sensorValue = u16_l_analogValue / SENSOR_RESOLUTION; /** GET THE VALUE FORM ADC VALUE REGISTER **/
     800:	2b e2       	ldi	r18, 0x2B	; 43
     802:	37 e8       	ldi	r19, 0x87	; 135
     804:	46 e9       	ldi	r20, 0x96	; 150
     806:	5e e3       	ldi	r21, 0x3E	; 62
     808:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__divsf3>
	 
	return f_a_sensorValue; /** RETURN THE ANALOG VALUE **/ 
     80c:	0e 94 88 07 	call	0xf10	; 0xf10 <__fixunssfsi>
     810:	08 95       	ret

00000812 <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
     812:	44 23       	and	r20, r20
     814:	19 f0       	breq	.+6      	; 0x81c <DIO_setpinvalue+0xa>
     816:	41 30       	cpi	r20, 0x01	; 1
     818:	e9 f1       	breq	.+122    	; 0x894 <__stack+0x35>
     81a:	74 c0       	rjmp	.+232    	; 0x904 <__stack+0xa5>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
     81c:	81 30       	cpi	r24, 0x01	; 1
     81e:	99 f0       	breq	.+38     	; 0x846 <DIO_setpinvalue+0x34>
     820:	28 f0       	brcs	.+10     	; 0x82c <DIO_setpinvalue+0x1a>
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	e9 f0       	breq	.+58     	; 0x860 <__stack+0x1>
     826:	83 30       	cpi	r24, 0x03	; 3
     828:	41 f1       	breq	.+80     	; 0x87a <__stack+0x1b>
     82a:	6e c0       	rjmp	.+220    	; 0x908 <__stack+0xa9>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     82c:	2b b3       	in	r18, 0x1b	; 27
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	02 c0       	rjmp	.+4      	; 0x838 <DIO_setpinvalue+0x26>
     834:	88 0f       	add	r24, r24
     836:	99 1f       	adc	r25, r25
     838:	6a 95       	dec	r22
     83a:	e2 f7       	brpl	.-8      	; 0x834 <DIO_setpinvalue+0x22>
     83c:	80 95       	com	r24
     83e:	82 23       	and	r24, r18
     840:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     842:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     844:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     846:	28 b3       	in	r18, 0x18	; 24
     848:	81 e0       	ldi	r24, 0x01	; 1
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	02 c0       	rjmp	.+4      	; 0x852 <DIO_setpinvalue+0x40>
     84e:	88 0f       	add	r24, r24
     850:	99 1f       	adc	r25, r25
     852:	6a 95       	dec	r22
     854:	e2 f7       	brpl	.-8      	; 0x84e <DIO_setpinvalue+0x3c>
     856:	80 95       	com	r24
     858:	82 23       	and	r24, r18
     85a:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     85c:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     85e:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     860:	25 b3       	in	r18, 0x15	; 21
     862:	81 e0       	ldi	r24, 0x01	; 1
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	02 c0       	rjmp	.+4      	; 0x86c <__stack+0xd>
     868:	88 0f       	add	r24, r24
     86a:	99 1f       	adc	r25, r25
     86c:	6a 95       	dec	r22
     86e:	e2 f7       	brpl	.-8      	; 0x868 <__stack+0x9>
     870:	80 95       	com	r24
     872:	82 23       	and	r24, r18
     874:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     876:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     878:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     87a:	22 b3       	in	r18, 0x12	; 18
     87c:	81 e0       	ldi	r24, 0x01	; 1
     87e:	90 e0       	ldi	r25, 0x00	; 0
     880:	02 c0       	rjmp	.+4      	; 0x886 <__stack+0x27>
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	6a 95       	dec	r22
     888:	e2 f7       	brpl	.-8      	; 0x882 <__stack+0x23>
     88a:	80 95       	com	r24
     88c:	82 23       	and	r24, r18
     88e:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     890:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     892:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
     894:	81 30       	cpi	r24, 0x01	; 1
     896:	91 f0       	breq	.+36     	; 0x8bc <__stack+0x5d>
     898:	28 f0       	brcs	.+10     	; 0x8a4 <__stack+0x45>
     89a:	82 30       	cpi	r24, 0x02	; 2
     89c:	d9 f0       	breq	.+54     	; 0x8d4 <__stack+0x75>
     89e:	83 30       	cpi	r24, 0x03	; 3
     8a0:	29 f1       	breq	.+74     	; 0x8ec <__stack+0x8d>
     8a2:	34 c0       	rjmp	.+104    	; 0x90c <__stack+0xad>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     8a4:	2b b3       	in	r18, 0x1b	; 27
     8a6:	81 e0       	ldi	r24, 0x01	; 1
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	02 c0       	rjmp	.+4      	; 0x8b0 <__stack+0x51>
     8ac:	88 0f       	add	r24, r24
     8ae:	99 1f       	adc	r25, r25
     8b0:	6a 95       	dec	r22
     8b2:	e2 f7       	brpl	.-8      	; 0x8ac <__stack+0x4d>
     8b4:	82 2b       	or	r24, r18
     8b6:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     8b8:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     8ba:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     8bc:	28 b3       	in	r18, 0x18	; 24
     8be:	81 e0       	ldi	r24, 0x01	; 1
     8c0:	90 e0       	ldi	r25, 0x00	; 0
     8c2:	02 c0       	rjmp	.+4      	; 0x8c8 <__stack+0x69>
     8c4:	88 0f       	add	r24, r24
     8c6:	99 1f       	adc	r25, r25
     8c8:	6a 95       	dec	r22
     8ca:	e2 f7       	brpl	.-8      	; 0x8c4 <__stack+0x65>
     8cc:	82 2b       	or	r24, r18
     8ce:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     8d0:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     8d2:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     8d4:	25 b3       	in	r18, 0x15	; 21
     8d6:	81 e0       	ldi	r24, 0x01	; 1
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	02 c0       	rjmp	.+4      	; 0x8e0 <__stack+0x81>
     8dc:	88 0f       	add	r24, r24
     8de:	99 1f       	adc	r25, r25
     8e0:	6a 95       	dec	r22
     8e2:	e2 f7       	brpl	.-8      	; 0x8dc <__stack+0x7d>
     8e4:	82 2b       	or	r24, r18
     8e6:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     8e8:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     8ea:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     8ec:	22 b3       	in	r18, 0x12	; 18
     8ee:	81 e0       	ldi	r24, 0x01	; 1
     8f0:	90 e0       	ldi	r25, 0x00	; 0
     8f2:	02 c0       	rjmp	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	88 0f       	add	r24, r24
     8f6:	99 1f       	adc	r25, r25
     8f8:	6a 95       	dec	r22
     8fa:	e2 f7       	brpl	.-8      	; 0x8f4 <__stack+0x95>
     8fc:	82 2b       	or	r24, r18
     8fe:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     900:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     902:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
     904:	81 e0       	ldi	r24, 0x01	; 1
     906:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
     908:	81 e0       	ldi	r24, 0x01	; 1
     90a:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
     90c:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
     90e:	08 95       	ret

00000910 <DIO_readpin>:
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	99 f0       	breq	.+38     	; 0x93a <DIO_readpin+0x2a>
     914:	28 f0       	brcs	.+10     	; 0x920 <DIO_readpin+0x10>
     916:	82 30       	cpi	r24, 0x02	; 2
     918:	e9 f0       	breq	.+58     	; 0x954 <DIO_readpin+0x44>
     91a:	83 30       	cpi	r24, 0x03	; 3
     91c:	41 f1       	breq	.+80     	; 0x96e <DIO_readpin+0x5e>
     91e:	34 c0       	rjmp	.+104    	; 0x988 <DIO_readpin+0x78>
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     920:	89 b3       	in	r24, 0x19	; 25
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	02 c0       	rjmp	.+4      	; 0x92a <DIO_readpin+0x1a>
     926:	95 95       	asr	r25
     928:	87 95       	ror	r24
     92a:	6a 95       	dec	r22
     92c:	e2 f7       	brpl	.-8      	; 0x926 <DIO_readpin+0x16>
     92e:	81 70       	andi	r24, 0x01	; 1
     930:	89 bb       	out	0x19, r24	; 25
     932:	fa 01       	movw	r30, r20
     934:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     936:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     938:	08 95       	ret
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     93a:	86 b3       	in	r24, 0x16	; 22
     93c:	90 e0       	ldi	r25, 0x00	; 0
     93e:	02 c0       	rjmp	.+4      	; 0x944 <DIO_readpin+0x34>
     940:	95 95       	asr	r25
     942:	87 95       	ror	r24
     944:	6a 95       	dec	r22
     946:	e2 f7       	brpl	.-8      	; 0x940 <DIO_readpin+0x30>
     948:	81 70       	andi	r24, 0x01	; 1
     94a:	86 bb       	out	0x16, r24	; 22
     94c:	fa 01       	movw	r30, r20
     94e:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     950:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     952:	08 95       	ret
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     954:	83 b3       	in	r24, 0x13	; 19
     956:	90 e0       	ldi	r25, 0x00	; 0
     958:	02 c0       	rjmp	.+4      	; 0x95e <DIO_readpin+0x4e>
     95a:	95 95       	asr	r25
     95c:	87 95       	ror	r24
     95e:	6a 95       	dec	r22
     960:	e2 f7       	brpl	.-8      	; 0x95a <DIO_readpin+0x4a>
     962:	81 70       	andi	r24, 0x01	; 1
     964:	83 bb       	out	0x13, r24	; 19
     966:	fa 01       	movw	r30, r20
     968:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     96a:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     96c:	08 95       	ret
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     96e:	80 b3       	in	r24, 0x10	; 16
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	02 c0       	rjmp	.+4      	; 0x978 <DIO_readpin+0x68>
     974:	95 95       	asr	r25
     976:	87 95       	ror	r24
     978:	6a 95       	dec	r22
     97a:	e2 f7       	brpl	.-8      	; 0x974 <DIO_readpin+0x64>
     97c:	81 70       	andi	r24, 0x01	; 1
     97e:	80 bb       	out	0x10, r24	; 16
     980:	fa 01       	movw	r30, r20
     982:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     984:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     986:	08 95       	ret
		
		default:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
     988:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
     98a:	08 95       	ret

0000098c <__vector_1>:
{
	EXT_INT_2_callBack = callback;
}

ISR(EXT_INT_0)
{
     98c:	1f 92       	push	r1
     98e:	0f 92       	push	r0
     990:	0f b6       	in	r0, 0x3f	; 63
     992:	0f 92       	push	r0
     994:	11 24       	eor	r1, r1
     996:	2f 93       	push	r18
     998:	3f 93       	push	r19
     99a:	4f 93       	push	r20
     99c:	5f 93       	push	r21
     99e:	6f 93       	push	r22
     9a0:	7f 93       	push	r23
     9a2:	8f 93       	push	r24
     9a4:	9f 93       	push	r25
     9a6:	af 93       	push	r26
     9a8:	bf 93       	push	r27
     9aa:	ef 93       	push	r30
     9ac:	ff 93       	push	r31
	EXT_INT_0_callBack();
     9ae:	e0 91 0a 01 	lds	r30, 0x010A	; 0x80010a <EXT_INT_0_callBack>
     9b2:	f0 91 0b 01 	lds	r31, 0x010B	; 0x80010b <EXT_INT_0_callBack+0x1>
     9b6:	09 95       	icall
}
     9b8:	ff 91       	pop	r31
     9ba:	ef 91       	pop	r30
     9bc:	bf 91       	pop	r27
     9be:	af 91       	pop	r26
     9c0:	9f 91       	pop	r25
     9c2:	8f 91       	pop	r24
     9c4:	7f 91       	pop	r23
     9c6:	6f 91       	pop	r22
     9c8:	5f 91       	pop	r21
     9ca:	4f 91       	pop	r20
     9cc:	3f 91       	pop	r19
     9ce:	2f 91       	pop	r18
     9d0:	0f 90       	pop	r0
     9d2:	0f be       	out	0x3f, r0	; 63
     9d4:	0f 90       	pop	r0
     9d6:	1f 90       	pop	r1
     9d8:	18 95       	reti

000009da <__vector_2>:

ISR(EXT_INT_1)
{
     9da:	1f 92       	push	r1
     9dc:	0f 92       	push	r0
     9de:	0f b6       	in	r0, 0x3f	; 63
     9e0:	0f 92       	push	r0
     9e2:	11 24       	eor	r1, r1
     9e4:	2f 93       	push	r18
     9e6:	3f 93       	push	r19
     9e8:	4f 93       	push	r20
     9ea:	5f 93       	push	r21
     9ec:	6f 93       	push	r22
     9ee:	7f 93       	push	r23
     9f0:	8f 93       	push	r24
     9f2:	9f 93       	push	r25
     9f4:	af 93       	push	r26
     9f6:	bf 93       	push	r27
     9f8:	ef 93       	push	r30
     9fa:	ff 93       	push	r31
	EXT_INT_1_callBack();
     9fc:	e0 91 08 01 	lds	r30, 0x0108	; 0x800108 <EXT_INT_1_callBack>
     a00:	f0 91 09 01 	lds	r31, 0x0109	; 0x800109 <EXT_INT_1_callBack+0x1>
     a04:	09 95       	icall
}
     a06:	ff 91       	pop	r31
     a08:	ef 91       	pop	r30
     a0a:	bf 91       	pop	r27
     a0c:	af 91       	pop	r26
     a0e:	9f 91       	pop	r25
     a10:	8f 91       	pop	r24
     a12:	7f 91       	pop	r23
     a14:	6f 91       	pop	r22
     a16:	5f 91       	pop	r21
     a18:	4f 91       	pop	r20
     a1a:	3f 91       	pop	r19
     a1c:	2f 91       	pop	r18
     a1e:	0f 90       	pop	r0
     a20:	0f be       	out	0x3f, r0	; 63
     a22:	0f 90       	pop	r0
     a24:	1f 90       	pop	r1
     a26:	18 95       	reti

00000a28 <__vector_3>:

ISR(EXT_INT_2)
{
     a28:	1f 92       	push	r1
     a2a:	0f 92       	push	r0
     a2c:	0f b6       	in	r0, 0x3f	; 63
     a2e:	0f 92       	push	r0
     a30:	11 24       	eor	r1, r1
     a32:	2f 93       	push	r18
     a34:	3f 93       	push	r19
     a36:	4f 93       	push	r20
     a38:	5f 93       	push	r21
     a3a:	6f 93       	push	r22
     a3c:	7f 93       	push	r23
     a3e:	8f 93       	push	r24
     a40:	9f 93       	push	r25
     a42:	af 93       	push	r26
     a44:	bf 93       	push	r27
     a46:	ef 93       	push	r30
     a48:	ff 93       	push	r31
	EXT_INT_2_callBack();
     a4a:	e0 91 06 01 	lds	r30, 0x0106	; 0x800106 <__data_end>
     a4e:	f0 91 07 01 	lds	r31, 0x0107	; 0x800107 <__data_end+0x1>
     a52:	09 95       	icall
}
     a54:	ff 91       	pop	r31
     a56:	ef 91       	pop	r30
     a58:	bf 91       	pop	r27
     a5a:	af 91       	pop	r26
     a5c:	9f 91       	pop	r25
     a5e:	8f 91       	pop	r24
     a60:	7f 91       	pop	r23
     a62:	6f 91       	pop	r22
     a64:	5f 91       	pop	r21
     a66:	4f 91       	pop	r20
     a68:	3f 91       	pop	r19
     a6a:	2f 91       	pop	r18
     a6c:	0f 90       	pop	r0
     a6e:	0f be       	out	0x3f, r0	; 63
     a70:	0f 90       	pop	r0
     a72:	1f 90       	pop	r1
     a74:	18 95       	reti

00000a76 <TMR0_init>:
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
     a76:	83 b7       	in	r24, 0x33	; 51
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	83 bf       	out	0x33, r24	; 51
     a7c:	83 b7       	in	r24, 0x33	; 51
     a7e:	8f 7b       	andi	r24, 0xBF	; 191
     a80:	83 bf       	out	0x33, r24	; 51
     a82:	83 b7       	in	r24, 0x33	; 51
     a84:	87 7f       	andi	r24, 0xF7	; 247
     a86:	83 bf       	out	0x33, r24	; 51
     a88:	83 b7       	in	r24, 0x33	; 51
     a8a:	8f 7e       	andi	r24, 0xEF	; 239
     a8c:	83 bf       	out	0x33, r24	; 51
     a8e:	83 b7       	in	r24, 0x33	; 51
     a90:	8f 7d       	andi	r24, 0xDF	; 223
     a92:	83 bf       	out	0x33, r24	; 51
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	08 95       	ret

00000a98 <TMR0_start>:
     a98:	83 b7       	in	r24, 0x33	; 51
     a9a:	81 60       	ori	r24, 0x01	; 1
     a9c:	83 bf       	out	0x33, r24	; 51
     a9e:	83 b7       	in	r24, 0x33	; 51
     aa0:	8d 7f       	andi	r24, 0xFD	; 253
     aa2:	83 bf       	out	0x33, r24	; 51
     aa4:	83 b7       	in	r24, 0x33	; 51
     aa6:	8b 7f       	andi	r24, 0xFB	; 251
     aa8:	83 bf       	out	0x33, r24	; 51
     aaa:	80 e0       	ldi	r24, 0x00	; 0
     aac:	08 95       	ret

00000aae <TMR0_stop>:
     aae:	83 b7       	in	r24, 0x33	; 51
     ab0:	8e 7f       	andi	r24, 0xFE	; 254
     ab2:	83 bf       	out	0x33, r24	; 51
     ab4:	83 b7       	in	r24, 0x33	; 51
     ab6:	8d 7f       	andi	r24, 0xFD	; 253
     ab8:	83 bf       	out	0x33, r24	; 51
     aba:	83 b7       	in	r24, 0x33	; 51
     abc:	8b 7f       	andi	r24, 0xFB	; 251
     abe:	83 bf       	out	0x33, r24	; 51
     ac0:	80 e0       	ldi	r24, 0x00	; 0
     ac2:	08 95       	ret

00000ac4 <TMR0_delaymicros>:
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#elif TIMER0_PRESCALER_VAL == NO_PRESCALER
	
	u32_gs_tmr0nuofovs = (u32_a_delaymicros / 256);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/
     ac4:	bb 27       	eor	r27, r27
     ac6:	a9 2f       	mov	r26, r25
     ac8:	98 2f       	mov	r25, r24
     aca:	87 2f       	mov	r24, r23
     acc:	80 93 0c 01 	sts	0x010C, r24	; 0x80010c <u32_gs_tmr0nuofovs>
     ad0:	90 93 0d 01 	sts	0x010D, r25	; 0x80010d <u32_gs_tmr0nuofovs+0x1>
     ad4:	a0 93 0e 01 	sts	0x010E, r26	; 0x80010e <u32_gs_tmr0nuofovs+0x2>
     ad8:	b0 93 0f 01 	sts	0x010F, r27	; 0x80010f <u32_gs_tmr0nuofovs+0x3>
	
	TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
     adc:	12 be       	out	0x32, r1	; 50
	
	en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
     ade:	0e 94 4c 05 	call	0xa98	; 0xa98 <TMR0_start>
/** @param      delay_in_microseconds                                          */
/** @return     TMR0_delay status                                              */
/*******************************************************************************/
TMR0_delay_error TMR0_delaymicros(uint32_t u32_a_delaymicros)
{
	uint32_t u32_a_overflowcounter = 0 ;
     ae2:	40 e0       	ldi	r20, 0x00	; 0
     ae4:	50 e0       	ldi	r21, 0x00	; 0
     ae6:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
     ae8:	0a c0       	rjmp	.+20     	; 0xafe <TMR0_delaymicros+0x3a>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
     aea:	08 b6       	in	r0, 0x38	; 56
     aec:	00 fe       	sbrs	r0, 0
     aee:	fd cf       	rjmp	.-6      	; 0xaea <TMR0_delaymicros+0x26>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
     af0:	88 b7       	in	r24, 0x38	; 56
     af2:	81 60       	ori	r24, 0x01	; 1
     af4:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
     af6:	4f 5f       	subi	r20, 0xFF	; 255
     af8:	5f 4f       	sbci	r21, 0xFF	; 255
     afa:	6f 4f       	sbci	r22, 0xFF	; 255
     afc:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
     afe:	80 91 0c 01 	lds	r24, 0x010C	; 0x80010c <u32_gs_tmr0nuofovs>
     b02:	90 91 0d 01 	lds	r25, 0x010D	; 0x80010d <u32_gs_tmr0nuofovs+0x1>
     b06:	a0 91 0e 01 	lds	r26, 0x010E	; 0x80010e <u32_gs_tmr0nuofovs+0x2>
     b0a:	b0 91 0f 01 	lds	r27, 0x010F	; 0x80010f <u32_gs_tmr0nuofovs+0x3>
     b0e:	48 17       	cp	r20, r24
     b10:	59 07       	cpc	r21, r25
     b12:	6a 07       	cpc	r22, r26
     b14:	7b 07       	cpc	r23, r27
     b16:	48 f3       	brcs	.-46     	; 0xaea <TMR0_delaymicros+0x26>
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_a_overflowcounter = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/

	TMR0_stop(); /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
     b18:	0e 94 57 05 	call	0xaae	; 0xaae <TMR0_stop>
	
	return en_a_delaystatus ; 
     b1c:	80 e0       	ldi	r24, 0x00	; 0
     b1e:	08 95       	ret

00000b20 <TIMER2_normalMode>:
        u16_l_count++;
    }
    //close the timer
    TCCR2 = 0;
    return SUCCESS;
}
     b20:	85 b5       	in	r24, 0x25	; 37
     b22:	8f 7e       	andi	r24, 0xEF	; 239
     b24:	85 bd       	out	0x25, r24	; 37
     b26:	85 b5       	in	r24, 0x25	; 37
     b28:	8f 7d       	andi	r24, 0xDF	; 223
     b2a:	85 bd       	out	0x25, r24	; 37
     b2c:	80 e0       	ldi	r24, 0x00	; 0
     b2e:	08 95       	ret

00000b30 <TIMER2_perscalerMode>:
     b30:	8b 30       	cpi	r24, 0x0B	; 11
     b32:	91 05       	cpc	r25, r1
     b34:	09 f4       	brne	.+2      	; 0xb38 <TIMER2_perscalerMode+0x8>
     b36:	54 c0       	rjmp	.+168    	; 0xbe0 <TIMER2_perscalerMode+0xb0>
     b38:	38 f4       	brcc	.+14     	; 0xb48 <TIMER2_perscalerMode+0x18>
     b3a:	81 30       	cpi	r24, 0x01	; 1
     b3c:	91 05       	cpc	r25, r1
     b3e:	f1 f0       	breq	.+60     	; 0xb7c <TIMER2_perscalerMode+0x4c>
     b40:	98 f0       	brcs	.+38     	; 0xb68 <TIMER2_perscalerMode+0x38>
     b42:	08 97       	sbiw	r24, 0x08	; 8
     b44:	29 f1       	breq	.+74     	; 0xb90 <TIMER2_perscalerMode+0x60>
     b46:	60 c0       	rjmp	.+192    	; 0xc08 <TIMER2_perscalerMode+0xd8>
     b48:	80 34       	cpi	r24, 0x40	; 64
     b4a:	91 05       	cpc	r25, r1
     b4c:	59 f1       	breq	.+86     	; 0xba4 <TIMER2_perscalerMode+0x74>
     b4e:	20 f4       	brcc	.+8      	; 0xb58 <TIMER2_perscalerMode+0x28>
     b50:	0c 97       	sbiw	r24, 0x0c	; 12
     b52:	09 f4       	brne	.+2      	; 0xb56 <TIMER2_perscalerMode+0x26>
     b54:	4f c0       	rjmp	.+158    	; 0xbf4 <TIMER2_perscalerMode+0xc4>
     b56:	58 c0       	rjmp	.+176    	; 0xc08 <TIMER2_perscalerMode+0xd8>
     b58:	81 15       	cp	r24, r1
     b5a:	21 e0       	ldi	r18, 0x01	; 1
     b5c:	92 07       	cpc	r25, r18
     b5e:	61 f1       	breq	.+88     	; 0xbb8 <TIMER2_perscalerMode+0x88>
     b60:	81 15       	cp	r24, r1
     b62:	94 40       	sbci	r25, 0x04	; 4
     b64:	99 f1       	breq	.+102    	; 0xbcc <TIMER2_perscalerMode+0x9c>
     b66:	50 c0       	rjmp	.+160    	; 0xc08 <TIMER2_perscalerMode+0xd8>
     b68:	85 b5       	in	r24, 0x25	; 37
     b6a:	8e 7f       	andi	r24, 0xFE	; 254
     b6c:	85 bd       	out	0x25, r24	; 37
     b6e:	85 b5       	in	r24, 0x25	; 37
     b70:	8d 7f       	andi	r24, 0xFD	; 253
     b72:	85 bd       	out	0x25, r24	; 37
     b74:	85 b5       	in	r24, 0x25	; 37
     b76:	8b 7f       	andi	r24, 0xFB	; 251
     b78:	85 bd       	out	0x25, r24	; 37
     b7a:	4f c0       	rjmp	.+158    	; 0xc1a <TIMER2_perscalerMode+0xea>
     b7c:	85 b5       	in	r24, 0x25	; 37
     b7e:	81 60       	ori	r24, 0x01	; 1
     b80:	85 bd       	out	0x25, r24	; 37
     b82:	85 b5       	in	r24, 0x25	; 37
     b84:	8d 7f       	andi	r24, 0xFD	; 253
     b86:	85 bd       	out	0x25, r24	; 37
     b88:	85 b5       	in	r24, 0x25	; 37
     b8a:	8b 7f       	andi	r24, 0xFB	; 251
     b8c:	85 bd       	out	0x25, r24	; 37
     b8e:	45 c0       	rjmp	.+138    	; 0xc1a <TIMER2_perscalerMode+0xea>
     b90:	85 b5       	in	r24, 0x25	; 37
     b92:	8e 7f       	andi	r24, 0xFE	; 254
     b94:	85 bd       	out	0x25, r24	; 37
     b96:	85 b5       	in	r24, 0x25	; 37
     b98:	82 60       	ori	r24, 0x02	; 2
     b9a:	85 bd       	out	0x25, r24	; 37
     b9c:	85 b5       	in	r24, 0x25	; 37
     b9e:	8b 7f       	andi	r24, 0xFB	; 251
     ba0:	85 bd       	out	0x25, r24	; 37
     ba2:	3b c0       	rjmp	.+118    	; 0xc1a <TIMER2_perscalerMode+0xea>
     ba4:	85 b5       	in	r24, 0x25	; 37
     ba6:	81 60       	ori	r24, 0x01	; 1
     ba8:	85 bd       	out	0x25, r24	; 37
     baa:	85 b5       	in	r24, 0x25	; 37
     bac:	82 60       	ori	r24, 0x02	; 2
     bae:	85 bd       	out	0x25, r24	; 37
     bb0:	85 b5       	in	r24, 0x25	; 37
     bb2:	8b 7f       	andi	r24, 0xFB	; 251
     bb4:	85 bd       	out	0x25, r24	; 37
     bb6:	31 c0       	rjmp	.+98     	; 0xc1a <TIMER2_perscalerMode+0xea>
     bb8:	85 b5       	in	r24, 0x25	; 37
     bba:	8e 7f       	andi	r24, 0xFE	; 254
     bbc:	85 bd       	out	0x25, r24	; 37
     bbe:	85 b5       	in	r24, 0x25	; 37
     bc0:	8d 7f       	andi	r24, 0xFD	; 253
     bc2:	85 bd       	out	0x25, r24	; 37
     bc4:	85 b5       	in	r24, 0x25	; 37
     bc6:	84 60       	ori	r24, 0x04	; 4
     bc8:	85 bd       	out	0x25, r24	; 37
     bca:	27 c0       	rjmp	.+78     	; 0xc1a <TIMER2_perscalerMode+0xea>
     bcc:	85 b5       	in	r24, 0x25	; 37
     bce:	81 60       	ori	r24, 0x01	; 1
     bd0:	85 bd       	out	0x25, r24	; 37
     bd2:	85 b5       	in	r24, 0x25	; 37
     bd4:	8d 7f       	andi	r24, 0xFD	; 253
     bd6:	85 bd       	out	0x25, r24	; 37
     bd8:	85 b5       	in	r24, 0x25	; 37
     bda:	84 60       	ori	r24, 0x04	; 4
     bdc:	85 bd       	out	0x25, r24	; 37
     bde:	1d c0       	rjmp	.+58     	; 0xc1a <TIMER2_perscalerMode+0xea>
     be0:	85 b5       	in	r24, 0x25	; 37
     be2:	81 60       	ori	r24, 0x01	; 1
     be4:	85 bd       	out	0x25, r24	; 37
     be6:	85 b5       	in	r24, 0x25	; 37
     be8:	82 60       	ori	r24, 0x02	; 2
     bea:	85 bd       	out	0x25, r24	; 37
     bec:	85 b5       	in	r24, 0x25	; 37
     bee:	8b 7f       	andi	r24, 0xFB	; 251
     bf0:	85 bd       	out	0x25, r24	; 37
     bf2:	13 c0       	rjmp	.+38     	; 0xc1a <TIMER2_perscalerMode+0xea>
     bf4:	85 b5       	in	r24, 0x25	; 37
     bf6:	81 60       	ori	r24, 0x01	; 1
     bf8:	85 bd       	out	0x25, r24	; 37
     bfa:	85 b5       	in	r24, 0x25	; 37
     bfc:	82 60       	ori	r24, 0x02	; 2
     bfe:	85 bd       	out	0x25, r24	; 37
     c00:	85 b5       	in	r24, 0x25	; 37
     c02:	84 60       	ori	r24, 0x04	; 4
     c04:	85 bd       	out	0x25, r24	; 37
     c06:	09 c0       	rjmp	.+18     	; 0xc1a <TIMER2_perscalerMode+0xea>
     c08:	85 b5       	in	r24, 0x25	; 37
     c0a:	8e 7f       	andi	r24, 0xFE	; 254
     c0c:	85 bd       	out	0x25, r24	; 37
     c0e:	85 b5       	in	r24, 0x25	; 37
     c10:	8d 7f       	andi	r24, 0xFD	; 253
     c12:	85 bd       	out	0x25, r24	; 37
     c14:	85 b5       	in	r24, 0x25	; 37
     c16:	8b 7f       	andi	r24, 0xFB	; 251
     c18:	85 bd       	out	0x25, r24	; 37
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	08 95       	ret

00000c1e <TIMER2_getInitialValue>:
     c1e:	cf 92       	push	r12
     c20:	df 92       	push	r13
     c22:	ef 92       	push	r14
     c24:	ff 92       	push	r15
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	00 d0       	rcall	.+0      	; 0xc2c <TIMER2_getInitialValue+0xe>
     c2c:	cd b7       	in	r28, 0x3d	; 61
     c2e:	de b7       	in	r29, 0x3e	; 62
     c30:	1a 82       	std	Y+2, r1	; 0x02
     c32:	19 82       	std	Y+1, r1	; 0x01
     c34:	2f e6       	ldi	r18, 0x6F	; 111
     c36:	32 e1       	ldi	r19, 0x12	; 18
     c38:	43 e8       	ldi	r20, 0x83	; 131
     c3a:	5a e3       	ldi	r21, 0x3A	; 58
     c3c:	0e 94 9d 08 	call	0x113a	; 0x113a <__mulsf3>
     c40:	6b 01       	movw	r12, r22
     c42:	7c 01       	movw	r14, r24
     c44:	2d eb       	ldi	r18, 0xBD	; 189
     c46:	37 e3       	ldi	r19, 0x37	; 55
     c48:	46 e8       	ldi	r20, 0x86	; 134
     c4a:	59 e3       	ldi	r21, 0x39	; 57
     c4c:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__divsf3>
     c50:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <ceil>
     c54:	0e 94 88 07 	call	0xf10	; 0xf10 <__fixunssfsi>
     c58:	7a 83       	std	Y+2, r23	; 0x02
     c5a:	69 83       	std	Y+1, r22	; 0x01
     c5c:	2d eb       	ldi	r18, 0xBD	; 189
     c5e:	37 e3       	ldi	r19, 0x37	; 55
     c60:	46 e8       	ldi	r20, 0x86	; 134
     c62:	55 e3       	ldi	r21, 0x35	; 53
     c64:	c7 01       	movw	r24, r14
     c66:	b6 01       	movw	r22, r12
     c68:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__divsf3>
     c6c:	6b 01       	movw	r12, r22
     c6e:	7c 01       	movw	r14, r24
     c70:	69 81       	ldd	r22, Y+1	; 0x01
     c72:	7a 81       	ldd	r23, Y+2	; 0x02
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	90 e0       	ldi	r25, 0x00	; 0
     c78:	0e 94 b7 07 	call	0xf6e	; 0xf6e <__floatunsisf>
     c7c:	9b 01       	movw	r18, r22
     c7e:	ac 01       	movw	r20, r24
     c80:	c7 01       	movw	r24, r14
     c82:	b6 01       	movw	r22, r12
     c84:	0e 94 0f 07 	call	0xe1e	; 0xe1e <__divsf3>
     c88:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <ceil>
     c8c:	9b 01       	movw	r18, r22
     c8e:	ac 01       	movw	r20, r24
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	70 e0       	ldi	r23, 0x00	; 0
     c94:	80 e8       	ldi	r24, 0x80	; 128
     c96:	93 e4       	ldi	r25, 0x43	; 67
     c98:	0e 94 8b 06 	call	0xd16	; 0xd16 <__subsf3>
     c9c:	0e 94 88 07 	call	0xf10	; 0xf10 <__fixunssfsi>
     ca0:	70 93 13 01 	sts	0x0113, r23	; 0x800113 <u16_gs_t2_initial_value+0x1>
     ca4:	60 93 12 01 	sts	0x0112, r22	; 0x800112 <u16_gs_t2_initial_value>
     ca8:	89 81       	ldd	r24, Y+1	; 0x01
     caa:	9a 81       	ldd	r25, Y+2	; 0x02
     cac:	0f 90       	pop	r0
     cae:	0f 90       	pop	r0
     cb0:	df 91       	pop	r29
     cb2:	cf 91       	pop	r28
     cb4:	ff 90       	pop	r15
     cb6:	ef 90       	pop	r14
     cb8:	df 90       	pop	r13
     cba:	cf 90       	pop	r12
     cbc:	08 95       	ret

00000cbe <set_TIMER2_OVF_callBack>:
    return u16_l_numberOfOVF;
}

void set_TIMER2_OVF_callBack(void (*callback) (void))
{
	TIMER2_OVF_callBack = callback;
     cbe:	90 93 11 01 	sts	0x0111, r25	; 0x800111 <TIMER2_OVF_callBack+0x1>
     cc2:	80 93 10 01 	sts	0x0110, r24	; 0x800110 <TIMER2_OVF_callBack>
     cc6:	08 95       	ret

00000cc8 <__vector_5>:
}

ISR(TIMER2_OVF)
{
     cc8:	1f 92       	push	r1
     cca:	0f 92       	push	r0
     ccc:	0f b6       	in	r0, 0x3f	; 63
     cce:	0f 92       	push	r0
     cd0:	11 24       	eor	r1, r1
     cd2:	2f 93       	push	r18
     cd4:	3f 93       	push	r19
     cd6:	4f 93       	push	r20
     cd8:	5f 93       	push	r21
     cda:	6f 93       	push	r22
     cdc:	7f 93       	push	r23
     cde:	8f 93       	push	r24
     ce0:	9f 93       	push	r25
     ce2:	af 93       	push	r26
     ce4:	bf 93       	push	r27
     ce6:	ef 93       	push	r30
     ce8:	ff 93       	push	r31
	TIMER2_OVF_callBack();
     cea:	e0 91 10 01 	lds	r30, 0x0110	; 0x800110 <TIMER2_OVF_callBack>
     cee:	f0 91 11 01 	lds	r31, 0x0111	; 0x800111 <TIMER2_OVF_callBack+0x1>
     cf2:	09 95       	icall
     cf4:	ff 91       	pop	r31
     cf6:	ef 91       	pop	r30
     cf8:	bf 91       	pop	r27
     cfa:	af 91       	pop	r26
     cfc:	9f 91       	pop	r25
     cfe:	8f 91       	pop	r24
     d00:	7f 91       	pop	r23
     d02:	6f 91       	pop	r22
     d04:	5f 91       	pop	r21
     d06:	4f 91       	pop	r20
     d08:	3f 91       	pop	r19
     d0a:	2f 91       	pop	r18
     d0c:	0f 90       	pop	r0
     d0e:	0f be       	out	0x3f, r0	; 63
     d10:	0f 90       	pop	r0
     d12:	1f 90       	pop	r1
     d14:	18 95       	reti

00000d16 <__subsf3>:
     d16:	50 58       	subi	r21, 0x80	; 128

00000d18 <__addsf3>:
     d18:	bb 27       	eor	r27, r27
     d1a:	aa 27       	eor	r26, r26
     d1c:	0e 94 a3 06 	call	0xd46	; 0xd46 <__addsf3x>
     d20:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__fp_round>
     d24:	0e 94 3d 08 	call	0x107a	; 0x107a <__fp_pscA>
     d28:	38 f0       	brcs	.+14     	; 0xd38 <__addsf3+0x20>
     d2a:	0e 94 44 08 	call	0x1088	; 0x1088 <__fp_pscB>
     d2e:	20 f0       	brcs	.+8      	; 0xd38 <__addsf3+0x20>
     d30:	39 f4       	brne	.+14     	; 0xd40 <__addsf3+0x28>
     d32:	9f 3f       	cpi	r25, 0xFF	; 255
     d34:	19 f4       	brne	.+6      	; 0xd3c <__addsf3+0x24>
     d36:	26 f4       	brtc	.+8      	; 0xd40 <__addsf3+0x28>
     d38:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__fp_nan>
     d3c:	0e f4       	brtc	.+2      	; 0xd40 <__addsf3+0x28>
     d3e:	e0 95       	com	r30
     d40:	e7 fb       	bst	r30, 7
     d42:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_inf>

00000d46 <__addsf3x>:
     d46:	e9 2f       	mov	r30, r25
     d48:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__fp_split3>
     d4c:	58 f3       	brcs	.-42     	; 0xd24 <__addsf3+0xc>
     d4e:	ba 17       	cp	r27, r26
     d50:	62 07       	cpc	r22, r18
     d52:	73 07       	cpc	r23, r19
     d54:	84 07       	cpc	r24, r20
     d56:	95 07       	cpc	r25, r21
     d58:	20 f0       	brcs	.+8      	; 0xd62 <__addsf3x+0x1c>
     d5a:	79 f4       	brne	.+30     	; 0xd7a <__addsf3x+0x34>
     d5c:	a6 f5       	brtc	.+104    	; 0xdc6 <__addsf3x+0x80>
     d5e:	0c 94 96 08 	jmp	0x112c	; 0x112c <__fp_zero>
     d62:	0e f4       	brtc	.+2      	; 0xd66 <__addsf3x+0x20>
     d64:	e0 95       	com	r30
     d66:	0b 2e       	mov	r0, r27
     d68:	ba 2f       	mov	r27, r26
     d6a:	a0 2d       	mov	r26, r0
     d6c:	0b 01       	movw	r0, r22
     d6e:	b9 01       	movw	r22, r18
     d70:	90 01       	movw	r18, r0
     d72:	0c 01       	movw	r0, r24
     d74:	ca 01       	movw	r24, r20
     d76:	a0 01       	movw	r20, r0
     d78:	11 24       	eor	r1, r1
     d7a:	ff 27       	eor	r31, r31
     d7c:	59 1b       	sub	r21, r25
     d7e:	99 f0       	breq	.+38     	; 0xda6 <__addsf3x+0x60>
     d80:	59 3f       	cpi	r21, 0xF9	; 249
     d82:	50 f4       	brcc	.+20     	; 0xd98 <__addsf3x+0x52>
     d84:	50 3e       	cpi	r21, 0xE0	; 224
     d86:	68 f1       	brcs	.+90     	; 0xde2 <__addsf3x+0x9c>
     d88:	1a 16       	cp	r1, r26
     d8a:	f0 40       	sbci	r31, 0x00	; 0
     d8c:	a2 2f       	mov	r26, r18
     d8e:	23 2f       	mov	r18, r19
     d90:	34 2f       	mov	r19, r20
     d92:	44 27       	eor	r20, r20
     d94:	58 5f       	subi	r21, 0xF8	; 248
     d96:	f3 cf       	rjmp	.-26     	; 0xd7e <__addsf3x+0x38>
     d98:	46 95       	lsr	r20
     d9a:	37 95       	ror	r19
     d9c:	27 95       	ror	r18
     d9e:	a7 95       	ror	r26
     da0:	f0 40       	sbci	r31, 0x00	; 0
     da2:	53 95       	inc	r21
     da4:	c9 f7       	brne	.-14     	; 0xd98 <__addsf3x+0x52>
     da6:	7e f4       	brtc	.+30     	; 0xdc6 <__addsf3x+0x80>
     da8:	1f 16       	cp	r1, r31
     daa:	ba 0b       	sbc	r27, r26
     dac:	62 0b       	sbc	r22, r18
     dae:	73 0b       	sbc	r23, r19
     db0:	84 0b       	sbc	r24, r20
     db2:	ba f0       	brmi	.+46     	; 0xde2 <__addsf3x+0x9c>
     db4:	91 50       	subi	r25, 0x01	; 1
     db6:	a1 f0       	breq	.+40     	; 0xde0 <__addsf3x+0x9a>
     db8:	ff 0f       	add	r31, r31
     dba:	bb 1f       	adc	r27, r27
     dbc:	66 1f       	adc	r22, r22
     dbe:	77 1f       	adc	r23, r23
     dc0:	88 1f       	adc	r24, r24
     dc2:	c2 f7       	brpl	.-16     	; 0xdb4 <__addsf3x+0x6e>
     dc4:	0e c0       	rjmp	.+28     	; 0xde2 <__addsf3x+0x9c>
     dc6:	ba 0f       	add	r27, r26
     dc8:	62 1f       	adc	r22, r18
     dca:	73 1f       	adc	r23, r19
     dcc:	84 1f       	adc	r24, r20
     dce:	48 f4       	brcc	.+18     	; 0xde2 <__addsf3x+0x9c>
     dd0:	87 95       	ror	r24
     dd2:	77 95       	ror	r23
     dd4:	67 95       	ror	r22
     dd6:	b7 95       	ror	r27
     dd8:	f7 95       	ror	r31
     dda:	9e 3f       	cpi	r25, 0xFE	; 254
     ddc:	08 f0       	brcs	.+2      	; 0xde0 <__addsf3x+0x9a>
     dde:	b0 cf       	rjmp	.-160    	; 0xd40 <__addsf3+0x28>
     de0:	93 95       	inc	r25
     de2:	88 0f       	add	r24, r24
     de4:	08 f0       	brcs	.+2      	; 0xde8 <__addsf3x+0xa2>
     de6:	99 27       	eor	r25, r25
     de8:	ee 0f       	add	r30, r30
     dea:	97 95       	ror	r25
     dec:	87 95       	ror	r24
     dee:	08 95       	ret

00000df0 <ceil>:
     df0:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fp_trunc>
     df4:	90 f0       	brcs	.+36     	; 0xe1a <ceil+0x2a>
     df6:	9f 37       	cpi	r25, 0x7F	; 127
     df8:	48 f4       	brcc	.+18     	; 0xe0c <ceil+0x1c>
     dfa:	91 11       	cpse	r25, r1
     dfc:	16 f4       	brtc	.+4      	; 0xe02 <ceil+0x12>
     dfe:	0c 94 97 08 	jmp	0x112e	; 0x112e <__fp_szero>
     e02:	60 e0       	ldi	r22, 0x00	; 0
     e04:	70 e0       	ldi	r23, 0x00	; 0
     e06:	80 e8       	ldi	r24, 0x80	; 128
     e08:	9f e3       	ldi	r25, 0x3F	; 63
     e0a:	08 95       	ret
     e0c:	26 f0       	brts	.+8      	; 0xe16 <ceil+0x26>
     e0e:	1b 16       	cp	r1, r27
     e10:	61 1d       	adc	r22, r1
     e12:	71 1d       	adc	r23, r1
     e14:	81 1d       	adc	r24, r1
     e16:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_mintl>
     e1a:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__fp_mpack>

00000e1e <__divsf3>:
     e1e:	0e 94 23 07 	call	0xe46	; 0xe46 <__divsf3x>
     e22:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__fp_round>
     e26:	0e 94 44 08 	call	0x1088	; 0x1088 <__fp_pscB>
     e2a:	58 f0       	brcs	.+22     	; 0xe42 <__divsf3+0x24>
     e2c:	0e 94 3d 08 	call	0x107a	; 0x107a <__fp_pscA>
     e30:	40 f0       	brcs	.+16     	; 0xe42 <__divsf3+0x24>
     e32:	29 f4       	brne	.+10     	; 0xe3e <__divsf3+0x20>
     e34:	5f 3f       	cpi	r21, 0xFF	; 255
     e36:	29 f0       	breq	.+10     	; 0xe42 <__divsf3+0x24>
     e38:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_inf>
     e3c:	51 11       	cpse	r21, r1
     e3e:	0c 94 97 08 	jmp	0x112e	; 0x112e <__fp_szero>
     e42:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__fp_nan>

00000e46 <__divsf3x>:
     e46:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__fp_split3>
     e4a:	68 f3       	brcs	.-38     	; 0xe26 <__divsf3+0x8>

00000e4c <__divsf3_pse>:
     e4c:	99 23       	and	r25, r25
     e4e:	b1 f3       	breq	.-20     	; 0xe3c <__divsf3+0x1e>
     e50:	55 23       	and	r21, r21
     e52:	91 f3       	breq	.-28     	; 0xe38 <__divsf3+0x1a>
     e54:	95 1b       	sub	r25, r21
     e56:	55 0b       	sbc	r21, r21
     e58:	bb 27       	eor	r27, r27
     e5a:	aa 27       	eor	r26, r26
     e5c:	62 17       	cp	r22, r18
     e5e:	73 07       	cpc	r23, r19
     e60:	84 07       	cpc	r24, r20
     e62:	38 f0       	brcs	.+14     	; 0xe72 <__divsf3_pse+0x26>
     e64:	9f 5f       	subi	r25, 0xFF	; 255
     e66:	5f 4f       	sbci	r21, 0xFF	; 255
     e68:	22 0f       	add	r18, r18
     e6a:	33 1f       	adc	r19, r19
     e6c:	44 1f       	adc	r20, r20
     e6e:	aa 1f       	adc	r26, r26
     e70:	a9 f3       	breq	.-22     	; 0xe5c <__divsf3_pse+0x10>
     e72:	35 d0       	rcall	.+106    	; 0xede <__divsf3_pse+0x92>
     e74:	0e 2e       	mov	r0, r30
     e76:	3a f0       	brmi	.+14     	; 0xe86 <__divsf3_pse+0x3a>
     e78:	e0 e8       	ldi	r30, 0x80	; 128
     e7a:	32 d0       	rcall	.+100    	; 0xee0 <__divsf3_pse+0x94>
     e7c:	91 50       	subi	r25, 0x01	; 1
     e7e:	50 40       	sbci	r21, 0x00	; 0
     e80:	e6 95       	lsr	r30
     e82:	00 1c       	adc	r0, r0
     e84:	ca f7       	brpl	.-14     	; 0xe78 <__divsf3_pse+0x2c>
     e86:	2b d0       	rcall	.+86     	; 0xede <__divsf3_pse+0x92>
     e88:	fe 2f       	mov	r31, r30
     e8a:	29 d0       	rcall	.+82     	; 0xede <__divsf3_pse+0x92>
     e8c:	66 0f       	add	r22, r22
     e8e:	77 1f       	adc	r23, r23
     e90:	88 1f       	adc	r24, r24
     e92:	bb 1f       	adc	r27, r27
     e94:	26 17       	cp	r18, r22
     e96:	37 07       	cpc	r19, r23
     e98:	48 07       	cpc	r20, r24
     e9a:	ab 07       	cpc	r26, r27
     e9c:	b0 e8       	ldi	r27, 0x80	; 128
     e9e:	09 f0       	breq	.+2      	; 0xea2 <__divsf3_pse+0x56>
     ea0:	bb 0b       	sbc	r27, r27
     ea2:	80 2d       	mov	r24, r0
     ea4:	bf 01       	movw	r22, r30
     ea6:	ff 27       	eor	r31, r31
     ea8:	93 58       	subi	r25, 0x83	; 131
     eaa:	5f 4f       	sbci	r21, 0xFF	; 255
     eac:	3a f0       	brmi	.+14     	; 0xebc <__divsf3_pse+0x70>
     eae:	9e 3f       	cpi	r25, 0xFE	; 254
     eb0:	51 05       	cpc	r21, r1
     eb2:	78 f0       	brcs	.+30     	; 0xed2 <__divsf3_pse+0x86>
     eb4:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_inf>
     eb8:	0c 94 97 08 	jmp	0x112e	; 0x112e <__fp_szero>
     ebc:	5f 3f       	cpi	r21, 0xFF	; 255
     ebe:	e4 f3       	brlt	.-8      	; 0xeb8 <__divsf3_pse+0x6c>
     ec0:	98 3e       	cpi	r25, 0xE8	; 232
     ec2:	d4 f3       	brlt	.-12     	; 0xeb8 <__divsf3_pse+0x6c>
     ec4:	86 95       	lsr	r24
     ec6:	77 95       	ror	r23
     ec8:	67 95       	ror	r22
     eca:	b7 95       	ror	r27
     ecc:	f7 95       	ror	r31
     ece:	9f 5f       	subi	r25, 0xFF	; 255
     ed0:	c9 f7       	brne	.-14     	; 0xec4 <__divsf3_pse+0x78>
     ed2:	88 0f       	add	r24, r24
     ed4:	91 1d       	adc	r25, r1
     ed6:	96 95       	lsr	r25
     ed8:	87 95       	ror	r24
     eda:	97 f9       	bld	r25, 7
     edc:	08 95       	ret
     ede:	e1 e0       	ldi	r30, 0x01	; 1
     ee0:	66 0f       	add	r22, r22
     ee2:	77 1f       	adc	r23, r23
     ee4:	88 1f       	adc	r24, r24
     ee6:	bb 1f       	adc	r27, r27
     ee8:	62 17       	cp	r22, r18
     eea:	73 07       	cpc	r23, r19
     eec:	84 07       	cpc	r24, r20
     eee:	ba 07       	cpc	r27, r26
     ef0:	20 f0       	brcs	.+8      	; 0xefa <__divsf3_pse+0xae>
     ef2:	62 1b       	sub	r22, r18
     ef4:	73 0b       	sbc	r23, r19
     ef6:	84 0b       	sbc	r24, r20
     ef8:	ba 0b       	sbc	r27, r26
     efa:	ee 1f       	adc	r30, r30
     efc:	88 f7       	brcc	.-30     	; 0xee0 <__divsf3_pse+0x94>
     efe:	e0 95       	com	r30
     f00:	08 95       	ret

00000f02 <__fixsfsi>:
     f02:	0e 94 88 07 	call	0xf10	; 0xf10 <__fixunssfsi>
     f06:	68 94       	set
     f08:	b1 11       	cpse	r27, r1
     f0a:	0c 94 97 08 	jmp	0x112e	; 0x112e <__fp_szero>
     f0e:	08 95       	ret

00000f10 <__fixunssfsi>:
     f10:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__fp_splitA>
     f14:	88 f0       	brcs	.+34     	; 0xf38 <__fixunssfsi+0x28>
     f16:	9f 57       	subi	r25, 0x7F	; 127
     f18:	98 f0       	brcs	.+38     	; 0xf40 <__fixunssfsi+0x30>
     f1a:	b9 2f       	mov	r27, r25
     f1c:	99 27       	eor	r25, r25
     f1e:	b7 51       	subi	r27, 0x17	; 23
     f20:	b0 f0       	brcs	.+44     	; 0xf4e <__fixunssfsi+0x3e>
     f22:	e1 f0       	breq	.+56     	; 0xf5c <__fixunssfsi+0x4c>
     f24:	66 0f       	add	r22, r22
     f26:	77 1f       	adc	r23, r23
     f28:	88 1f       	adc	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	1a f0       	brmi	.+6      	; 0xf34 <__fixunssfsi+0x24>
     f2e:	ba 95       	dec	r27
     f30:	c9 f7       	brne	.-14     	; 0xf24 <__fixunssfsi+0x14>
     f32:	14 c0       	rjmp	.+40     	; 0xf5c <__fixunssfsi+0x4c>
     f34:	b1 30       	cpi	r27, 0x01	; 1
     f36:	91 f0       	breq	.+36     	; 0xf5c <__fixunssfsi+0x4c>
     f38:	0e 94 96 08 	call	0x112c	; 0x112c <__fp_zero>
     f3c:	b1 e0       	ldi	r27, 0x01	; 1
     f3e:	08 95       	ret
     f40:	0c 94 96 08 	jmp	0x112c	; 0x112c <__fp_zero>
     f44:	67 2f       	mov	r22, r23
     f46:	78 2f       	mov	r23, r24
     f48:	88 27       	eor	r24, r24
     f4a:	b8 5f       	subi	r27, 0xF8	; 248
     f4c:	39 f0       	breq	.+14     	; 0xf5c <__fixunssfsi+0x4c>
     f4e:	b9 3f       	cpi	r27, 0xF9	; 249
     f50:	cc f3       	brlt	.-14     	; 0xf44 <__fixunssfsi+0x34>
     f52:	86 95       	lsr	r24
     f54:	77 95       	ror	r23
     f56:	67 95       	ror	r22
     f58:	b3 95       	inc	r27
     f5a:	d9 f7       	brne	.-10     	; 0xf52 <__fixunssfsi+0x42>
     f5c:	3e f4       	brtc	.+14     	; 0xf6c <__fixunssfsi+0x5c>
     f5e:	90 95       	com	r25
     f60:	80 95       	com	r24
     f62:	70 95       	com	r23
     f64:	61 95       	neg	r22
     f66:	7f 4f       	sbci	r23, 0xFF	; 255
     f68:	8f 4f       	sbci	r24, 0xFF	; 255
     f6a:	9f 4f       	sbci	r25, 0xFF	; 255
     f6c:	08 95       	ret

00000f6e <__floatunsisf>:
     f6e:	e8 94       	clt
     f70:	09 c0       	rjmp	.+18     	; 0xf84 <__floatsisf+0x12>

00000f72 <__floatsisf>:
     f72:	97 fb       	bst	r25, 7
     f74:	3e f4       	brtc	.+14     	; 0xf84 <__floatsisf+0x12>
     f76:	90 95       	com	r25
     f78:	80 95       	com	r24
     f7a:	70 95       	com	r23
     f7c:	61 95       	neg	r22
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	8f 4f       	sbci	r24, 0xFF	; 255
     f82:	9f 4f       	sbci	r25, 0xFF	; 255
     f84:	99 23       	and	r25, r25
     f86:	a9 f0       	breq	.+42     	; 0xfb2 <__floatsisf+0x40>
     f88:	f9 2f       	mov	r31, r25
     f8a:	96 e9       	ldi	r25, 0x96	; 150
     f8c:	bb 27       	eor	r27, r27
     f8e:	93 95       	inc	r25
     f90:	f6 95       	lsr	r31
     f92:	87 95       	ror	r24
     f94:	77 95       	ror	r23
     f96:	67 95       	ror	r22
     f98:	b7 95       	ror	r27
     f9a:	f1 11       	cpse	r31, r1
     f9c:	f8 cf       	rjmp	.-16     	; 0xf8e <__floatsisf+0x1c>
     f9e:	fa f4       	brpl	.+62     	; 0xfde <__floatsisf+0x6c>
     fa0:	bb 0f       	add	r27, r27
     fa2:	11 f4       	brne	.+4      	; 0xfa8 <__floatsisf+0x36>
     fa4:	60 ff       	sbrs	r22, 0
     fa6:	1b c0       	rjmp	.+54     	; 0xfde <__floatsisf+0x6c>
     fa8:	6f 5f       	subi	r22, 0xFF	; 255
     faa:	7f 4f       	sbci	r23, 0xFF	; 255
     fac:	8f 4f       	sbci	r24, 0xFF	; 255
     fae:	9f 4f       	sbci	r25, 0xFF	; 255
     fb0:	16 c0       	rjmp	.+44     	; 0xfde <__floatsisf+0x6c>
     fb2:	88 23       	and	r24, r24
     fb4:	11 f0       	breq	.+4      	; 0xfba <__floatsisf+0x48>
     fb6:	96 e9       	ldi	r25, 0x96	; 150
     fb8:	11 c0       	rjmp	.+34     	; 0xfdc <__floatsisf+0x6a>
     fba:	77 23       	and	r23, r23
     fbc:	21 f0       	breq	.+8      	; 0xfc6 <__floatsisf+0x54>
     fbe:	9e e8       	ldi	r25, 0x8E	; 142
     fc0:	87 2f       	mov	r24, r23
     fc2:	76 2f       	mov	r23, r22
     fc4:	05 c0       	rjmp	.+10     	; 0xfd0 <__floatsisf+0x5e>
     fc6:	66 23       	and	r22, r22
     fc8:	71 f0       	breq	.+28     	; 0xfe6 <__floatsisf+0x74>
     fca:	96 e8       	ldi	r25, 0x86	; 134
     fcc:	86 2f       	mov	r24, r22
     fce:	70 e0       	ldi	r23, 0x00	; 0
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	2a f0       	brmi	.+10     	; 0xfde <__floatsisf+0x6c>
     fd4:	9a 95       	dec	r25
     fd6:	66 0f       	add	r22, r22
     fd8:	77 1f       	adc	r23, r23
     fda:	88 1f       	adc	r24, r24
     fdc:	da f7       	brpl	.-10     	; 0xfd4 <__floatsisf+0x62>
     fde:	88 0f       	add	r24, r24
     fe0:	96 95       	lsr	r25
     fe2:	87 95       	ror	r24
     fe4:	97 f9       	bld	r25, 7
     fe6:	08 95       	ret

00000fe8 <floor>:
     fe8:	0e 94 7e 08 	call	0x10fc	; 0x10fc <__fp_trunc>
     fec:	90 f0       	brcs	.+36     	; 0x1012 <floor+0x2a>
     fee:	9f 37       	cpi	r25, 0x7F	; 127
     ff0:	48 f4       	brcc	.+18     	; 0x1004 <floor+0x1c>
     ff2:	91 11       	cpse	r25, r1
     ff4:	16 f0       	brts	.+4      	; 0xffa <floor+0x12>
     ff6:	0c 94 97 08 	jmp	0x112e	; 0x112e <__fp_szero>
     ffa:	60 e0       	ldi	r22, 0x00	; 0
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	80 e8       	ldi	r24, 0x80	; 128
    1000:	9f eb       	ldi	r25, 0xBF	; 191
    1002:	08 95       	ret
    1004:	26 f4       	brtc	.+8      	; 0x100e <floor+0x26>
    1006:	1b 16       	cp	r1, r27
    1008:	61 1d       	adc	r22, r1
    100a:	71 1d       	adc	r23, r1
    100c:	81 1d       	adc	r24, r1
    100e:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_mintl>
    1012:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__fp_mpack>

00001016 <__fp_inf>:
    1016:	97 f9       	bld	r25, 7
    1018:	9f 67       	ori	r25, 0x7F	; 127
    101a:	80 e8       	ldi	r24, 0x80	; 128
    101c:	70 e0       	ldi	r23, 0x00	; 0
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	08 95       	ret

00001022 <__fp_mintl>:
    1022:	88 23       	and	r24, r24
    1024:	71 f4       	brne	.+28     	; 0x1042 <__fp_mintl+0x20>
    1026:	77 23       	and	r23, r23
    1028:	21 f0       	breq	.+8      	; 0x1032 <__fp_mintl+0x10>
    102a:	98 50       	subi	r25, 0x08	; 8
    102c:	87 2b       	or	r24, r23
    102e:	76 2f       	mov	r23, r22
    1030:	07 c0       	rjmp	.+14     	; 0x1040 <__fp_mintl+0x1e>
    1032:	66 23       	and	r22, r22
    1034:	11 f4       	brne	.+4      	; 0x103a <__fp_mintl+0x18>
    1036:	99 27       	eor	r25, r25
    1038:	0d c0       	rjmp	.+26     	; 0x1054 <__fp_mintl+0x32>
    103a:	90 51       	subi	r25, 0x10	; 16
    103c:	86 2b       	or	r24, r22
    103e:	70 e0       	ldi	r23, 0x00	; 0
    1040:	60 e0       	ldi	r22, 0x00	; 0
    1042:	2a f0       	brmi	.+10     	; 0x104e <__fp_mintl+0x2c>
    1044:	9a 95       	dec	r25
    1046:	66 0f       	add	r22, r22
    1048:	77 1f       	adc	r23, r23
    104a:	88 1f       	adc	r24, r24
    104c:	da f7       	brpl	.-10     	; 0x1044 <__fp_mintl+0x22>
    104e:	88 0f       	add	r24, r24
    1050:	96 95       	lsr	r25
    1052:	87 95       	ror	r24
    1054:	97 f9       	bld	r25, 7
    1056:	08 95       	ret

00001058 <__fp_mpack>:
    1058:	9f 3f       	cpi	r25, 0xFF	; 255
    105a:	31 f0       	breq	.+12     	; 0x1068 <__fp_mpack_finite+0xc>

0000105c <__fp_mpack_finite>:
    105c:	91 50       	subi	r25, 0x01	; 1
    105e:	20 f4       	brcc	.+8      	; 0x1068 <__fp_mpack_finite+0xc>
    1060:	87 95       	ror	r24
    1062:	77 95       	ror	r23
    1064:	67 95       	ror	r22
    1066:	b7 95       	ror	r27
    1068:	88 0f       	add	r24, r24
    106a:	91 1d       	adc	r25, r1
    106c:	96 95       	lsr	r25
    106e:	87 95       	ror	r24
    1070:	97 f9       	bld	r25, 7
    1072:	08 95       	ret

00001074 <__fp_nan>:
    1074:	9f ef       	ldi	r25, 0xFF	; 255
    1076:	80 ec       	ldi	r24, 0xC0	; 192
    1078:	08 95       	ret

0000107a <__fp_pscA>:
    107a:	00 24       	eor	r0, r0
    107c:	0a 94       	dec	r0
    107e:	16 16       	cp	r1, r22
    1080:	17 06       	cpc	r1, r23
    1082:	18 06       	cpc	r1, r24
    1084:	09 06       	cpc	r0, r25
    1086:	08 95       	ret

00001088 <__fp_pscB>:
    1088:	00 24       	eor	r0, r0
    108a:	0a 94       	dec	r0
    108c:	12 16       	cp	r1, r18
    108e:	13 06       	cpc	r1, r19
    1090:	14 06       	cpc	r1, r20
    1092:	05 06       	cpc	r0, r21
    1094:	08 95       	ret

00001096 <__fp_round>:
    1096:	09 2e       	mov	r0, r25
    1098:	03 94       	inc	r0
    109a:	00 0c       	add	r0, r0
    109c:	11 f4       	brne	.+4      	; 0x10a2 <__fp_round+0xc>
    109e:	88 23       	and	r24, r24
    10a0:	52 f0       	brmi	.+20     	; 0x10b6 <__fp_round+0x20>
    10a2:	bb 0f       	add	r27, r27
    10a4:	40 f4       	brcc	.+16     	; 0x10b6 <__fp_round+0x20>
    10a6:	bf 2b       	or	r27, r31
    10a8:	11 f4       	brne	.+4      	; 0x10ae <__fp_round+0x18>
    10aa:	60 ff       	sbrs	r22, 0
    10ac:	04 c0       	rjmp	.+8      	; 0x10b6 <__fp_round+0x20>
    10ae:	6f 5f       	subi	r22, 0xFF	; 255
    10b0:	7f 4f       	sbci	r23, 0xFF	; 255
    10b2:	8f 4f       	sbci	r24, 0xFF	; 255
    10b4:	9f 4f       	sbci	r25, 0xFF	; 255
    10b6:	08 95       	ret

000010b8 <__fp_split3>:
    10b8:	57 fd       	sbrc	r21, 7
    10ba:	90 58       	subi	r25, 0x80	; 128
    10bc:	44 0f       	add	r20, r20
    10be:	55 1f       	adc	r21, r21
    10c0:	59 f0       	breq	.+22     	; 0x10d8 <__fp_splitA+0x10>
    10c2:	5f 3f       	cpi	r21, 0xFF	; 255
    10c4:	71 f0       	breq	.+28     	; 0x10e2 <__fp_splitA+0x1a>
    10c6:	47 95       	ror	r20

000010c8 <__fp_splitA>:
    10c8:	88 0f       	add	r24, r24
    10ca:	97 fb       	bst	r25, 7
    10cc:	99 1f       	adc	r25, r25
    10ce:	61 f0       	breq	.+24     	; 0x10e8 <__fp_splitA+0x20>
    10d0:	9f 3f       	cpi	r25, 0xFF	; 255
    10d2:	79 f0       	breq	.+30     	; 0x10f2 <__fp_splitA+0x2a>
    10d4:	87 95       	ror	r24
    10d6:	08 95       	ret
    10d8:	12 16       	cp	r1, r18
    10da:	13 06       	cpc	r1, r19
    10dc:	14 06       	cpc	r1, r20
    10de:	55 1f       	adc	r21, r21
    10e0:	f2 cf       	rjmp	.-28     	; 0x10c6 <__fp_split3+0xe>
    10e2:	46 95       	lsr	r20
    10e4:	f1 df       	rcall	.-30     	; 0x10c8 <__fp_splitA>
    10e6:	08 c0       	rjmp	.+16     	; 0x10f8 <__fp_splitA+0x30>
    10e8:	16 16       	cp	r1, r22
    10ea:	17 06       	cpc	r1, r23
    10ec:	18 06       	cpc	r1, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	f1 cf       	rjmp	.-30     	; 0x10d4 <__fp_splitA+0xc>
    10f2:	86 95       	lsr	r24
    10f4:	71 05       	cpc	r23, r1
    10f6:	61 05       	cpc	r22, r1
    10f8:	08 94       	sec
    10fa:	08 95       	ret

000010fc <__fp_trunc>:
    10fc:	0e 94 64 08 	call	0x10c8	; 0x10c8 <__fp_splitA>
    1100:	a0 f0       	brcs	.+40     	; 0x112a <__fp_trunc+0x2e>
    1102:	be e7       	ldi	r27, 0x7E	; 126
    1104:	b9 17       	cp	r27, r25
    1106:	88 f4       	brcc	.+34     	; 0x112a <__fp_trunc+0x2e>
    1108:	bb 27       	eor	r27, r27
    110a:	9f 38       	cpi	r25, 0x8F	; 143
    110c:	60 f4       	brcc	.+24     	; 0x1126 <__fp_trunc+0x2a>
    110e:	16 16       	cp	r1, r22
    1110:	b1 1d       	adc	r27, r1
    1112:	67 2f       	mov	r22, r23
    1114:	78 2f       	mov	r23, r24
    1116:	88 27       	eor	r24, r24
    1118:	98 5f       	subi	r25, 0xF8	; 248
    111a:	f7 cf       	rjmp	.-18     	; 0x110a <__fp_trunc+0xe>
    111c:	86 95       	lsr	r24
    111e:	77 95       	ror	r23
    1120:	67 95       	ror	r22
    1122:	b1 1d       	adc	r27, r1
    1124:	93 95       	inc	r25
    1126:	96 39       	cpi	r25, 0x96	; 150
    1128:	c8 f3       	brcs	.-14     	; 0x111c <__fp_trunc+0x20>
    112a:	08 95       	ret

0000112c <__fp_zero>:
    112c:	e8 94       	clt

0000112e <__fp_szero>:
    112e:	bb 27       	eor	r27, r27
    1130:	66 27       	eor	r22, r22
    1132:	77 27       	eor	r23, r23
    1134:	cb 01       	movw	r24, r22
    1136:	97 f9       	bld	r25, 7
    1138:	08 95       	ret

0000113a <__mulsf3>:
    113a:	0e 94 b0 08 	call	0x1160	; 0x1160 <__mulsf3x>
    113e:	0c 94 4b 08 	jmp	0x1096	; 0x1096 <__fp_round>
    1142:	0e 94 3d 08 	call	0x107a	; 0x107a <__fp_pscA>
    1146:	38 f0       	brcs	.+14     	; 0x1156 <__mulsf3+0x1c>
    1148:	0e 94 44 08 	call	0x1088	; 0x1088 <__fp_pscB>
    114c:	20 f0       	brcs	.+8      	; 0x1156 <__mulsf3+0x1c>
    114e:	95 23       	and	r25, r21
    1150:	11 f0       	breq	.+4      	; 0x1156 <__mulsf3+0x1c>
    1152:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_inf>
    1156:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <__fp_nan>
    115a:	11 24       	eor	r1, r1
    115c:	0c 94 97 08 	jmp	0x112e	; 0x112e <__fp_szero>

00001160 <__mulsf3x>:
    1160:	0e 94 5c 08 	call	0x10b8	; 0x10b8 <__fp_split3>
    1164:	70 f3       	brcs	.-36     	; 0x1142 <__mulsf3+0x8>

00001166 <__mulsf3_pse>:
    1166:	95 9f       	mul	r25, r21
    1168:	c1 f3       	breq	.-16     	; 0x115a <__mulsf3+0x20>
    116a:	95 0f       	add	r25, r21
    116c:	50 e0       	ldi	r21, 0x00	; 0
    116e:	55 1f       	adc	r21, r21
    1170:	62 9f       	mul	r22, r18
    1172:	f0 01       	movw	r30, r0
    1174:	72 9f       	mul	r23, r18
    1176:	bb 27       	eor	r27, r27
    1178:	f0 0d       	add	r31, r0
    117a:	b1 1d       	adc	r27, r1
    117c:	63 9f       	mul	r22, r19
    117e:	aa 27       	eor	r26, r26
    1180:	f0 0d       	add	r31, r0
    1182:	b1 1d       	adc	r27, r1
    1184:	aa 1f       	adc	r26, r26
    1186:	64 9f       	mul	r22, r20
    1188:	66 27       	eor	r22, r22
    118a:	b0 0d       	add	r27, r0
    118c:	a1 1d       	adc	r26, r1
    118e:	66 1f       	adc	r22, r22
    1190:	82 9f       	mul	r24, r18
    1192:	22 27       	eor	r18, r18
    1194:	b0 0d       	add	r27, r0
    1196:	a1 1d       	adc	r26, r1
    1198:	62 1f       	adc	r22, r18
    119a:	73 9f       	mul	r23, r19
    119c:	b0 0d       	add	r27, r0
    119e:	a1 1d       	adc	r26, r1
    11a0:	62 1f       	adc	r22, r18
    11a2:	83 9f       	mul	r24, r19
    11a4:	a0 0d       	add	r26, r0
    11a6:	61 1d       	adc	r22, r1
    11a8:	22 1f       	adc	r18, r18
    11aa:	74 9f       	mul	r23, r20
    11ac:	33 27       	eor	r19, r19
    11ae:	a0 0d       	add	r26, r0
    11b0:	61 1d       	adc	r22, r1
    11b2:	23 1f       	adc	r18, r19
    11b4:	84 9f       	mul	r24, r20
    11b6:	60 0d       	add	r22, r0
    11b8:	21 1d       	adc	r18, r1
    11ba:	82 2f       	mov	r24, r18
    11bc:	76 2f       	mov	r23, r22
    11be:	6a 2f       	mov	r22, r26
    11c0:	11 24       	eor	r1, r1
    11c2:	9f 57       	subi	r25, 0x7F	; 127
    11c4:	50 40       	sbci	r21, 0x00	; 0
    11c6:	9a f0       	brmi	.+38     	; 0x11ee <__mulsf3_pse+0x88>
    11c8:	f1 f0       	breq	.+60     	; 0x1206 <__mulsf3_pse+0xa0>
    11ca:	88 23       	and	r24, r24
    11cc:	4a f0       	brmi	.+18     	; 0x11e0 <__mulsf3_pse+0x7a>
    11ce:	ee 0f       	add	r30, r30
    11d0:	ff 1f       	adc	r31, r31
    11d2:	bb 1f       	adc	r27, r27
    11d4:	66 1f       	adc	r22, r22
    11d6:	77 1f       	adc	r23, r23
    11d8:	88 1f       	adc	r24, r24
    11da:	91 50       	subi	r25, 0x01	; 1
    11dc:	50 40       	sbci	r21, 0x00	; 0
    11de:	a9 f7       	brne	.-22     	; 0x11ca <__mulsf3_pse+0x64>
    11e0:	9e 3f       	cpi	r25, 0xFE	; 254
    11e2:	51 05       	cpc	r21, r1
    11e4:	80 f0       	brcs	.+32     	; 0x1206 <__mulsf3_pse+0xa0>
    11e6:	0c 94 0b 08 	jmp	0x1016	; 0x1016 <__fp_inf>
    11ea:	0c 94 97 08 	jmp	0x112e	; 0x112e <__fp_szero>
    11ee:	5f 3f       	cpi	r21, 0xFF	; 255
    11f0:	e4 f3       	brlt	.-8      	; 0x11ea <__mulsf3_pse+0x84>
    11f2:	98 3e       	cpi	r25, 0xE8	; 232
    11f4:	d4 f3       	brlt	.-12     	; 0x11ea <__mulsf3_pse+0x84>
    11f6:	86 95       	lsr	r24
    11f8:	77 95       	ror	r23
    11fa:	67 95       	ror	r22
    11fc:	b7 95       	ror	r27
    11fe:	f7 95       	ror	r31
    1200:	e7 95       	ror	r30
    1202:	9f 5f       	subi	r25, 0xFF	; 255
    1204:	c1 f7       	brne	.-16     	; 0x11f6 <__mulsf3_pse+0x90>
    1206:	fe 2b       	or	r31, r30
    1208:	88 0f       	add	r24, r24
    120a:	91 1d       	adc	r25, r1
    120c:	96 95       	lsr	r25
    120e:	87 95       	ror	r24
    1210:	97 f9       	bld	r25, 7
    1212:	08 95       	ret

00001214 <__divmodhi4>:
    1214:	97 fb       	bst	r25, 7
    1216:	07 2e       	mov	r0, r23
    1218:	16 f4       	brtc	.+4      	; 0x121e <__divmodhi4+0xa>
    121a:	00 94       	com	r0
    121c:	07 d0       	rcall	.+14     	; 0x122c <__divmodhi4_neg1>
    121e:	77 fd       	sbrc	r23, 7
    1220:	09 d0       	rcall	.+18     	; 0x1234 <__divmodhi4_neg2>
    1222:	0e 94 2d 09 	call	0x125a	; 0x125a <__udivmodhi4>
    1226:	07 fc       	sbrc	r0, 7
    1228:	05 d0       	rcall	.+10     	; 0x1234 <__divmodhi4_neg2>
    122a:	3e f4       	brtc	.+14     	; 0x123a <__divmodhi4_exit>

0000122c <__divmodhi4_neg1>:
    122c:	90 95       	com	r25
    122e:	81 95       	neg	r24
    1230:	9f 4f       	sbci	r25, 0xFF	; 255
    1232:	08 95       	ret

00001234 <__divmodhi4_neg2>:
    1234:	70 95       	com	r23
    1236:	61 95       	neg	r22
    1238:	7f 4f       	sbci	r23, 0xFF	; 255

0000123a <__divmodhi4_exit>:
    123a:	08 95       	ret

0000123c <__umulhisi3>:
    123c:	a2 9f       	mul	r26, r18
    123e:	b0 01       	movw	r22, r0
    1240:	b3 9f       	mul	r27, r19
    1242:	c0 01       	movw	r24, r0
    1244:	a3 9f       	mul	r26, r19
    1246:	70 0d       	add	r23, r0
    1248:	81 1d       	adc	r24, r1
    124a:	11 24       	eor	r1, r1
    124c:	91 1d       	adc	r25, r1
    124e:	b2 9f       	mul	r27, r18
    1250:	70 0d       	add	r23, r0
    1252:	81 1d       	adc	r24, r1
    1254:	11 24       	eor	r1, r1
    1256:	91 1d       	adc	r25, r1
    1258:	08 95       	ret

0000125a <__udivmodhi4>:
    125a:	aa 1b       	sub	r26, r26
    125c:	bb 1b       	sub	r27, r27
    125e:	51 e1       	ldi	r21, 0x11	; 17
    1260:	07 c0       	rjmp	.+14     	; 0x1270 <__udivmodhi4_ep>

00001262 <__udivmodhi4_loop>:
    1262:	aa 1f       	adc	r26, r26
    1264:	bb 1f       	adc	r27, r27
    1266:	a6 17       	cp	r26, r22
    1268:	b7 07       	cpc	r27, r23
    126a:	10 f0       	brcs	.+4      	; 0x1270 <__udivmodhi4_ep>
    126c:	a6 1b       	sub	r26, r22
    126e:	b7 0b       	sbc	r27, r23

00001270 <__udivmodhi4_ep>:
    1270:	88 1f       	adc	r24, r24
    1272:	99 1f       	adc	r25, r25
    1274:	5a 95       	dec	r21
    1276:	a9 f7       	brne	.-22     	; 0x1262 <__udivmodhi4_loop>
    1278:	80 95       	com	r24
    127a:	90 95       	com	r25
    127c:	bc 01       	movw	r22, r24
    127e:	cd 01       	movw	r24, r26
    1280:	08 95       	ret

00001282 <_exit>:
    1282:	f8 94       	cli

00001284 <__stop_program>:
    1284:	ff cf       	rjmp	.-2      	; 0x1284 <__stop_program>


air conditioning.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000106c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000080  00800060  0000106c  00001100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  008000e0  008000e0  00001180  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001a0  00000000  00000000  000011ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f59  00000000  00000000  0000138c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b15  00000000  00000000  000032e5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001195  00000000  00000000  00003dfa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002fc  00000000  00000000  00004f90  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000957  00000000  00000000  0000528c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c06  00000000  00000000  00005be3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  000067e9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e6       	ldi	r30, 0x6C	; 108
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3e       	cpi	r26, 0xE0	; 224
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	a0 ee       	ldi	r26, 0xE0	; 224
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3e       	cpi	r26, 0xEE	; 238
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 51 04 	call	0x8a2	; 0x8a2 <main>
      8a:	0c 94 34 08 	jmp	0x1068	; 0x1068 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <APP_init>:
sint8_t bar = 0 ,  u8_a_defaulttemp = 20 , u8_readjuststatus = 0 ;

void APP_init()
{

    bar = 0 ;
      92:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <bar>
  
	ADC_init();  /** INITIALIZE ADC **/
      96:	0e 94 56 04 	call	0x8ac	; 0x8ac <ADC_init>
	
 	TMR0_init();  /** INITIALIZE TMR0 **/
      9a:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <TMR0_init>
	
	LCD_init();   /** INITIALIZE LCD **/
      9e:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <LCD_init>
	
	TMR0_delayms(50); /** DELAY FOR 20 ms FOR LCD TO BE STABLE BEFORE OPERATE */
      a2:	62 e3       	ldi	r22, 0x32	; 50
      a4:	70 e0       	ldi	r23, 0x00	; 0
      a6:	80 e0       	ldi	r24, 0x00	; 0
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
		
	KEYPAD_init(); /** INITIALIZE KEYPAD **/
      ae:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <KEYPAD_init>
	
	LCD_writecustomchar(u8_g_bell , 0); /** STORE THE BELL SHAPE IN CGRAM OF LCD **/
      b2:	60 e0       	ldi	r22, 0x00	; 0
      b4:	81 e6       	ldi	r24, 0x61	; 97
      b6:	90 e0       	ldi	r25, 0x00	; 0
      b8:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_writecustomchar>
	 
	LCD_writecustomchar(u8_g_empty , 1); /** STORE EMPTY SHAPE IN CGRAM OF LCD **/
      bc:	61 e0       	ldi	r22, 0x01	; 1
      be:	82 ee       	ldi	r24, 0xE2	; 226
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 ab 03 	call	0x756	; 0x756 <LCD_writecustomchar>
	
	BUZZ_init();  /** INITIALIZE THE BUZZER **/
      c6:	0e 94 cd 01 	call	0x39a	; 0x39a <BUZZ_init>
	
	BUZZ_off();   /** BUZZER IS OFF **/
      ca:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <BUZZ_off>
	
	LCD_goto(0 , 1);
      ce:	61 e0       	ldi	r22, 0x01	; 1
      d0:	80 e0       	ldi	r24, 0x00	; 0
      d2:	0e 94 93 03 	call	0x726	; 0x726 <LCD_goto>
	LCD_writestr("   Welcome   ");  /** DISPLAY WELCOME MESSAGE FOR 0.5 SEC **/
      d6:	89 e6       	ldi	r24, 0x69	; 105
      d8:	90 e0       	ldi	r25, 0x00	; 0
      da:	0e 94 80 03 	call	0x700	; 0x700 <LCD_writestr>
	TMR0_delayms(1000);
      de:	68 ee       	ldi	r22, 0xE8	; 232
      e0:	73 e0       	ldi	r23, 0x03	; 3
      e2:	80 e0       	ldi	r24, 0x00	; 0
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
	
	LCD_sendcmd(LCD_CLEAR);  /** CLEAR THE LCD **/
      ea:	81 e0       	ldi	r24, 0x01	; 1
      ec:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_sendcmd>
	TMR0_delayms(20);
      f0:	64 e1       	ldi	r22, 0x14	; 20
      f2:	70 e0       	ldi	r23, 0x00	; 0
      f4:	80 e0       	ldi	r24, 0x00	; 0
      f6:	90 e0       	ldi	r25, 0x00	; 0
      f8:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
	
	LCD_goto(0 , 0);
      fc:	60 e0       	ldi	r22, 0x00	; 0
      fe:	80 e0       	ldi	r24, 0x00	; 0
     100:	0e 94 93 03 	call	0x726	; 0x726 <LCD_goto>
	LCD_writestr("Default temp =20"); /** DISPLAY THE DEFAULT TEMP OF AC **/
     104:	87 e7       	ldi	r24, 0x77	; 119
     106:	90 e0       	ldi	r25, 0x00	; 0
     108:	0e 94 80 03 	call	0x700	; 0x700 <LCD_writestr>
	TMR0_delayms(2000);
     10c:	60 ed       	ldi	r22, 0xD0	; 208
     10e:	77 e0       	ldi	r23, 0x07	; 7
     110:	80 e0       	ldi	r24, 0x00	; 0
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>

    LCD_sendcmd(LCD_CLEAR);  /** CLEAR THE LCD **/
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_sendcmd>
    TMR0_delayms(20);
     11e:	64 e1       	ldi	r22, 0x14	; 20
     120:	70 e0       	ldi	r23, 0x00	; 0
     122:	80 e0       	ldi	r24, 0x00	; 0
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
    
	LCD_goto(0 , 0);
     12a:	60 e0       	ldi	r22, 0x00	; 0
     12c:	80 e0       	ldi	r24, 0x00	; 0
     12e:	0e 94 93 03 	call	0x726	; 0x726 <LCD_goto>
	LCD_writestr("SET TEMPERATURE"); /** DISPLAY THE DEFAULT TEMP OF AC **/
     132:	88 e8       	ldi	r24, 0x88	; 136
     134:	90 e0       	ldi	r25, 0x00	; 0
     136:	0e 94 80 03 	call	0x700	; 0x700 <LCD_writestr>
	TMR0_delayms(2000);
     13a:	60 ed       	ldi	r22, 0xD0	; 208
     13c:	77 e0       	ldi	r23, 0x07	; 7
     13e:	80 e0       	ldi	r24, 0x00	; 0
     140:	90 e0       	ldi	r25, 0x00	; 0
     142:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
	
	LCD_sendcmd(LCD_CLEAR);  /** CLEAR THE LCD **/
     146:	81 e0       	ldi	r24, 0x01	; 1
     148:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_sendcmd>
	TMR0_delayms(20);
     14c:	64 e1       	ldi	r22, 0x14	; 20
     14e:	70 e0       	ldi	r23, 0x00	; 0
     150:	80 e0       	ldi	r24, 0x00	; 0
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
     158:	08 95       	ret

0000015a <APP_start>:
	
}


void APP_start()
{
     15a:	1f 93       	push	r17
     15c:	cf 93       	push	r28
     15e:	df 93       	push	r29
     160:	1f 92       	push	r1
     162:	cd b7       	in	r28, 0x3d	; 61
     164:	de b7       	in	r29, 0x3e	; 62
	KEYPAD_readError returnstatus = KEYPAD_readFail ;  
	
	uint8_t u8_a_pressedunm = 0 , u32_a_temp = 0 , u8_a_displayedtemp = 0   , pattern = 0; /** VARIABLE TO HOLD THE PRESSED NUMBER IN THE KEYPAD **/
     166:	19 82       	std	Y+1, r1	; 0x01


	returnstatus = KEYPAD_read(&u8_a_pressedunm);
     168:	ce 01       	movw	r24, r28
     16a:	01 96       	adiw	r24, 0x01	; 1
     16c:	0e 94 17 02 	call	0x42e	; 0x42e <KEYPAD_read>
     170:	18 2f       	mov	r17, r24
	
	LCD_goto(0 , 0 );
     172:	60 e0       	ldi	r22, 0x00	; 0
     174:	80 e0       	ldi	r24, 0x00	; 0
     176:	0e 94 93 03 	call	0x726	; 0x726 <LCD_goto>
	LCD_writestr("Min:18");
     17a:	88 e9       	ldi	r24, 0x98	; 152
     17c:	90 e0       	ldi	r25, 0x00	; 0
     17e:	0e 94 80 03 	call	0x700	; 0x700 <LCD_writestr>
	
	LCD_goto(0 , 7);
     182:	67 e0       	ldi	r22, 0x07	; 7
     184:	80 e0       	ldi	r24, 0x00	; 0
     186:	0e 94 93 03 	call	0x726	; 0x726 <LCD_goto>
	LCD_writeint(u8_a_defaulttemp); /** DISPLAY THE ROOM READ TEMPERATURE **/
     18a:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     18e:	06 2e       	mov	r0, r22
     190:	00 0c       	add	r0, r0
     192:	77 0b       	sbc	r23, r23
     194:	88 0b       	sbc	r24, r24
     196:	99 0b       	sbc	r25, r25
     198:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_writeint>
	
	LCD_goto(0 , 10);
     19c:	6a e0       	ldi	r22, 0x0A	; 10
     19e:	80 e0       	ldi	r24, 0x00	; 0
     1a0:	0e 94 93 03 	call	0x726	; 0x726 <LCD_goto>
	LCD_writestr("Max:35");
     1a4:	8f e9       	ldi	r24, 0x9F	; 159
     1a6:	90 e0       	ldi	r25, 0x00	; 0
     1a8:	0e 94 80 03 	call	0x700	; 0x700 <LCD_writestr>
	
	if(returnstatus == KEYPAD_readSuccess)
     1ac:	11 11       	cpse	r17, r1
     1ae:	f0 c0       	rjmp	.+480    	; 0x390 <APP_start+0x236>
	{
		if (u8_a_pressedunm == 1)
     1b0:	89 81       	ldd	r24, Y+1	; 0x01
     1b2:	81 30       	cpi	r24, 0x01	; 1
     1b4:	29 f5       	brne	.+74     	; 0x200 <APP_start+0xa6>
		{	
		   	
			u8_a_defaulttemp++ ;
     1b6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1ba:	8f 5f       	subi	r24, 0xFF	; 255
     1bc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				
			LCD_goto(0 , 7);
     1c0:	67 e0       	ldi	r22, 0x07	; 7
     1c2:	80 e0       	ldi	r24, 0x00	; 0
     1c4:	0e 94 93 03 	call	0x726	; 0x726 <LCD_goto>
			LCD_writeint(u8_a_defaulttemp); /** DISPLAY THE ROOM READ TEMPERATURE **/
     1c8:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     1cc:	06 2e       	mov	r0, r22
     1ce:	00 0c       	add	r0, r0
     1d0:	77 0b       	sbc	r23, r23
     1d2:	88 0b       	sbc	r24, r24
     1d4:	99 0b       	sbc	r25, r25
     1d6:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_writeint>
				
			LCD_goto(1 ,bar++);
     1da:	60 91 e1 00 	lds	r22, 0x00E1	; 0x8000e1 <bar>
     1de:	81 e0       	ldi	r24, 0x01	; 1
     1e0:	86 0f       	add	r24, r22
     1e2:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <bar>
     1e6:	81 e0       	ldi	r24, 0x01	; 1
     1e8:	0e 94 93 03 	call	0x726	; 0x726 <LCD_goto>
			LCD_writechar('|');
     1ec:	8c e7       	ldi	r24, 0x7C	; 124
     1ee:	0e 94 39 03 	call	0x672	; 0x672 <LCD_writechar>
				
			TMR0_delayms(200);
     1f2:	68 ec       	ldi	r22, 0xC8	; 200
     1f4:	70 e0       	ldi	r23, 0x00	; 0
     1f6:	80 e0       	ldi	r24, 0x00	; 0
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
     1fe:	c8 c0       	rjmp	.+400    	; 0x390 <APP_start+0x236>
			
		}
		
		else if(u8_a_pressedunm == 2)
     200:	82 30       	cpi	r24, 0x02	; 2
     202:	39 f5       	brne	.+78     	; 0x252 <APP_start+0xf8>
		{
			bar-- ; 
     204:	80 91 e1 00 	lds	r24, 0x00E1	; 0x8000e1 <bar>
     208:	81 50       	subi	r24, 0x01	; 1
     20a:	80 93 e1 00 	sts	0x00E1, r24	; 0x8000e1 <bar>
	
			u8_a_defaulttemp--;
     20e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     212:	81 50       	subi	r24, 0x01	; 1
     214:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
			
			LCD_goto(0 , 7);
     218:	67 e0       	ldi	r22, 0x07	; 7
     21a:	80 e0       	ldi	r24, 0x00	; 0
     21c:	0e 94 93 03 	call	0x726	; 0x726 <LCD_goto>
			LCD_writeint(u8_a_defaulttemp); /** DISPLAY THE ROOM READ TEMPERATURE **/
     220:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     224:	06 2e       	mov	r0, r22
     226:	00 0c       	add	r0, r0
     228:	77 0b       	sbc	r23, r23
     22a:	88 0b       	sbc	r24, r24
     22c:	99 0b       	sbc	r25, r25
     22e:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_writeint>
			
			LCD_goto(1 , bar+1);
     232:	60 91 e1 00 	lds	r22, 0x00E1	; 0x8000e1 <bar>
     236:	6f 5f       	subi	r22, 0xFF	; 255
     238:	81 e0       	ldi	r24, 0x01	; 1
     23a:	0e 94 93 03 	call	0x726	; 0x726 <LCD_goto>
			LCD_writechar(1);
     23e:	81 e0       	ldi	r24, 0x01	; 1
     240:	0e 94 39 03 	call	0x672	; 0x672 <LCD_writechar>
			TMR0_delayms(200);
     244:	68 ec       	ldi	r22, 0xC8	; 200
     246:	70 e0       	ldi	r23, 0x00	; 0
     248:	80 e0       	ldi	r24, 0x00	; 0
     24a:	90 e0       	ldi	r25, 0x00	; 0
     24c:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
     250:	9f c0       	rjmp	.+318    	; 0x390 <APP_start+0x236>

		}
		
		else if(u8_a_pressedunm == 3)
     252:	83 30       	cpi	r24, 0x03	; 3
     254:	09 f0       	breq	.+2      	; 0x258 <APP_start+0xfe>
     256:	9c c0       	rjmp	.+312    	; 0x390 <APP_start+0x236>
		{
			u8_a_pressedunm = 0 ;
     258:	19 82       	std	Y+1, r1	; 0x01
			
			LCD_sendcmd(LCD_CLEAR);
     25a:	81 e0       	ldi	r24, 0x01	; 1
     25c:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_sendcmd>
			TMR0_delayms(20);
     260:	64 e1       	ldi	r22, 0x14	; 20
     262:	70 e0       	ldi	r23, 0x00	; 0
     264:	80 e0       	ldi	r24, 0x00	; 0
     266:	90 e0       	ldi	r25, 0x00	; 0
     268:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
			
			while (u8_a_pressedunm != 4 && u8_a_pressedunm != 5)
     26c:	33 c0       	rjmp	.+102    	; 0x2d4 <APP_start+0x17a>
			{	
				u32_a_temp = ADC_read();  /** READ THE VALUE FROM ADC CHANNEL **/
     26e:	0e 94 74 04 	call	0x8e8	; 0x8e8 <ADC_read>
				
				u8_a_displayedtemp = u32_a_temp * 0.20 ; /** REFACTOR THE ADC READ TO BE DISPLAYED OVER THE LCD **/
     272:	70 e0       	ldi	r23, 0x00	; 0
     274:	80 e0       	ldi	r24, 0x00	; 0
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <__floatsisf>
     27c:	2d ec       	ldi	r18, 0xCD	; 205
     27e:	3c ec       	ldi	r19, 0xCC	; 204
     280:	4c e4       	ldi	r20, 0x4C	; 76
     282:	5e e3       	ldi	r21, 0x3E	; 62
     284:	0e 94 86 07 	call	0xf0c	; 0xf0c <__mulsf3>
     288:	0e 94 c9 06 	call	0xd92	; 0xd92 <__fixunssfsi>
     28c:	16 2f       	mov	r17, r22
				
				LCD_goto(0,0);
     28e:	60 e0       	ldi	r22, 0x00	; 0
     290:	80 e0       	ldi	r24, 0x00	; 0
     292:	0e 94 93 03 	call	0x726	; 0x726 <LCD_goto>
				LCD_writestr("Nedded Temp:");
     296:	86 ea       	ldi	r24, 0xA6	; 166
     298:	90 e0       	ldi	r25, 0x00	; 0
     29a:	0e 94 80 03 	call	0x700	; 0x700 <LCD_writestr>
				LCD_writeint(u8_a_defaulttemp);
     29e:	60 91 60 00 	lds	r22, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
     2a2:	06 2e       	mov	r0, r22
     2a4:	00 0c       	add	r0, r0
     2a6:	77 0b       	sbc	r23, r23
     2a8:	88 0b       	sbc	r24, r24
     2aa:	99 0b       	sbc	r25, r25
     2ac:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_writeint>
				
				LCD_goto(1,0);
     2b0:	60 e0       	ldi	r22, 0x00	; 0
     2b2:	81 e0       	ldi	r24, 0x01	; 1
     2b4:	0e 94 93 03 	call	0x726	; 0x726 <LCD_goto>
				LCD_writestr("Current Temp :");
     2b8:	83 eb       	ldi	r24, 0xB3	; 179
     2ba:	90 e0       	ldi	r25, 0x00	; 0
     2bc:	0e 94 80 03 	call	0x700	; 0x700 <LCD_writestr>
				LCD_writeint(u8_a_displayedtemp);
     2c0:	61 2f       	mov	r22, r17
     2c2:	70 e0       	ldi	r23, 0x00	; 0
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	0e 94 c6 03 	call	0x78c	; 0x78c <LCD_writeint>
				
				KEYPAD_read(&u8_a_pressedunm);
     2cc:	ce 01       	movw	r24, r28
     2ce:	01 96       	adiw	r24, 0x01	; 1
     2d0:	0e 94 17 02 	call	0x42e	; 0x42e <KEYPAD_read>
			u8_a_pressedunm = 0 ;
			
			LCD_sendcmd(LCD_CLEAR);
			TMR0_delayms(20);
			
			while (u8_a_pressedunm != 4 && u8_a_pressedunm != 5)
     2d4:	89 81       	ldd	r24, Y+1	; 0x01
     2d6:	9c ef       	ldi	r25, 0xFC	; 252
     2d8:	98 0f       	add	r25, r24
     2da:	92 30       	cpi	r25, 0x02	; 2
     2dc:	40 f6       	brcc	.-112    	; 0x26e <APP_start+0x114>
				LCD_writeint(u8_a_displayedtemp);
				
				KEYPAD_read(&u8_a_pressedunm);
			}
			
			if (u8_a_pressedunm == 4)
     2de:	84 30       	cpi	r24, 0x04	; 4
     2e0:	81 f5       	brne	.+96     	; 0x342 <APP_start+0x1e8>
			{
				u8_readjuststatus = 1 ; /** MEANS THAT WE WILL READJUST TEMPERATURE **/
     2e2:	81 e0       	ldi	r24, 0x01	; 1
     2e4:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__data_end>
				
				LCD_sendcmd(LCD_CLEAR);
     2e8:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_sendcmd>
				TMR0_delayms(20);
     2ec:	64 e1       	ldi	r22, 0x14	; 20
     2ee:	70 e0       	ldi	r23, 0x00	; 0
     2f0:	80 e0       	ldi	r24, 0x00	; 0
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
				
				LCD_goto(0,0);
     2f8:	60 e0       	ldi	r22, 0x00	; 0
     2fa:	80 e0       	ldi	r24, 0x00	; 0
     2fc:	0e 94 93 03 	call	0x726	; 0x726 <LCD_goto>
				LCD_writestr("Readjust temp");
     300:	82 ec       	ldi	r24, 0xC2	; 194
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	0e 94 80 03 	call	0x700	; 0x700 <LCD_writestr>
				TMR0_delayms(2000);
     308:	60 ed       	ldi	r22, 0xD0	; 208
     30a:	77 e0       	ldi	r23, 0x07	; 7
     30c:	80 e0       	ldi	r24, 0x00	; 0
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
				
				LCD_sendcmd(LCD_CLEAR);
     314:	81 e0       	ldi	r24, 0x01	; 1
     316:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_sendcmd>
				TMR0_delayms(20);
     31a:	64 e1       	ldi	r22, 0x14	; 20
     31c:	70 e0       	ldi	r23, 0x00	; 0
     31e:	80 e0       	ldi	r24, 0x00	; 0
     320:	90 e0       	ldi	r25, 0x00	; 0
     322:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
				
				LCD_goto(1,0);
     326:	60 e0       	ldi	r22, 0x00	; 0
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	0e 94 93 03 	call	0x726	; 0x726 <LCD_goto>
				
				pattern = bar ; 
     32e:	10 91 e1 00 	lds	r17, 0x00E1	; 0x8000e1 <bar>
				
				while (pattern != 0 )
     332:	04 c0       	rjmp	.+8      	; 0x33c <APP_start+0x1e2>
				{
					LCD_writechar('|');
     334:	8c e7       	ldi	r24, 0x7C	; 124
     336:	0e 94 39 03 	call	0x672	; 0x672 <LCD_writechar>
					pattern = pattern - 1 ;
     33a:	11 50       	subi	r17, 0x01	; 1
				
				LCD_goto(1,0);
				
				pattern = bar ; 
				
				while (pattern != 0 )
     33c:	11 11       	cpse	r17, r1
     33e:	fa cf       	rjmp	.-12     	; 0x334 <APP_start+0x1da>
     340:	27 c0       	rjmp	.+78     	; 0x390 <APP_start+0x236>
					LCD_writechar('|');
					pattern = pattern - 1 ;
				}
			}
			
			else if(u8_a_pressedunm == 5)
     342:	85 30       	cpi	r24, 0x05	; 5
     344:	29 f5       	brne	.+74     	; 0x390 <APP_start+0x236>
			{
				u8_a_defaulttemp = 20 ;
     346:	84 e1       	ldi	r24, 0x14	; 20
     348:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
				
				LCD_sendcmd(LCD_CLEAR);
     34c:	81 e0       	ldi	r24, 0x01	; 1
     34e:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_sendcmd>
				TMR0_delayms(20);
     352:	64 e1       	ldi	r22, 0x14	; 20
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
				
				LCD_goto(0,0);
     35e:	60 e0       	ldi	r22, 0x00	; 0
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	0e 94 93 03 	call	0x726	; 0x726 <LCD_goto>
				LCD_writestr("System reboot ");
     366:	80 ed       	ldi	r24, 0xD0	; 208
     368:	90 e0       	ldi	r25, 0x00	; 0
     36a:	0e 94 80 03 	call	0x700	; 0x700 <LCD_writestr>
				
				TMR0_delayms(2000);
     36e:	60 ed       	ldi	r22, 0xD0	; 208
     370:	77 e0       	ldi	r23, 0x07	; 7
     372:	80 e0       	ldi	r24, 0x00	; 0
     374:	90 e0       	ldi	r25, 0x00	; 0
     376:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
				APP_start();
     37a:	0e 94 ad 00 	call	0x15a	; 0x15a <APP_start>
				
				LCD_sendcmd(LCD_CLEAR);
     37e:	81 e0       	ldi	r24, 0x01	; 1
     380:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_sendcmd>
				TMR0_delayms(20);
     384:	64 e1       	ldi	r22, 0x14	; 20
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	80 e0       	ldi	r24, 0x00	; 0
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
	}
	
	
	
	
}
     390:	0f 90       	pop	r0
     392:	df 91       	pop	r29
     394:	cf 91       	pop	r28
     396:	1f 91       	pop	r17
     398:	08 95       	ret

0000039a <BUZZ_init>:
/** RETURN     : VOID                                 **/
/*******************************************************/
void BUZZ_on()
{
	/** SET THE BUZZER PIN AS HIGH **/
	DIO_setpinvalue(BUZZ_PORT , BUZZ_PIN , DIO_PIN_HIGH);
     39a:	41 e0       	ldi	r20, 0x01	; 1
     39c:	63 e0       	ldi	r22, 0x03	; 3
     39e:	80 e0       	ldi	r24, 0x00	; 0
     3a0:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_setpindir>
     3a4:	08 95       	ret

000003a6 <BUZZ_off>:
/** RETURN     : VOID                                 **/
/*******************************************************/
void BUZZ_off()
{
	/** SET THE BUZZER PIN AS LOW **/
	DIO_setpinvalue(BUZZ_PORT , BUZZ_PIN , DIO_PIN_LOW);
     3a6:	40 e0       	ldi	r20, 0x00	; 0
     3a8:	63 e0       	ldi	r22, 0x03	; 3
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
     3b0:	08 95       	ret

000003b2 <KEYPAD_init>:
/** @return KEYPAD_initFail                                                */
/***************************************************************************/
KEYPAD_initError KEYPAD_init(void)
{
    /*Rows direction initialization*/
    DIO_setpindir(ROW_PORT_DATA, R1 , DIO_PIN_OUTPUT);
     3b2:	41 e0       	ldi	r20, 0x01	; 1
     3b4:	60 e0       	ldi	r22, 0x00	; 0
     3b6:	82 e0       	ldi	r24, 0x02	; 2
     3b8:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R2 , DIO_PIN_OUTPUT);
     3bc:	41 e0       	ldi	r20, 0x01	; 1
     3be:	61 e0       	ldi	r22, 0x01	; 1
     3c0:	82 e0       	ldi	r24, 0x02	; 2
     3c2:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_setpindir>
	DIO_setpindir(ROW_PORT_DATA, R3 , DIO_PIN_OUTPUT);
     3c6:	41 e0       	ldi	r20, 0x01	; 1
     3c8:	62 e0       	ldi	r22, 0x02	; 2
     3ca:	82 e0       	ldi	r24, 0x02	; 2
     3cc:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_setpindir>
	
    /*Columns direction initialization*/
	DIO_setpindir(COLUMN_PORT_DATA , C1 , DIO_PIN_INPUT);
     3d0:	40 e0       	ldi	r20, 0x00	; 0
     3d2:	65 e0       	ldi	r22, 0x05	; 5
     3d4:	81 e0       	ldi	r24, 0x01	; 1
     3d6:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C2 , DIO_PIN_INPUT);
     3da:	40 e0       	ldi	r20, 0x00	; 0
     3dc:	66 e0       	ldi	r22, 0x06	; 6
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_setpindir>
	DIO_setpindir(COLUMN_PORT_DATA , C3 , DIO_PIN_INPUT);
     3e4:	40 e0       	ldi	r20, 0x00	; 0
     3e6:	67 e0       	ldi	r22, 0x07	; 7
     3e8:	81 e0       	ldi	r24, 0x01	; 1
     3ea:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_setpindir>
	DIO_setpinvalue(ROW_PORT_DATA , R3 ,  DIO_PIN_LOW);
	

    #elif CONNECTION == 'U'
	
	DIO_setpinvalue(ROW_PORT_DATA , R1 , DIO_PIN_HIGH);
     3ee:	41 e0       	ldi	r20, 0x01	; 1
     3f0:	60 e0       	ldi	r22, 0x00	; 0
     3f2:	82 e0       	ldi	r24, 0x02	; 2
     3f4:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R2 , DIO_PIN_HIGH);
     3f8:	41 e0       	ldi	r20, 0x01	; 1
     3fa:	61 e0       	ldi	r22, 0x01	; 1
     3fc:	82 e0       	ldi	r24, 0x02	; 2
     3fe:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
	DIO_setpinvalue(ROW_PORT_DATA , R3 , DIO_PIN_HIGH);
     402:	41 e0       	ldi	r20, 0x01	; 1
     404:	62 e0       	ldi	r22, 0x02	; 2
     406:	82 e0       	ldi	r24, 0x02	; 2
     408:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
	
	DIO_setpinvalue(COLUMN_PORT_DATA , C1 , DIO_PIN_HIGH);
     40c:	41 e0       	ldi	r20, 0x01	; 1
     40e:	65 e0       	ldi	r22, 0x05	; 5
     410:	81 e0       	ldi	r24, 0x01	; 1
     412:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C2 , DIO_PIN_HIGH);
     416:	41 e0       	ldi	r20, 0x01	; 1
     418:	66 e0       	ldi	r22, 0x06	; 6
     41a:	81 e0       	ldi	r24, 0x01	; 1
     41c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
	DIO_setpinvalue(COLUMN_PORT_DATA , C3 , DIO_PIN_HIGH);
     420:	41 e0       	ldi	r20, 0x01	; 1
     422:	67 e0       	ldi	r22, 0x07	; 7
     424:	81 e0       	ldi	r24, 0x01	; 1
     426:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
	
    #endif
    return KEYPAD_initSuccess;
}
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	08 95       	ret

0000042e <KEYPAD_read>:
/** @param *u8_a_value refrence to store the read value in                 */
/** @return KEYPAD_readSuccess                                             */
/** @return KEYPAD_readFail                                                */
/***************************************************************************/
KEYPAD_readError KEYPAD_read(uint8_t *u8_a_value)
{
     42e:	df 92       	push	r13
     430:	ef 92       	push	r14
     432:	ff 92       	push	r15
     434:	0f 93       	push	r16
     436:	1f 93       	push	r17
     438:	cf 93       	push	r28
     43a:	df 93       	push	r29
     43c:	cd b7       	in	r28, 0x3d	; 61
     43e:	de b7       	in	r29, 0x3e	; 62
     440:	27 97       	sbiw	r28, 0x07	; 7
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	f8 94       	cli
     446:	de bf       	out	0x3e, r29	; 62
     448:	0f be       	out	0x3f, r0	; 63
     44a:	cd bf       	out	0x3d, r28	; 61
     44c:	7c 01       	movw	r14, r24
    #elif CONNECTION == 'D'
    #define u8_l_readCheck DIO_PIN_HIGH
    #define u8_l_pinValue  DIO_PIN_HIGH
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
     44e:	19 82       	std	Y+1, r1	; 0x01
     450:	1a 82       	std	Y+2, r1	; 0x02
     452:	1b 82       	std	Y+3, r1	; 0x03
     454:	1c 82       	std	Y+4, r1	; 0x04
     456:	81 e0       	ldi	r24, 0x01	; 1
     458:	8a 83       	std	Y+2, r24	; 0x02
     45a:	82 e0       	ldi	r24, 0x02	; 2
     45c:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};
     45e:	85 e0       	ldi	r24, 0x05	; 5
     460:	8d 83       	std	Y+5, r24	; 0x05
     462:	86 e0       	ldi	r24, 0x06	; 6
     464:	8e 83       	std	Y+6, r24	; 0x06
     466:	87 e0       	ldi	r24, 0x07	; 7
     468:	8f 83       	std	Y+7, r24	; 0x07

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     46a:	00 e0       	ldi	r16, 0x00	; 0
     46c:	66 c0       	rjmp	.+204    	; 0x53a <KEYPAD_read+0x10c>
    {
        DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);
     46e:	e1 e0       	ldi	r30, 0x01	; 1
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	ec 0f       	add	r30, r28
     474:	fd 1f       	adc	r31, r29
     476:	e0 0f       	add	r30, r16
     478:	f1 1d       	adc	r31, r1
     47a:	d0 80       	ld	r13, Z
     47c:	40 e0       	ldi	r20, 0x00	; 0
     47e:	6d 2d       	mov	r22, r13
     480:	82 e0       	ldi	r24, 0x02	; 2
     482:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
     486:	10 e0       	ldi	r17, 0x00	; 0
     488:	50 c0       	rjmp	.+160    	; 0x52a <KEYPAD_read+0xfc>
        {
            DIO_readpin(COLUMN_PORT_DATA , u8_l_Columns[u8_a_coulumniterator] , u8_a_value);
     48a:	e5 e0       	ldi	r30, 0x05	; 5
     48c:	f0 e0       	ldi	r31, 0x00	; 0
     48e:	ec 0f       	add	r30, r28
     490:	fd 1f       	adc	r31, r29
     492:	e1 0f       	add	r30, r17
     494:	f1 1d       	adc	r31, r1
     496:	a7 01       	movw	r20, r14
     498:	60 81       	ld	r22, Z
     49a:	81 e0       	ldi	r24, 0x01	; 1
     49c:	0e 94 7c 05 	call	0xaf8	; 0xaf8 <DIO_readpin>
            if (*u8_a_value == u8_l_readCheck)
     4a0:	f7 01       	movw	r30, r14
     4a2:	80 81       	ld	r24, Z
     4a4:	81 11       	cpse	r24, r1
     4a6:	40 c0       	rjmp	.+128    	; 0x528 <KEYPAD_read+0xfa>
            {
                if (u8_a_rowiterator == 0)
     4a8:	01 11       	cpse	r16, r1
     4aa:	11 c0       	rjmp	.+34     	; 0x4ce <KEYPAD_read+0xa0>
                {
                    if (u8_a_coulumniterator == 0)
     4ac:	11 11       	cpse	r17, r1
     4ae:	03 c0       	rjmp	.+6      	; 0x4b6 <KEYPAD_read+0x88>
                    {
                        *u8_a_value = 1 ;
     4b0:	81 e0       	ldi	r24, 0x01	; 1
     4b2:	80 83       	st	Z, r24
     4b4:	33 c0       	rjmp	.+102    	; 0x51c <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 1)
     4b6:	11 30       	cpi	r17, 0x01	; 1
     4b8:	21 f4       	brne	.+8      	; 0x4c2 <KEYPAD_read+0x94>
                    {
                        *u8_a_value = 2 ;
     4ba:	82 e0       	ldi	r24, 0x02	; 2
     4bc:	f7 01       	movw	r30, r14
     4be:	80 83       	st	Z, r24
     4c0:	2d c0       	rjmp	.+90     	; 0x51c <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 2)
     4c2:	12 30       	cpi	r17, 0x02	; 2
     4c4:	59 f5       	brne	.+86     	; 0x51c <KEYPAD_read+0xee>
                    {
                        *u8_a_value = 3 ;
     4c6:	83 e0       	ldi	r24, 0x03	; 3
     4c8:	f7 01       	movw	r30, r14
     4ca:	80 83       	st	Z, r24
     4cc:	27 c0       	rjmp	.+78     	; 0x51c <KEYPAD_read+0xee>
                    }
                }

                else if (u8_a_rowiterator == 1)
     4ce:	01 30       	cpi	r16, 0x01	; 1
     4d0:	91 f4       	brne	.+36     	; 0x4f6 <KEYPAD_read+0xc8>
                {
                    if (u8_a_coulumniterator == 0)
     4d2:	11 11       	cpse	r17, r1
     4d4:	04 c0       	rjmp	.+8      	; 0x4de <KEYPAD_read+0xb0>
                    {
                        *u8_a_value = 4 ;
     4d6:	84 e0       	ldi	r24, 0x04	; 4
     4d8:	f7 01       	movw	r30, r14
     4da:	80 83       	st	Z, r24
     4dc:	1f c0       	rjmp	.+62     	; 0x51c <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 1)
     4de:	11 30       	cpi	r17, 0x01	; 1
     4e0:	21 f4       	brne	.+8      	; 0x4ea <KEYPAD_read+0xbc>
                    {
                        *u8_a_value = 5 ;
     4e2:	85 e0       	ldi	r24, 0x05	; 5
     4e4:	f7 01       	movw	r30, r14
     4e6:	80 83       	st	Z, r24
     4e8:	19 c0       	rjmp	.+50     	; 0x51c <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 2)
     4ea:	12 30       	cpi	r17, 0x02	; 2
     4ec:	b9 f4       	brne	.+46     	; 0x51c <KEYPAD_read+0xee>
                    {
                        *u8_a_value = 6 ;
     4ee:	86 e0       	ldi	r24, 0x06	; 6
     4f0:	f7 01       	movw	r30, r14
     4f2:	80 83       	st	Z, r24
     4f4:	13 c0       	rjmp	.+38     	; 0x51c <KEYPAD_read+0xee>
                    }
                }

                else if (u8_a_rowiterator == 2)
     4f6:	02 30       	cpi	r16, 0x02	; 2
     4f8:	89 f4       	brne	.+34     	; 0x51c <KEYPAD_read+0xee>
                {
                    if (u8_a_coulumniterator == 0)
     4fa:	11 11       	cpse	r17, r1
     4fc:	04 c0       	rjmp	.+8      	; 0x506 <KEYPAD_read+0xd8>
                    {
                        *u8_a_value = 7 ;
     4fe:	87 e0       	ldi	r24, 0x07	; 7
     500:	f7 01       	movw	r30, r14
     502:	80 83       	st	Z, r24
     504:	0b c0       	rjmp	.+22     	; 0x51c <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 1)
     506:	11 30       	cpi	r17, 0x01	; 1
     508:	21 f4       	brne	.+8      	; 0x512 <KEYPAD_read+0xe4>
                    {
                        *u8_a_value = 8 ;
     50a:	88 e0       	ldi	r24, 0x08	; 8
     50c:	f7 01       	movw	r30, r14
     50e:	80 83       	st	Z, r24
     510:	05 c0       	rjmp	.+10     	; 0x51c <KEYPAD_read+0xee>
                    }
                    else if (u8_a_coulumniterator == 2)
     512:	12 30       	cpi	r17, 0x02	; 2
     514:	19 f4       	brne	.+6      	; 0x51c <KEYPAD_read+0xee>
                    {
                        *u8_a_value = 9 ;
     516:	89 e0       	ldi	r24, 0x09	; 9
     518:	f7 01       	movw	r30, r14
     51a:	80 83       	st	Z, r24
                    }
                }

                DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     51c:	6d 2d       	mov	r22, r13
     51e:	82 e0       	ldi	r24, 0x02	; 2
     520:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_togglepin>
                return KEYPAD_readSuccess;
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	0d c0       	rjmp	.+26     	; 0x542 <KEYPAD_read+0x114>

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
    {
        DIO_setpinvalue(ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] , u8_l_pinValue);

        for (u8_a_coulumniterator = 0; u8_a_coulumniterator < COLUMNS_SIZE; u8_a_coulumniterator++)
     528:	1f 5f       	subi	r17, 0xFF	; 255
     52a:	13 30       	cpi	r17, 0x03	; 3
     52c:	08 f4       	brcc	.+2      	; 0x530 <KEYPAD_read+0x102>
     52e:	ad cf       	rjmp	.-166    	; 0x48a <KEYPAD_read+0x5c>

                DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
                return KEYPAD_readSuccess;
            }
        }
        DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
     530:	6d 2d       	mov	r22, r13
     532:	82 e0       	ldi	r24, 0x02	; 2
     534:	0e 94 ba 05 	call	0xb74	; 0xb74 <DIO_togglepin>
    #endif

    uint8_t u8_l_Rows[ROWS_SIZE] = {R1, R2, R3};
    uint8_t u8_l_Columns[COLUMNS_SIZE] = {C1, C2, C3};

    for (u8_a_rowiterator = 0; u8_a_rowiterator < ROWS_SIZE; u8_a_rowiterator++)
     538:	0f 5f       	subi	r16, 0xFF	; 255
     53a:	04 30       	cpi	r16, 0x04	; 4
     53c:	08 f4       	brcc	.+2      	; 0x540 <KEYPAD_read+0x112>
     53e:	97 cf       	rjmp	.-210    	; 0x46e <KEYPAD_read+0x40>
                return KEYPAD_readSuccess;
            }
        }
        DIO_togglepin( ROW_PORT_DATA , u8_l_Rows[u8_a_rowiterator] );
    }
    return KEYPAD_readFail;
     540:	81 e0       	ldi	r24, 0x01	; 1
     542:	27 96       	adiw	r28, 0x07	; 7
     544:	0f b6       	in	r0, 0x3f	; 63
     546:	f8 94       	cli
     548:	de bf       	out	0x3e, r29	; 62
     54a:	0f be       	out	0x3f, r0	; 63
     54c:	cd bf       	out	0x3d, r28	; 61
     54e:	df 91       	pop	r29
     550:	cf 91       	pop	r28
     552:	1f 91       	pop	r17
     554:	0f 91       	pop	r16
     556:	ff 90       	pop	r15
     558:	ef 90       	pop	r14
     55a:	df 90       	pop	r13
     55c:	08 95       	ret

0000055e <LCD_sendcmd>:
/** FUNCTION TO SEND COMMAND TO LCD                       */
/** ARGUMENTS   : COMMAND                                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_sendcmd(uint8_t u8_a_cmd)
{
     55e:	cf 93       	push	r28
     560:	c8 2f       	mov	r28, r24
	TMR0_init();
     562:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <TMR0_init>
		DIO_setpinvalue(LCD_8BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
		TMR0_delayms(5); /** LOW **/
		
		#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_LOW);  /** COMMAND MODE       **/
     566:	40 e0       	ldi	r20, 0x00	; 0
     568:	61 e0       	ldi	r22, 0x01	; 1
     56a:	81 e0       	ldi	r24, 0x01	; 1
     56c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);  /** WRITE TO LCD MODE  **/
     570:	40 e0       	ldi	r20, 0x00	; 0
     572:	62 e0       	ldi	r22, 0x02	; 2
     574:	81 e0       	ldi	r24, 0x01	; 1
     576:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);   /** PREPARE FOR LATCH  **/
     57a:	40 e0       	ldi	r20, 0x00	; 0
     57c:	63 e0       	ldi	r22, 0x03	; 3
     57e:	81 e0       	ldi	r24, 0x01	; 1
     580:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
		
		PORTA = ((u8_a_cmd & 0xF0) | (PORTA & 0x0F)); /** SEND THE MSB(HIGH NIBBLE) **/
     584:	8b b3       	in	r24, 0x1b	; 27
     586:	9c 2f       	mov	r25, r28
     588:	90 7f       	andi	r25, 0xF0	; 240
     58a:	8f 70       	andi	r24, 0x0F	; 15
     58c:	89 2b       	or	r24, r25
     58e:	8b bb       	out	0x1b, r24	; 27
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
     590:	41 e0       	ldi	r20, 0x01	; 1
     592:	63 e0       	ldi	r22, 0x03	; 3
     594:	81 e0       	ldi	r24, 0x01	; 1
     596:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
		TMR0_delayms(1);
     59a:	61 e0       	ldi	r22, 0x01	; 1
     59c:	70 e0       	ldi	r23, 0x00	; 0
     59e:	80 e0       	ldi	r24, 0x00	; 0
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
     5a6:	40 e0       	ldi	r20, 0x00	; 0
     5a8:	63 e0       	ldi	r22, 0x03	; 3
     5aa:	81 e0       	ldi	r24, 0x01	; 1
     5ac:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
		
		
		PORTA = (((u8_a_cmd << 4) & 0xF0) | (PORTA & 0x0F)); /** SEND THE LSB(LOW NIBBLE) **/
     5b0:	20 e1       	ldi	r18, 0x10	; 16
     5b2:	c2 9f       	mul	r28, r18
     5b4:	c0 01       	movw	r24, r0
     5b6:	11 24       	eor	r1, r1
     5b8:	9b b3       	in	r25, 0x1b	; 27
     5ba:	9f 70       	andi	r25, 0x0F	; 15
     5bc:	89 2b       	or	r24, r25
     5be:	8b bb       	out	0x1b, r24	; 27
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
     5c0:	41 e0       	ldi	r20, 0x01	; 1
     5c2:	63 e0       	ldi	r22, 0x03	; 3
     5c4:	81 e0       	ldi	r24, 0x01	; 1
     5c6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
		TMR0_delayms(1);
     5ca:	61 e0       	ldi	r22, 0x01	; 1
     5cc:	70 e0       	ldi	r23, 0x00	; 0
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
		
		DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);    /** LATCH **/
     5d6:	40 e0       	ldi	r20, 0x00	; 0
     5d8:	63 e0       	ldi	r22, 0x03	; 3
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
		
		TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT COMMAND **/
     5e0:	65 e0       	ldi	r22, 0x05	; 5
     5e2:	70 e0       	ldi	r23, 0x00	; 0
     5e4:	80 e0       	ldi	r24, 0x00	; 0
     5e6:	90 e0       	ldi	r25, 0x00	; 0
     5e8:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
		
		#endif
}
     5ec:	cf 91       	pop	r28
     5ee:	08 95       	ret

000005f0 <LCD_init>:
/**********************************************************/
LCD_status LCD_init(void)
{
	LCD_status en_a_lcdinitstatus = VALID__LCD_INIT ; /** VARIABLE TO OLD THE RETURN STATUS OF THE FUNCTION **/
	
	TMR0_init();
     5f0:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <TMR0_init>
		LCD_sendcmd(LCD_CLEAR);       /** CLEAR THE LCD                                    **/
		
		
		#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
		
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_OUTPUT); /** SET RS PIN AS OUTPUT PIN **/
     5f4:	41 e0       	ldi	r20, 0x01	; 1
     5f6:	61 e0       	ldi	r22, 0x01	; 1
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_OUTPUT); /** SET RW PIN AS OUTPUT PIN **/
     5fe:	41 e0       	ldi	r20, 0x01	; 1
     600:	62 e0       	ldi	r22, 0x02	; 2
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_OUTPUT);  /** SET E PIN AS OUTPUT PIN  **/
     608:	41 e0       	ldi	r20, 0x01	; 1
     60a:	63 e0       	ldi	r22, 0x03	; 3
     60c:	81 e0       	ldi	r24, 0x01	; 1
     60e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_setpindir>
		
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D4_PIN , DIO_PIN_OUTPUT); /** 4 DATA PINS AS OUTPUT **/
     612:	41 e0       	ldi	r20, 0x01	; 1
     614:	64 e0       	ldi	r22, 0x04	; 4
     616:	80 e0       	ldi	r24, 0x00	; 0
     618:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D5_PIN , DIO_PIN_OUTPUT);
     61c:	41 e0       	ldi	r20, 0x01	; 1
     61e:	65 e0       	ldi	r22, 0x05	; 5
     620:	80 e0       	ldi	r24, 0x00	; 0
     622:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D6_PIN , DIO_PIN_OUTPUT);
     626:	41 e0       	ldi	r20, 0x01	; 1
     628:	66 e0       	ldi	r22, 0x06	; 6
     62a:	80 e0       	ldi	r24, 0x00	; 0
     62c:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_setpindir>
		DIO_setpindir(LCD_4BIT_DATA_PORT , LCD_D7_PIN , DIO_PIN_OUTPUT);
     630:	41 e0       	ldi	r20, 0x01	; 1
     632:	67 e0       	ldi	r22, 0x07	; 7
     634:	80 e0       	ldi	r24, 0x00	; 0
     636:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_setpindir>
		
		TMR0_delayms(20); /** DELAY FOR LCD TO BE INITIALIZED **/
     63a:	64 e1       	ldi	r22, 0x14	; 20
     63c:	70 e0       	ldi	r23, 0x00	; 0
     63e:	80 e0       	ldi	r24, 0x00	; 0
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
		
		/** SEND SOME COMMANDS TO THE LCD FOR INITIAL SET   **/
		
		LCD_sendcmd(LCD_4BIT_MODE_CMD1); /** SEND THREE COMMANDS FOR LCD TO SET 4 BIT OPERATION MODE ( 2 LINES , 5*8 MATRIX ) **/
     646:	83 e3       	ldi	r24, 0x33	; 51
     648:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_sendcmd>
		LCD_sendcmd(LCD_4BIT_MODE_CMD2);
     64c:	82 e3       	ldi	r24, 0x32	; 50
     64e:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_sendcmd>
		LCD_sendcmd(LCD_4BIT_MODE_CMD3);
     652:	88 e2       	ldi	r24, 0x28	; 40
     654:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_sendcmd>
		
		LCD_sendcmd(LCD_CURSOR_OFF);     /** NO NEED FOR CURSOR SO IT IS OFF                  **/
     658:	8c e0       	ldi	r24, 0x0C	; 12
     65a:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_sendcmd>
		LCD_sendcmd(LCD_CURSOR_INC);     /** DIRECTION OF WRITING FROM LEFT TO RIGHT          **/
     65e:	86 e0       	ldi	r24, 0x06	; 6
     660:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_sendcmd>
		LCD_sendcmd(LCD_RETURN_HOME);    /** CURSOR STARTS FROM ITS HOME POSITION             **/
     664:	82 e0       	ldi	r24, 0x02	; 2
     666:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_sendcmd>
		LCD_sendcmd(LCD_CLEAR);          /** CLEAR THE LCD                                    **/
     66a:	81 e0       	ldi	r24, 0x01	; 1
     66c:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_sendcmd>
		
		#endif 
		
}
     670:	08 95       	ret

00000672 <LCD_writechar>:
/** FUNCTION TO DISPLAY CHARACTER ON LCD                  */
/** ARGUMENTS   : CHARACTER                               */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writechar(uint8_t u8_a_chr)
{
     672:	cf 93       	push	r28
     674:	c8 2f       	mov	r28, r24
	
	TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT CHARACTER **/
	
	#elif LCD_MODE == BIT_MODE_4    /** IF LCD CONFIGURED AS 4 BIT MODE **/
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RS_PIN , DIO_PIN_HIGH);  /** DATA MODE         **/
     676:	41 e0       	ldi	r20, 0x01	; 1
     678:	61 e0       	ldi	r22, 0x01	; 1
     67a:	81 e0       	ldi	r24, 0x01	; 1
     67c:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_RW_PIN , DIO_PIN_LOW);   /** WRITE TO LCD MODE **/
     680:	40 e0       	ldi	r20, 0x00	; 0
     682:	62 e0       	ldi	r22, 0x02	; 2
     684:	81 e0       	ldi	r24, 0x01	; 1
     686:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);    /** DATA MODE         **/
     68a:	40 e0       	ldi	r20, 0x00	; 0
     68c:	63 e0       	ldi	r22, 0x03	; 3
     68e:	81 e0       	ldi	r24, 0x01	; 1
     690:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
	
	
	PORTA = ((u8_a_chr & 0xF0) | (PORTA & 0x0F)); /** SEND THE MSB (HIGH NIBBLE) **/
     694:	8b b3       	in	r24, 0x1b	; 27
     696:	9c 2f       	mov	r25, r28
     698:	90 7f       	andi	r25, 0xF0	; 240
     69a:	8f 70       	andi	r24, 0x0F	; 15
     69c:	89 2b       	or	r24, r25
     69e:	8b bb       	out	0x1b, r24	; 27
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
     6a0:	41 e0       	ldi	r20, 0x01	; 1
     6a2:	63 e0       	ldi	r22, 0x03	; 3
     6a4:	81 e0       	ldi	r24, 0x01	; 1
     6a6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
	TMR0_delayms(1);
     6aa:	61 e0       	ldi	r22, 0x01	; 1
     6ac:	70 e0       	ldi	r23, 0x00	; 0
     6ae:	80 e0       	ldi	r24, 0x00	; 0
     6b0:	90 e0       	ldi	r25, 0x00	; 0
     6b2:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW); /** LATCH **/
     6b6:	40 e0       	ldi	r20, 0x00	; 0
     6b8:	63 e0       	ldi	r22, 0x03	; 3
     6ba:	81 e0       	ldi	r24, 0x01	; 1
     6bc:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
		
	PORTA = (((u8_a_chr << 4) & 0xF0) | (PORTA & 0x0F)); /** SEND THE LSB (LOW NIBBLE) **/
     6c0:	20 e1       	ldi	r18, 0x10	; 16
     6c2:	c2 9f       	mul	r28, r18
     6c4:	c0 01       	movw	r24, r0
     6c6:	11 24       	eor	r1, r1
     6c8:	9b b3       	in	r25, 0x1b	; 27
     6ca:	9f 70       	andi	r25, 0x0F	; 15
     6cc:	89 2b       	or	r24, r25
     6ce:	8b bb       	out	0x1b, r24	; 27
	
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_HIGH); /** LATCH **/
     6d0:	41 e0       	ldi	r20, 0x01	; 1
     6d2:	63 e0       	ldi	r22, 0x03	; 3
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
	TMR0_delayms(1);
     6da:	61 e0       	ldi	r22, 0x01	; 1
     6dc:	70 e0       	ldi	r23, 0x00	; 0
     6de:	80 e0       	ldi	r24, 0x00	; 0
     6e0:	90 e0       	ldi	r25, 0x00	; 0
     6e2:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
	DIO_setpinvalue(LCD_4BIT_CMD_PORT , LCD_E_PIN , DIO_PIN_LOW);  /** LATCH **/
     6e6:	40 e0       	ldi	r20, 0x00	; 0
     6e8:	63 e0       	ldi	r22, 0x03	; 3
     6ea:	81 e0       	ldi	r24, 0x01	; 1
     6ec:	0e 94 fd 04 	call	0x9fa	; 0x9fa <DIO_setpinvalue>
	
	TMR0_delayms(5); /** 5 ms BEFORE SENDING THE NEXT CHARACTER **/
     6f0:	65 e0       	ldi	r22, 0x05	; 5
     6f2:	70 e0       	ldi	r23, 0x00	; 0
     6f4:	80 e0       	ldi	r24, 0x00	; 0
     6f6:	90 e0       	ldi	r25, 0x00	; 0
     6f8:	0e 94 1b 06 	call	0xc36	; 0xc36 <TMR0_delayms>
	
	#endif
}
     6fc:	cf 91       	pop	r28
     6fe:	08 95       	ret

00000700 <LCD_writestr>:
/** FUNCTION TO DISPLAY STRING ON LCD                     */
/** ARGUMENTS   : STRING                                  */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writestr(uint8_t* u8_s_str)
{
     700:	0f 93       	push	r16
     702:	1f 93       	push	r17
     704:	cf 93       	push	r28
     706:	8c 01       	movw	r16, r24
	uint8_t u8_a_letter = 0;   /** VARIABLE SIMULATES LETTER **/
     708:	c0 e0       	ldi	r28, 0x00	; 0
	
	while (u8_s_str[u8_a_letter] != '\0') /** WHILE LETTER ISN'T NULL **/
     70a:	03 c0       	rjmp	.+6      	; 0x712 <LCD_writestr+0x12>
	{
		LCD_writechar(u8_s_str[u8_a_letter]); /** SEND LETTER TO LCD **/
     70c:	0e 94 39 03 	call	0x672	; 0x672 <LCD_writechar>
		
		u8_a_letter++; /** JUMP TO THE NEXT LETTER **/
     710:	cf 5f       	subi	r28, 0xFF	; 255
/**********************************************************/
LCD_status LCD_writestr(uint8_t* u8_s_str)
{
	uint8_t u8_a_letter = 0;   /** VARIABLE SIMULATES LETTER **/
	
	while (u8_s_str[u8_a_letter] != '\0') /** WHILE LETTER ISN'T NULL **/
     712:	f8 01       	movw	r30, r16
     714:	ec 0f       	add	r30, r28
     716:	f1 1d       	adc	r31, r1
     718:	80 81       	ld	r24, Z
     71a:	81 11       	cpse	r24, r1
     71c:	f7 cf       	rjmp	.-18     	; 0x70c <LCD_writestr+0xc>
	{
		LCD_writechar(u8_s_str[u8_a_letter]); /** SEND LETTER TO LCD **/
		
		u8_a_letter++; /** JUMP TO THE NEXT LETTER **/
	}
}
     71e:	cf 91       	pop	r28
     720:	1f 91       	pop	r17
     722:	0f 91       	pop	r16
     724:	08 95       	ret

00000726 <LCD_goto>:
/** FUNCTION TO JUMP TO SPECIFIC POSITION ON LCD          */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status  LCD_goto(uint8_t u8_a_row , uint8_t u8_a_column)
{
     726:	cf 93       	push	r28
     728:	df 93       	push	r29
     72a:	00 d0       	rcall	.+0      	; 0x72c <LCD_goto+0x6>
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
	uint8_t positions[2] = {0x80 , 0xC0}; /** POSITIONS OF 1st & 2nd ROWS **/
     730:	90 e8       	ldi	r25, 0x80	; 128
     732:	99 83       	std	Y+1, r25	; 0x01
     734:	90 ec       	ldi	r25, 0xC0	; 192
     736:	9a 83       	std	Y+2, r25	; 0x02
	
	LCD_sendcmd(positions[u8_a_row] + u8_a_column); /** GO TO SPECIFIC MATRIX **/
     738:	e1 e0       	ldi	r30, 0x01	; 1
     73a:	f0 e0       	ldi	r31, 0x00	; 0
     73c:	ec 0f       	add	r30, r28
     73e:	fd 1f       	adc	r31, r29
     740:	e8 0f       	add	r30, r24
     742:	f1 1d       	adc	r31, r1
     744:	80 81       	ld	r24, Z
     746:	86 0f       	add	r24, r22
     748:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_sendcmd>
}
     74c:	0f 90       	pop	r0
     74e:	0f 90       	pop	r0
     750:	df 91       	pop	r29
     752:	cf 91       	pop	r28
     754:	08 95       	ret

00000756 <LCD_writecustomchar>:
/** FUNCTION TO WRITE CUSOMIZED CHARACTER ON THE LCD      */
/** ARGUMENTS   : PATTERN , OCATION IN CGRAM              */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writecustomchar(uint8_t * u8_a_pattern , uint8_t u8_a_location)
{
     756:	0f 93       	push	r16
     758:	1f 93       	push	r17
     75a:	cf 93       	push	r28
     75c:	8c 01       	movw	r16, r24
	uint8_t u8_a_patterncounter = 0 ; /** ITERATOR ON THE ROWS OF CHARACTER PATTERN **/
	
	LCD_sendcmd( 0x40 + (u8_a_location * 8) ); /** SEND COMMAND TO LCD TO WRITE TO ITS RAM **/
     75e:	86 2f       	mov	r24, r22
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	08 96       	adiw	r24, 0x08	; 8
     764:	88 0f       	add	r24, r24
     766:	88 0f       	add	r24, r24
     768:	88 0f       	add	r24, r24
     76a:	0e 94 af 02 	call	0x55e	; 0x55e <LCD_sendcmd>
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
     76e:	c0 e0       	ldi	r28, 0x00	; 0
     770:	07 c0       	rjmp	.+14     	; 0x780 <LCD_writecustomchar+0x2a>
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
     772:	f8 01       	movw	r30, r16
     774:	ec 0f       	add	r30, r28
     776:	f1 1d       	adc	r31, r1
     778:	80 81       	ld	r24, Z
     77a:	0e 94 39 03 	call	0x672	; 0x672 <LCD_writechar>
{
	uint8_t u8_a_patterncounter = 0 ; /** ITERATOR ON THE ROWS OF CHARACTER PATTERN **/
	
	LCD_sendcmd( 0x40 + (u8_a_location * 8) ); /** SEND COMMAND TO LCD TO WRITE TO ITS RAM **/
	
	for(u8_a_patterncounter = 0 ; u8_a_patterncounter < 8 ; u8_a_patterncounter++)
     77e:	cf 5f       	subi	r28, 0xFF	; 255
     780:	c8 30       	cpi	r28, 0x08	; 8
     782:	b8 f3       	brcs	.-18     	; 0x772 <LCD_writecustomchar+0x1c>
	{
		LCD_writechar(u8_a_pattern[u8_a_patterncounter]); /** STORE 8 BYTES (PATTERN) **/
	}
}
     784:	cf 91       	pop	r28
     786:	1f 91       	pop	r17
     788:	0f 91       	pop	r16
     78a:	08 95       	ret

0000078c <LCD_writeint>:
/** FUNCTION TO WRITE INT ON THE LCD                      */
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
     78c:	1f 93       	push	r17
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	cd b7       	in	r28, 0x3d	; 61
     794:	de b7       	in	r29, 0x3e	; 62
     796:	2a 97       	sbiw	r28, 0x0a	; 10
     798:	0f b6       	in	r0, 0x3f	; 63
     79a:	f8 94       	cli
     79c:	de bf       	out	0x3e, r29	; 62
     79e:	0f be       	out	0x3f, r0	; 63
     7a0:	cd bf       	out	0x3d, r28	; 61
	uint8_t i = 0 , k ;
	
	uint8_t number[10];
	
	/* In case of negative numbers */
	if(s32_a_num < 0)
     7a2:	99 23       	and	r25, r25
     7a4:	dc f5       	brge	.+118    	; 0x81c <__DATA_REGION_LENGTH__+0x1c>
	{
		s32_a_num *= -1;
     7a6:	90 95       	com	r25
     7a8:	80 95       	com	r24
     7aa:	70 95       	com	r23
     7ac:	61 95       	neg	r22
     7ae:	7f 4f       	sbci	r23, 0xFF	; 255
     7b0:	8f 4f       	sbci	r24, 0xFF	; 255
     7b2:	9f 4f       	sbci	r25, 0xFF	; 255
/** ARGUMENTS   : ROW , COLUMN (POSITION)                 */
/** RETURNS     : ERROR STATUS                            */
/**********************************************************/
LCD_status LCD_writeint(sint32_t s32_a_num)
{
	uint8_t i = 0 , k ;
     7b4:	10 e0       	ldi	r17, 0x00	; 0
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     7b6:	13 c0       	rjmp	.+38     	; 0x7de <LCD_writeint+0x52>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
     7b8:	2a e0       	ldi	r18, 0x0A	; 10
     7ba:	30 e0       	ldi	r19, 0x00	; 0
     7bc:	40 e0       	ldi	r20, 0x00	; 0
     7be:	50 e0       	ldi	r21, 0x00	; 0
     7c0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__divmodsi4>
     7c4:	e1 e0       	ldi	r30, 0x01	; 1
     7c6:	f0 e0       	ldi	r31, 0x00	; 0
     7c8:	ec 0f       	add	r30, r28
     7ca:	fd 1f       	adc	r31, r29
     7cc:	e1 0f       	add	r30, r17
     7ce:	f1 1d       	adc	r31, r1
     7d0:	60 5d       	subi	r22, 0xD0	; 208
     7d2:	60 83       	st	Z, r22
			s32_a_num /= 10;
     7d4:	62 2f       	mov	r22, r18
     7d6:	73 2f       	mov	r23, r19
     7d8:	84 2f       	mov	r24, r20
     7da:	95 2f       	mov	r25, r21
			i++;
     7dc:	1f 5f       	subi	r17, 0xFF	; 255
	/* In case of negative numbers */
	if(s32_a_num < 0)
	{
		s32_a_num *= -1;
		
		while(s32_a_num > 0)
     7de:	16 16       	cp	r1, r22
     7e0:	17 06       	cpc	r1, r23
     7e2:	18 06       	cpc	r1, r24
     7e4:	19 06       	cpc	r1, r25
     7e6:	44 f3       	brlt	.-48     	; 0x7b8 <LCD_writeint+0x2c>
		{
			number[i] = (s32_a_num % 10) + 48;  //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
     7e8:	e1 e0       	ldi	r30, 0x01	; 1
     7ea:	f0 e0       	ldi	r31, 0x00	; 0
     7ec:	ec 0f       	add	r30, r28
     7ee:	fd 1f       	adc	r31, r29
     7f0:	e1 0f       	add	r30, r17
     7f2:	f1 1d       	adc	r31, r1
     7f4:	8d e2       	ldi	r24, 0x2D	; 45
     7f6:	80 83       	st	Z, r24
		
		for(k = i+1 ; k > 0 ; k--)
     7f8:	1f 5f       	subi	r17, 0xFF	; 255
     7fa:	0d c0       	rjmp	.+26     	; 0x816 <__DATA_REGION_LENGTH__+0x16>
		{
			LCD_writechar(number[k - 1]); //Display each number
     7fc:	e1 2f       	mov	r30, r17
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	31 97       	sbiw	r30, 0x01	; 1
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	90 e0       	ldi	r25, 0x00	; 0
     806:	8c 0f       	add	r24, r28
     808:	9d 1f       	adc	r25, r29
     80a:	e8 0f       	add	r30, r24
     80c:	f9 1f       	adc	r31, r25
     80e:	80 81       	ld	r24, Z
     810:	0e 94 39 03 	call	0x672	; 0x672 <LCD_writechar>
			s32_a_num /= 10;
			i++;
		}
		number[i] = '-'; // storing the negative sign
		
		for(k = i+1 ; k > 0 ; k--)
     814:	11 50       	subi	r17, 0x01	; 1
     816:	11 11       	cpse	r17, r1
     818:	f1 cf       	rjmp	.-30     	; 0x7fc <LCD_writeint+0x70>
     81a:	39 c0       	rjmp	.+114    	; 0x88e <__stack+0x2f>
		{
			LCD_writechar(number[k - 1]); //Display each number
		}
	}
	/* Zero case */
	else if(s32_a_num == 0)
     81c:	61 15       	cp	r22, r1
     81e:	71 05       	cpc	r23, r1
     820:	81 05       	cpc	r24, r1
     822:	91 05       	cpc	r25, r1
     824:	21 f4       	brne	.+8      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
	{
		LCD_writechar('0');
     826:	80 e3       	ldi	r24, 0x30	; 48
     828:	0e 94 39 03 	call	0x672	; 0x672 <LCD_writechar>
     82c:	30 c0       	rjmp	.+96     	; 0x88e <__stack+0x2f>
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
     82e:	16 16       	cp	r1, r22
     830:	17 06       	cpc	r1, r23
     832:	18 06       	cpc	r1, r24
     834:	19 06       	cpc	r1, r25
     836:	ac f0       	brlt	.+42     	; 0x862 <__stack+0x3>
     838:	2a c0       	rjmp	.+84     	; 0x88e <__stack+0x2f>
	{
		while(s32_a_num > 0)
		{
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
     83a:	2a e0       	ldi	r18, 0x0A	; 10
     83c:	30 e0       	ldi	r19, 0x00	; 0
     83e:	40 e0       	ldi	r20, 0x00	; 0
     840:	50 e0       	ldi	r21, 0x00	; 0
     842:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <__divmodsi4>
     846:	e1 e0       	ldi	r30, 0x01	; 1
     848:	f0 e0       	ldi	r31, 0x00	; 0
     84a:	ec 0f       	add	r30, r28
     84c:	fd 1f       	adc	r31, r29
     84e:	e1 0f       	add	r30, r17
     850:	f1 1d       	adc	r31, r1
     852:	60 5d       	subi	r22, 0xD0	; 208
     854:	60 83       	st	Z, r22
			s32_a_num /= 10;
     856:	62 2f       	mov	r22, r18
     858:	73 2f       	mov	r23, r19
     85a:	84 2f       	mov	r24, r20
     85c:	95 2f       	mov	r25, r21
			i++;
     85e:	1f 5f       	subi	r17, 0xFF	; 255
     860:	01 c0       	rjmp	.+2      	; 0x864 <__stack+0x5>
     862:	10 e0       	ldi	r17, 0x00	; 0
	}
	
	/* In case of positive numbers */
	else if(s32_a_num > 0)
	{
		while(s32_a_num > 0)
     864:	16 16       	cp	r1, r22
     866:	17 06       	cpc	r1, r23
     868:	18 06       	cpc	r1, r24
     86a:	19 06       	cpc	r1, r25
     86c:	34 f3       	brlt	.-52     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     86e:	0d c0       	rjmp	.+26     	; 0x88a <__stack+0x2b>
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
		{
			LCD_writechar(number[k-1]); //Display each number
     870:	e1 2f       	mov	r30, r17
     872:	f0 e0       	ldi	r31, 0x00	; 0
     874:	31 97       	sbiw	r30, 0x01	; 1
     876:	81 e0       	ldi	r24, 0x01	; 1
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	8c 0f       	add	r24, r28
     87c:	9d 1f       	adc	r25, r29
     87e:	e8 0f       	add	r30, r24
     880:	f9 1f       	adc	r31, r25
     882:	80 81       	ld	r24, Z
     884:	0e 94 39 03 	call	0x672	; 0x672 <LCD_writechar>
			number[i] = (s32_a_num % 10) + 48; //Equivalent ASCII of number
			s32_a_num /= 10;
			i++;
		}
		
		for(k = i ; k > 0 ; k--)
     888:	11 50       	subi	r17, 0x01	; 1
     88a:	11 11       	cpse	r17, r1
     88c:	f1 cf       	rjmp	.-30     	; 0x870 <__stack+0x11>
		{
			LCD_writechar(number[k-1]); //Display each number
		}
	}
     88e:	2a 96       	adiw	r28, 0x0a	; 10
     890:	0f b6       	in	r0, 0x3f	; 63
     892:	f8 94       	cli
     894:	de bf       	out	0x3e, r29	; 62
     896:	0f be       	out	0x3f, r0	; 63
     898:	cd bf       	out	0x3d, r28	; 61
     89a:	df 91       	pop	r29
     89c:	cf 91       	pop	r28
     89e:	1f 91       	pop	r17
     8a0:	08 95       	ret

000008a2 <main>:
#include "APP/app.h"


int main(void)
{
	APP_init();
     8a2:	0e 94 49 00 	call	0x92	; 0x92 <APP_init>
	

    /* Replace with your application code */
    while (1) 
    {
		APP_start();
     8a6:	0e 94 ad 00 	call	0x15a	; 0x15a <APP_start>
     8aa:	fd cf       	rjmp	.-6      	; 0x8a6 <main+0x4>

000008ac <ADC_init>:
/***********************************************************/
ADC_initstatus ADC_init(void)
{
	/** SET THE VOLTAGE REFERENCE AS IT'S CONFIGURED **/
 	#if   ADC_VOLTAGE_REFRENCE   ==      AVCC_SOURCE
 	set_bit(ADMUX , 6);
     8ac:	87 b1       	in	r24, 0x07	; 7
     8ae:	80 64       	ori	r24, 0x40	; 64
     8b0:	87 b9       	out	0x07, r24	; 7
 	clear_bit(ADMUX , 7);
     8b2:	87 b1       	in	r24, 0x07	; 7
     8b4:	8f 77       	andi	r24, 0x7F	; 127
     8b6:	87 b9       	out	0x07, r24	; 7
	
	#endif
	
	
	#if   ADC_CHANNEL           ==     CHANNEL1
	set_bit(ADMUX , 0);
     8b8:	87 b1       	in	r24, 0x07	; 7
     8ba:	81 60       	ori	r24, 0x01	; 1
     8bc:	87 b9       	out	0x07, r24	; 7
	DIO_setpindir(DIO_PORTA , DIO_PIN1 , DIO_PIN_INPUT); /** SET THE DIRECION OF PIN CHANNEL AS INPUT **/
     8be:	40 e0       	ldi	r20, 0x00	; 0
     8c0:	61 e0       	ldi	r22, 0x01	; 1
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	0e 94 7e 04 	call	0x8fc	; 0x8fc <DIO_setpindir>
	#elif  ADC_PRESCALER          ==      PRESCALER8
		 set_bit(ADCSRA , 0);
		 set_bit(ADCSRA , 1);
		
	#elif  ADC_PRESCALER          ==      PRESCALER4
		 set_bit(ADCSRA , 1);
     8c8:	86 b1       	in	r24, 0x06	; 6
     8ca:	82 60       	ori	r24, 0x02	; 2
     8cc:	86 b9       	out	0x06, r24	; 6
	     
	#endif
	
	/** SET THE ADJUSTING MODE OF ADC VALUE  **/
	#if    ADC_ADjUST            ==     RIGHT_ADJUST
	clear_bit(ADMUX , 5);
     8ce:	87 b1       	in	r24, 0x07	; 7
     8d0:	8f 7d       	andi	r24, 0xDF	; 223
     8d2:	87 b9       	out	0x07, r24	; 7
	
	#endif
		
	/** SET THE OPERATING MODE OF ADC **/
	#if  ADC_CONVERSION_TRIGGER  ==    AUTO_RUNNING_MODE
	set_bit(ADCSRA , 5);
     8d4:	86 b1       	in	r24, 0x06	; 6
     8d6:	80 62       	ori	r24, 0x20	; 32
     8d8:	86 b9       	out	0x06, r24	; 6
 	
	 
	/** ADC INTERRUPT STATUS **/
	#if  ADC_INTERRUPT_STATUS   ==     ADC_INT_DISABLED
	
	clear_bit(ADCSRA , 3);
     8da:	86 b1       	in	r24, 0x06	; 6
     8dc:	87 7f       	andi	r24, 0xF7	; 247
     8de:	86 b9       	out	0x06, r24	; 6
 	set_bit(SREG , 7);
 	set_bit(ADCSRA , 3);
	#endif
	
	/** Enable  ADC **/
	set_bit(ADCSRA , 7);
     8e0:	86 b1       	in	r24, 0x06	; 6
     8e2:	80 68       	ori	r24, 0x80	; 128
     8e4:	86 b9       	out	0x06, r24	; 6
}
     8e6:	08 95       	ret

000008e8 <ADC_read>:
/***********************************************************/
uint32_t ADC_read(void)
{
	uint32_t u16_a_analogvalue = 0;
		
	set_bit(ADCSRA , 6); /** SATRT CONVERSION **/
     8e8:	86 b1       	in	r24, 0x06	; 6
     8ea:	80 64       	ori	r24, 0x40	; 64
     8ec:	86 b9       	out	0x06, r24	; 6
	
	while( (ADCSRA & (1 << 4)) == 0); /** WAIT UNTILL CONVERSION ENDS **/
     8ee:	34 9b       	sbis	0x06, 4	; 6
     8f0:	fe cf       	rjmp	.-4      	; 0x8ee <ADC_read+0x6>
	
	u16_a_analogvalue = ADC_VAL ; /** GET THE VALUE FORM ADC VALUE REGISTER **/
     8f2:	64 b1       	in	r22, 0x04	; 4
     8f4:	75 b1       	in	r23, 0x05	; 5
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	90 e0       	ldi	r25, 0x00	; 0
	 
	return u16_a_analogvalue; /** RETURN THE ANALOG VALUE **/ 
     8fa:	08 95       	ret

000008fc <DIO_setpindir>:
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
	
	switch(u8_a_pindir) /** SWITCH CASE ON THE DIRECTION VALUE **/
     8fc:	44 23       	and	r20, r20
     8fe:	19 f0       	breq	.+6      	; 0x906 <DIO_setpindir+0xa>
     900:	41 30       	cpi	r20, 0x01	; 1
     902:	e9 f1       	breq	.+122    	; 0x97e <DIO_setpindir+0x82>
     904:	74 c0       	rjmp	.+232    	; 0x9ee <DIO_setpindir+0xf2>
	{
		case DIO_PIN_INPUT:  /* INPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     906:	81 30       	cpi	r24, 0x01	; 1
     908:	99 f0       	breq	.+38     	; 0x930 <DIO_setpindir+0x34>
     90a:	28 f0       	brcs	.+10     	; 0x916 <DIO_setpindir+0x1a>
     90c:	82 30       	cpi	r24, 0x02	; 2
     90e:	e9 f0       	breq	.+58     	; 0x94a <DIO_setpindir+0x4e>
     910:	83 30       	cpi	r24, 0x03	; 3
     912:	41 f1       	breq	.+80     	; 0x964 <DIO_setpindir+0x68>
     914:	6e c0       	rjmp	.+220    	; 0x9f2 <DIO_setpindir+0xf6>
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
     916:	2a b3       	in	r18, 0x1a	; 26
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	02 c0       	rjmp	.+4      	; 0x922 <DIO_setpindir+0x26>
     91e:	88 0f       	add	r24, r24
     920:	99 1f       	adc	r25, r25
     922:	6a 95       	dec	r22
     924:	e2 f7       	brpl	.-8      	; 0x91e <DIO_setpindir+0x22>
     926:	80 95       	com	r24
     928:	82 23       	and	r24, r18
     92a:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     92c:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
     92e:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
     930:	27 b3       	in	r18, 0x17	; 23
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	90 e0       	ldi	r25, 0x00	; 0
     936:	02 c0       	rjmp	.+4      	; 0x93c <DIO_setpindir+0x40>
     938:	88 0f       	add	r24, r24
     93a:	99 1f       	adc	r25, r25
     93c:	6a 95       	dec	r22
     93e:	e2 f7       	brpl	.-8      	; 0x938 <DIO_setpindir+0x3c>
     940:	80 95       	com	r24
     942:	82 23       	and	r24, r18
     944:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     946:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRA , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTA AS INPUT PIN **/
			break;
			
			case DIO_PORTB:
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
     948:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
     94a:	24 b3       	in	r18, 0x14	; 20
     94c:	81 e0       	ldi	r24, 0x01	; 1
     94e:	90 e0       	ldi	r25, 0x00	; 0
     950:	02 c0       	rjmp	.+4      	; 0x956 <DIO_setpindir+0x5a>
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	6a 95       	dec	r22
     958:	e2 f7       	brpl	.-8      	; 0x952 <DIO_setpindir+0x56>
     95a:	80 95       	com	r24
     95c:	82 23       	and	r24, r18
     95e:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     960:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRB , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTB AS INPUT PIN **/
			break;
			
			case DIO_PORTC:
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
     962:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
     964:	21 b3       	in	r18, 0x11	; 17
     966:	81 e0       	ldi	r24, 0x01	; 1
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	02 c0       	rjmp	.+4      	; 0x970 <DIO_setpindir+0x74>
     96c:	88 0f       	add	r24, r24
     96e:	99 1f       	adc	r25, r25
     970:	6a 95       	dec	r22
     972:	e2 f7       	brpl	.-8      	; 0x96c <DIO_setpindir+0x70>
     974:	80 95       	com	r24
     976:	82 23       	and	r24, r18
     978:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     97a:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(DDRC , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTC AS INPUT PIN **/
			break;
			
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
     97c:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_OUTPUT:  /* OUTPUT CASE  */
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
     97e:	81 30       	cpi	r24, 0x01	; 1
     980:	91 f0       	breq	.+36     	; 0x9a6 <DIO_setpindir+0xaa>
     982:	28 f0       	brcs	.+10     	; 0x98e <DIO_setpindir+0x92>
     984:	82 30       	cpi	r24, 0x02	; 2
     986:	d9 f0       	breq	.+54     	; 0x9be <DIO_setpindir+0xc2>
     988:	83 30       	cpi	r24, 0x03	; 3
     98a:	29 f1       	breq	.+74     	; 0x9d6 <DIO_setpindir+0xda>
     98c:	34 c0       	rjmp	.+104    	; 0x9f6 <DIO_setpindir+0xfa>
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     98e:	2a b3       	in	r18, 0x1a	; 26
     990:	81 e0       	ldi	r24, 0x01	; 1
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	02 c0       	rjmp	.+4      	; 0x99a <DIO_setpindir+0x9e>
     996:	88 0f       	add	r24, r24
     998:	99 1f       	adc	r25, r25
     99a:	6a 95       	dec	r22
     99c:	e2 f7       	brpl	.-8      	; 0x996 <DIO_setpindir+0x9a>
     99e:	82 2b       	or	r24, r18
     9a0:	8a bb       	out	0x1a, r24	; 26
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     9a2:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid) /** SWITCH CASE ON THE PORT ID */
		{
			case DIO_PORTA:
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     9a4:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     9a6:	27 b3       	in	r18, 0x17	; 23
     9a8:	81 e0       	ldi	r24, 0x01	; 1
     9aa:	90 e0       	ldi	r25, 0x00	; 0
     9ac:	02 c0       	rjmp	.+4      	; 0x9b2 <DIO_setpindir+0xb6>
     9ae:	88 0f       	add	r24, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	6a 95       	dec	r22
     9b4:	e2 f7       	brpl	.-8      	; 0x9ae <DIO_setpindir+0xb2>
     9b6:	82 2b       	or	r24, r18
     9b8:	87 bb       	out	0x17, r24	; 23
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     9ba:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRA , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTB:
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     9bc:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     9be:	24 b3       	in	r18, 0x14	; 20
     9c0:	81 e0       	ldi	r24, 0x01	; 1
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	02 c0       	rjmp	.+4      	; 0x9ca <DIO_setpindir+0xce>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	6a 95       	dec	r22
     9cc:	e2 f7       	brpl	.-8      	; 0x9c6 <DIO_setpindir+0xca>
     9ce:	82 2b       	or	r24, r18
     9d0:	84 bb       	out	0x14, r24	; 20
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     9d2:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRB , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTC:
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     9d4:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
     9d6:	21 b3       	in	r18, 0x11	; 17
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	90 e0       	ldi	r25, 0x00	; 0
     9dc:	02 c0       	rjmp	.+4      	; 0x9e2 <DIO_setpindir+0xe6>
     9de:	88 0f       	add	r24, r24
     9e0:	99 1f       	adc	r25, r25
     9e2:	6a 95       	dec	r22
     9e4:	e2 f7       	brpl	.-8      	; 0x9de <DIO_setpindir+0xe2>
     9e6:	82 2b       	or	r24, r18
     9e8:	81 bb       	out	0x11, r24	; 17
/* INPUT   : PORT , PINID , DIRECTION                             */
/* RETURNS : PinDirection_t                                       */
/******************************************************************/
PinDirection_t DIO_setpindir(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pindir)
{
	PinDirection_t en_a_dirstate = VALID_DIRECTION ; /** VARIABLE TO RETURN THE STATUS OF DIRECTION **/
     9ea:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(DDRC , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
     9ec:	08 95       	ret
		} 
		break;
		 
		 
		default:  /** DIRECTION ISN'T INPUT OR OUTPUT */
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     9ee:	81 e0       	ldi	r24, 0x01	; 1
     9f0:	08 95       	ret
			case DIO_PORTD:
			clear_bit(DDRD , u8_a_pinid);           /** CONFIGURE THIS PIN IN PORTD AS INPUT PIN **/
			break;
			
			default: /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     9f2:	81 e0       	ldi	r24, 0x01	; 1
     9f4:	08 95       	ret
			case DIO_PORTD:
			set_bit(DDRD , u8_a_pinid);             /** CONFIGURE THIS PIN IN PORTA AS OUTPUT PIN **/
			break;
			
			default:  /** DO NOTHING **/
			en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
     9f6:	81 e0       	ldi	r24, 0x01	; 1
		en_a_dirstate = NOT_VALID_DIRECTION ; /** RETURN AS DIR NOT VALID ERRORS **/
		break ; 
	} 
	
	return en_a_dirstate ; /** RETURN THE STATE OF FUNCTION **/
}
     9f8:	08 95       	ret

000009fa <DIO_setpinvalue>:
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
	
	switch(u8_a_pinval)
     9fa:	44 23       	and	r20, r20
     9fc:	19 f0       	breq	.+6      	; 0xa04 <DIO_setpinvalue+0xa>
     9fe:	41 30       	cpi	r20, 0x01	; 1
     a00:	e9 f1       	breq	.+122    	; 0xa7c <DIO_setpinvalue+0x82>
     a02:	74 c0       	rjmp	.+232    	; 0xaec <DIO_setpinvalue+0xf2>
	{
		case DIO_PIN_LOW:  /** IN CASE PIN VALUE IS LOW */
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
     a04:	81 30       	cpi	r24, 0x01	; 1
     a06:	99 f0       	breq	.+38     	; 0xa2e <DIO_setpinvalue+0x34>
     a08:	28 f0       	brcs	.+10     	; 0xa14 <DIO_setpinvalue+0x1a>
     a0a:	82 30       	cpi	r24, 0x02	; 2
     a0c:	e9 f0       	breq	.+58     	; 0xa48 <DIO_setpinvalue+0x4e>
     a0e:	83 30       	cpi	r24, 0x03	; 3
     a10:	41 f1       	breq	.+80     	; 0xa62 <DIO_setpinvalue+0x68>
     a12:	6e c0       	rjmp	.+220    	; 0xaf0 <DIO_setpinvalue+0xf6>
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     a14:	2b b3       	in	r18, 0x1b	; 27
     a16:	81 e0       	ldi	r24, 0x01	; 1
     a18:	90 e0       	ldi	r25, 0x00	; 0
     a1a:	02 c0       	rjmp	.+4      	; 0xa20 <DIO_setpinvalue+0x26>
     a1c:	88 0f       	add	r24, r24
     a1e:	99 1f       	adc	r25, r25
     a20:	6a 95       	dec	r22
     a22:	e2 f7       	brpl	.-8      	; 0xa1c <DIO_setpinvalue+0x22>
     a24:	80 95       	com	r24
     a26:	82 23       	and	r24, r18
     a28:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     a2a:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)  /** SWITCH CASE ON THE PORT ID */ 
		{
			case DIO_PORTA:
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     a2c:	08 95       	ret
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     a2e:	28 b3       	in	r18, 0x18	; 24
     a30:	81 e0       	ldi	r24, 0x01	; 1
     a32:	90 e0       	ldi	r25, 0x00	; 0
     a34:	02 c0       	rjmp	.+4      	; 0xa3a <DIO_setpinvalue+0x40>
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	6a 95       	dec	r22
     a3c:	e2 f7       	brpl	.-8      	; 0xa36 <DIO_setpinvalue+0x3c>
     a3e:	80 95       	com	r24
     a40:	82 23       	and	r24, r18
     a42:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     a44:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTA , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTB:
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     a46:	08 95       	ret
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     a48:	25 b3       	in	r18, 0x15	; 21
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	02 c0       	rjmp	.+4      	; 0xa54 <DIO_setpinvalue+0x5a>
     a50:	88 0f       	add	r24, r24
     a52:	99 1f       	adc	r25, r25
     a54:	6a 95       	dec	r22
     a56:	e2 f7       	brpl	.-8      	; 0xa50 <DIO_setpinvalue+0x56>
     a58:	80 95       	com	r24
     a5a:	82 23       	and	r24, r18
     a5c:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     a5e:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTB , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTC:
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     a60:	08 95       	ret
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
     a62:	22 b3       	in	r18, 0x12	; 18
     a64:	81 e0       	ldi	r24, 0x01	; 1
     a66:	90 e0       	ldi	r25, 0x00	; 0
     a68:	02 c0       	rjmp	.+4      	; 0xa6e <DIO_setpinvalue+0x74>
     a6a:	88 0f       	add	r24, r24
     a6c:	99 1f       	adc	r25, r25
     a6e:	6a 95       	dec	r22
     a70:	e2 f7       	brpl	.-8      	; 0xa6a <DIO_setpinvalue+0x70>
     a72:	80 95       	com	r24
     a74:	82 23       	and	r24, r18
     a76:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     a78:	80 e0       	ldi	r24, 0x00	; 0
			clear_bit(PORTC , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
     a7a:	08 95       	ret
		} 
		break;
		
		case DIO_PIN_HIGH:
		
		switch(u8_a_portid)
     a7c:	81 30       	cpi	r24, 0x01	; 1
     a7e:	91 f0       	breq	.+36     	; 0xaa4 <DIO_setpinvalue+0xaa>
     a80:	28 f0       	brcs	.+10     	; 0xa8c <DIO_setpinvalue+0x92>
     a82:	82 30       	cpi	r24, 0x02	; 2
     a84:	d9 f0       	breq	.+54     	; 0xabc <DIO_setpinvalue+0xc2>
     a86:	83 30       	cpi	r24, 0x03	; 3
     a88:	29 f1       	breq	.+74     	; 0xad4 <DIO_setpinvalue+0xda>
     a8a:	34 c0       	rjmp	.+104    	; 0xaf4 <DIO_setpinvalue+0xfa>
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     a8c:	2b b3       	in	r18, 0x1b	; 27
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	02 c0       	rjmp	.+4      	; 0xa98 <DIO_setpinvalue+0x9e>
     a94:	88 0f       	add	r24, r24
     a96:	99 1f       	adc	r25, r25
     a98:	6a 95       	dec	r22
     a9a:	e2 f7       	brpl	.-8      	; 0xa94 <DIO_setpinvalue+0x9a>
     a9c:	82 2b       	or	r24, r18
     a9e:	8b bb       	out	0x1b, r24	; 27
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     aa0:	80 e0       	ldi	r24, 0x00	; 0
		
		switch(u8_a_portid)
		{
			case DIO_PORTA:
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     aa2:	08 95       	ret
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     aa4:	28 b3       	in	r18, 0x18	; 24
     aa6:	81 e0       	ldi	r24, 0x01	; 1
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	02 c0       	rjmp	.+4      	; 0xab0 <DIO_setpinvalue+0xb6>
     aac:	88 0f       	add	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	6a 95       	dec	r22
     ab2:	e2 f7       	brpl	.-8      	; 0xaac <DIO_setpinvalue+0xb2>
     ab4:	82 2b       	or	r24, r18
     ab6:	88 bb       	out	0x18, r24	; 24
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     ab8:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTA , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTB:
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     aba:	08 95       	ret
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     abc:	25 b3       	in	r18, 0x15	; 21
     abe:	81 e0       	ldi	r24, 0x01	; 1
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	02 c0       	rjmp	.+4      	; 0xac8 <DIO_setpinvalue+0xce>
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	6a 95       	dec	r22
     aca:	e2 f7       	brpl	.-8      	; 0xac4 <DIO_setpinvalue+0xca>
     acc:	82 2b       	or	r24, r18
     ace:	85 bb       	out	0x15, r24	; 21
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     ad0:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTB , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTC:
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     ad2:	08 95       	ret
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
     ad4:	22 b3       	in	r18, 0x12	; 18
     ad6:	81 e0       	ldi	r24, 0x01	; 1
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	02 c0       	rjmp	.+4      	; 0xae0 <DIO_setpinvalue+0xe6>
     adc:	88 0f       	add	r24, r24
     ade:	99 1f       	adc	r25, r25
     ae0:	6a 95       	dec	r22
     ae2:	e2 f7       	brpl	.-8      	; 0xadc <DIO_setpinvalue+0xe2>
     ae4:	82 2b       	or	r24, r18
     ae6:	82 bb       	out	0x12, r24	; 18
/* RETURNS : PinValue_t                                           */
/******************************************************************/
PinValue_t DIO_setpinvalue(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t u8_a_pinval)
{
	
	PinValue_t en_a_valstate = VALID_VALUE ; /** VARIABLE TO RETURN THE STATUS OF VALUE **/ 
     ae8:	80 e0       	ldi	r24, 0x00	; 0
			set_bit(PORTC , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
     aea:	08 95       	ret
			break;
		} 
		break;
		
		default :
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	08 95       	ret
			case DIO_PORTD:
			clear_bit(PORTD , u8_a_pinid);       /** SET THIS PIN AS LOW **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
     af0:	81 e0       	ldi	r24, 0x01	; 1
     af2:	08 95       	ret
			case DIO_PORTD:
			set_bit(PORTD , u8_a_pinid);         /** SET THIS PIN AS HIGH  **/
			break;
			
			default:
			en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
     af4:	81 e0       	ldi	r24, 0x01	; 1
		en_a_valstate = NOT_VALID_VALUE ;  /** RETURN VALUE AS NOT VALID **/
		break ;
	} 
	
	return en_a_valstate ; /** RETURN THE FINAL STATE OF THE FUNCTION */
}
     af6:	08 95       	ret

00000af8 <DIO_readpin>:
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	99 f0       	breq	.+38     	; 0xb22 <DIO_readpin+0x2a>
     afc:	28 f0       	brcs	.+10     	; 0xb08 <DIO_readpin+0x10>
     afe:	82 30       	cpi	r24, 0x02	; 2
     b00:	e9 f0       	breq	.+58     	; 0xb3c <DIO_readpin+0x44>
     b02:	83 30       	cpi	r24, 0x03	; 3
     b04:	41 f1       	breq	.+80     	; 0xb56 <DIO_readpin+0x5e>
     b06:	34 c0       	rjmp	.+104    	; 0xb70 <DIO_readpin+0x78>
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     b08:	89 b3       	in	r24, 0x19	; 25
     b0a:	90 e0       	ldi	r25, 0x00	; 0
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <DIO_readpin+0x1a>
     b0e:	95 95       	asr	r25
     b10:	87 95       	ror	r24
     b12:	6a 95       	dec	r22
     b14:	e2 f7       	brpl	.-8      	; 0xb0e <DIO_readpin+0x16>
     b16:	81 70       	andi	r24, 0x01	; 1
     b18:	89 bb       	out	0x19, r24	; 25
     b1a:	fa 01       	movw	r30, r20
     b1c:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     b1e:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid)  /** SWITCH CASE ON PORT ID **/
	{
		case DIO_PORTA:               /** PORTA  **/
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     b20:	08 95       	ret
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     b22:	86 b3       	in	r24, 0x16	; 22
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	02 c0       	rjmp	.+4      	; 0xb2c <DIO_readpin+0x34>
     b28:	95 95       	asr	r25
     b2a:	87 95       	ror	r24
     b2c:	6a 95       	dec	r22
     b2e:	e2 f7       	brpl	.-8      	; 0xb28 <DIO_readpin+0x30>
     b30:	81 70       	andi	r24, 0x01	; 1
     b32:	86 bb       	out	0x16, r24	; 22
     b34:	fa 01       	movw	r30, r20
     b36:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     b38:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINA , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTB:               /** PORTB  **/
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     b3a:	08 95       	ret
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     b3c:	83 b3       	in	r24, 0x13	; 19
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	02 c0       	rjmp	.+4      	; 0xb46 <DIO_readpin+0x4e>
     b42:	95 95       	asr	r25
     b44:	87 95       	ror	r24
     b46:	6a 95       	dec	r22
     b48:	e2 f7       	brpl	.-8      	; 0xb42 <DIO_readpin+0x4a>
     b4a:	81 70       	andi	r24, 0x01	; 1
     b4c:	83 bb       	out	0x13, r24	; 19
     b4e:	fa 01       	movw	r30, r20
     b50:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     b52:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINB , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTC:               /** PORTC  **/
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     b54:	08 95       	ret
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
     b56:	80 b3       	in	r24, 0x10	; 16
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	02 c0       	rjmp	.+4      	; 0xb60 <DIO_readpin+0x68>
     b5c:	95 95       	asr	r25
     b5e:	87 95       	ror	r24
     b60:	6a 95       	dec	r22
     b62:	e2 f7       	brpl	.-8      	; 0xb5c <DIO_readpin+0x64>
     b64:	81 70       	andi	r24, 0x01	; 1
     b66:	80 bb       	out	0x10, r24	; 16
     b68:	fa 01       	movw	r30, r20
     b6a:	80 83       	st	Z, r24
/* INPUT   : u8_a_portid , PINID , POINTER TO SET THE VALUE IN IT      */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_readpin(uint8_t u8_a_portid , uint8_t u8_a_pinid , uint8_t* u8_a_val)
{
	PinRead_t en_a_Pinstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     b6c:	80 e0       	ldi	r24, 0x00	; 0
		*u8_a_val = get_bit(PINC , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
		
		case DIO_PORTD:               /** PORTD  **/
		*u8_a_val = get_bit(PIND , u8_a_pinid); /** GET THE VALUE OF THE BIT **/
		break;
     b6e:	08 95       	ret
		
		default:
		en_a_Pinstate = NOT_VALID_READ ;  /** READ IS NOT VALID  **/
     b70:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/	
}
     b72:	08 95       	ret

00000b74 <DIO_togglepin>:
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
     b74:	81 30       	cpi	r24, 0x01	; 1
     b76:	91 f0       	breq	.+36     	; 0xb9c <DIO_togglepin+0x28>
     b78:	28 f0       	brcs	.+10     	; 0xb84 <DIO_togglepin+0x10>
     b7a:	82 30       	cpi	r24, 0x02	; 2
     b7c:	d9 f0       	breq	.+54     	; 0xbb4 <DIO_togglepin+0x40>
     b7e:	83 30       	cpi	r24, 0x03	; 3
     b80:	29 f1       	breq	.+74     	; 0xbcc <DIO_togglepin+0x58>
     b82:	30 c0       	rjmp	.+96     	; 0xbe4 <DIO_togglepin+0x70>
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
     b84:	2b b3       	in	r18, 0x1b	; 27
     b86:	81 e0       	ldi	r24, 0x01	; 1
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	02 c0       	rjmp	.+4      	; 0xb90 <DIO_togglepin+0x1c>
     b8c:	88 0f       	add	r24, r24
     b8e:	99 1f       	adc	r25, r25
     b90:	6a 95       	dec	r22
     b92:	e2 f7       	brpl	.-8      	; 0xb8c <DIO_togglepin+0x18>
     b94:	82 27       	eor	r24, r18
     b96:	8b bb       	out	0x1b, r24	; 27
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     b98:	80 e0       	ldi	r24, 0x00	; 0
	
	switch(u8_a_portid) /** SWITCH ON THE PORT ID **/
	{
		case DIO_PORTA:
		toggle_bit(PORTA , u8_a_pinid);
		break;
     b9a:	08 95       	ret
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
     b9c:	28 b3       	in	r18, 0x18	; 24
     b9e:	81 e0       	ldi	r24, 0x01	; 1
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	02 c0       	rjmp	.+4      	; 0xba8 <DIO_togglepin+0x34>
     ba4:	88 0f       	add	r24, r24
     ba6:	99 1f       	adc	r25, r25
     ba8:	6a 95       	dec	r22
     baa:	e2 f7       	brpl	.-8      	; 0xba4 <DIO_togglepin+0x30>
     bac:	82 27       	eor	r24, r18
     bae:	88 bb       	out	0x18, r24	; 24
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     bb0:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTA , u8_a_pinid);
		break;
		
		case DIO_PORTB:
		toggle_bit(PORTB , u8_a_pinid);
		break;
     bb2:	08 95       	ret
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
     bb4:	25 b3       	in	r18, 0x15	; 21
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	02 c0       	rjmp	.+4      	; 0xbc0 <DIO_togglepin+0x4c>
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	6a 95       	dec	r22
     bc2:	e2 f7       	brpl	.-8      	; 0xbbc <DIO_togglepin+0x48>
     bc4:	82 27       	eor	r24, r18
     bc6:	85 bb       	out	0x15, r24	; 21
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     bc8:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTB , u8_a_pinid);
		break;
		
		case DIO_PORTC:
		toggle_bit(PORTC , u8_a_pinid);
		break;
     bca:	08 95       	ret
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
     bcc:	22 b3       	in	r18, 0x12	; 18
     bce:	81 e0       	ldi	r24, 0x01	; 1
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	02 c0       	rjmp	.+4      	; 0xbd8 <DIO_togglepin+0x64>
     bd4:	88 0f       	add	r24, r24
     bd6:	99 1f       	adc	r25, r25
     bd8:	6a 95       	dec	r22
     bda:	e2 f7       	brpl	.-8      	; 0xbd4 <DIO_togglepin+0x60>
     bdc:	82 27       	eor	r24, r18
     bde:	82 bb       	out	0x12, r24	; 18
/* INPUT   : u8_a_portid , PINID                                  */
/* RETURNS : PinRead_t                                            */
/******************************************************************/
PinRead_t DIO_togglepin(uint8_t u8_a_portid , uint8_t u8_a_pinid )
{
	PinRead_t en_a_Pinreadstate = VALID_READ ;  /** VARIABLE TO HOLD THE FUNCTION ERROR STATE */
     be0:	80 e0       	ldi	r24, 0x00	; 0
		toggle_bit(PORTC , u8_a_pinid);
		break;
		
		case DIO_PORTD:
		toggle_bit(PORTD , u8_a_pinid);
		break;
     be2:	08 95       	ret
		
		default:
		/** DO NOTHING **/
		en_a_Pinreadstate = NOT_VALID_READ ; /** RETURN AN ERROR **/
     be4:	81 e0       	ldi	r24, 0x01	; 1
		break;
	} 
	
	return en_a_Pinreadstate ; /** RETURN THE FINAL STATE OF THE FUNCTION **/
}
     be6:	08 95       	ret

00000be8 <TMR0_init>:
	 /* TIMER MODE OF TMR0 */
	#elif TIMER0_CLK_SRC == INTERNAL_CLK_SRC
	
	 #if TIMER0_MODE == TMR0_NORMAL_MODE
	 
	 clear_bit(TCCR0 , 7);
     be8:	83 b7       	in	r24, 0x33	; 51
     bea:	8f 77       	andi	r24, 0x7F	; 127
     bec:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 6);
     bee:	83 b7       	in	r24, 0x33	; 51
     bf0:	8f 7b       	andi	r24, 0xBF	; 191
     bf2:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 3);
     bf4:	83 b7       	in	r24, 0x33	; 51
     bf6:	87 7f       	andi	r24, 0xF7	; 247
     bf8:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 4);
     bfa:	83 b7       	in	r24, 0x33	; 51
     bfc:	8f 7e       	andi	r24, 0xEF	; 239
     bfe:	83 bf       	out	0x33, r24	; 51
	 clear_bit(TCCR0 , 5);
     c00:	83 b7       	in	r24, 0x33	; 51
     c02:	8f 7d       	andi	r24, 0xDF	; 223
     c04:	83 bf       	out	0x33, r24	; 51
	  #endif
	 #endif
	#endif
	
	return en_a_initstatus ; /** RETURN THE STATUS OF INITIALIZATION **/
}
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	08 95       	ret

00000c0a <TMR0_start>:
{
	TMR0_start_error en_a_startstatus = VALID_START ; /** VARIABLE TO RETURN THE STATUS OF START **/
	
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024
	
	set_bit(TCCR0 , 0);
     c0a:	83 b7       	in	r24, 0x33	; 51
     c0c:	81 60       	ori	r24, 0x01	; 1
     c0e:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
     c10:	83 b7       	in	r24, 0x33	; 51
     c12:	8d 7f       	andi	r24, 0xFD	; 253
     c14:	83 bf       	out	0x33, r24	; 51
	set_bit(TCCR0 , 2);
     c16:	83 b7       	in	r24, 0x33	; 51
     c18:	84 60       	ori	r24, 0x04	; 4
     c1a:	83 bf       	out	0x33, r24	; 51
	en_a_startstatus = VALID_START ; /** START DONE PROBERLY **/
	
	#endif
	
	return en_a_startstatus ; /** RETURN THE STATUS **/
}
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	08 95       	ret

00000c20 <TMR0_stop>:
TMR0_stop_error TMR0_stop(void)
{
	TMR0_stop_error en_a_stopStatus = VALID_STOP ; /** VARIABLE TO RETURN THE STATUS **/
	
	/** SET CONFIGURATIONS AS NO CLOCK SOURCE **/
	clear_bit(TCCR0 , 0);
     c20:	83 b7       	in	r24, 0x33	; 51
     c22:	8e 7f       	andi	r24, 0xFE	; 254
     c24:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 1);
     c26:	83 b7       	in	r24, 0x33	; 51
     c28:	8d 7f       	andi	r24, 0xFD	; 253
     c2a:	83 bf       	out	0x33, r24	; 51
	clear_bit(TCCR0 , 2);
     c2c:	83 b7       	in	r24, 0x33	; 51
     c2e:	8b 7f       	andi	r24, 0xFB	; 251
     c30:	83 bf       	out	0x33, r24	; 51
	
	en_a_stopStatus = VALID_STOP ; /** STOP DONE PROPERLY **/
	
	return en_a_stopStatus ; /** RETURN THE STATUS **/
	
}
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	08 95       	ret

00000c36 <TMR0_delayms>:
	/******************************************************************************************/
	/**               THIS CALCULATIONS CONFIGURED AS F_CPU   16 MHZ                         **/
	/******************************************************************************************/
	#if TIMER0_PRESCALER_VAL == PRESCALER_1024  /** CHECK THE PRESCALLER FROM CONFIG FILE **/
	 
        u32_gs_tmr0nuofovs = (u32_a_delayms / 16.384);   /** CALCULATING NUMBER OF OVERFLOWS ( DESIRED DELAY / TIME OF OVER FLOW ) **/ 
     c36:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <__floatunsisf>
     c3a:	2f e6       	ldi	r18, 0x6F	; 111
     c3c:	32 e1       	ldi	r19, 0x12	; 18
     c3e:	43 e8       	ldi	r20, 0x83	; 131
     c40:	51 e4       	ldi	r21, 0x41	; 65
     c42:	0e 94 57 06 	call	0xcae	; 0xcae <__divsf3>
     c46:	0e 94 c9 06 	call	0xd92	; 0xd92 <__fixunssfsi>
     c4a:	60 93 ea 00 	sts	0x00EA, r22	; 0x8000ea <u32_gs_tmr0nuofovs>
     c4e:	70 93 eb 00 	sts	0x00EB, r23	; 0x8000eb <u32_gs_tmr0nuofovs+0x1>
     c52:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <u32_gs_tmr0nuofovs+0x2>
     c56:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <u32_gs_tmr0nuofovs+0x3>
	
        TCNT0 = 0 ;   /** SET THE INITIAL VALUE IN TCNT0 REGISTER **/
     c5a:	12 be       	out	0x32, r1	; 50
	
	    en_a_delaystatus = VALID_DELAY ; /** VALID DELAY CONFIGURATIN **/
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
     c5c:	0e 94 05 06 	call	0xc0a	; 0xc0a <TMR0_start>
/** RETURNS    : TMR0_delay                                                    */
/*******************************************************************************/
TMR0_delay_error TMR0_delayms(uint32_t u32_a_delayms)
{
	
	uint32_t u32_a_overflowcounter = 0 ;
     c60:	40 e0       	ldi	r20, 0x00	; 0
     c62:	50 e0       	ldi	r21, 0x00	; 0
     c64:	ba 01       	movw	r22, r20
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
     c66:	0a c0       	rjmp	.+20     	; 0xc7c <TMR0_delayms+0x46>
	{
		while((TIFR & (1 << 0)) == 0); /** DO NOTHING UNTILL THIS FLAG RAISED (OVERFLOW HAPPENED) **/
     c68:	08 b6       	in	r0, 0x38	; 56
     c6a:	00 fe       	sbrs	r0, 0
     c6c:	fd cf       	rjmp	.-6      	; 0xc68 <TMR0_delayms+0x32>
		
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
     c6e:	88 b7       	in	r24, 0x38	; 56
     c70:	81 60       	ori	r24, 0x01	; 1
     c72:	88 bf       	out	0x38, r24	; 56
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
     c74:	4f 5f       	subi	r20, 0xFF	; 255
     c76:	5f 4f       	sbci	r21, 0xFF	; 255
     c78:	6f 4f       	sbci	r22, 0xFF	; 255
     c7a:	7f 4f       	sbci	r23, 0xFF	; 255
	
	#endif
	
	TMR0_start(); /** START TMR0 PRESCALLER **/
	
	while ( u32_a_overflowcounter < u32_gs_tmr0nuofovs ) /** STUCK IN THIS LOOP UNTILL THIS CONDITION IS FALSE **/
     c7c:	80 91 ea 00 	lds	r24, 0x00EA	; 0x8000ea <u32_gs_tmr0nuofovs>
     c80:	90 91 eb 00 	lds	r25, 0x00EB	; 0x8000eb <u32_gs_tmr0nuofovs+0x1>
     c84:	a0 91 ec 00 	lds	r26, 0x00EC	; 0x8000ec <u32_gs_tmr0nuofovs+0x2>
     c88:	b0 91 ed 00 	lds	r27, 0x00ED	; 0x8000ed <u32_gs_tmr0nuofovs+0x3>
     c8c:	48 17       	cp	r20, r24
     c8e:	59 07       	cpc	r21, r25
     c90:	6a 07       	cpc	r22, r26
     c92:	7b 07       	cpc	r23, r27
     c94:	48 f3       	brcs	.-46     	; 0xc68 <TMR0_delayms+0x32>
		set_bit(TIFR , 0);        /** CLEAR THE FLAG BY SOFTWARE **/
		
		u32_a_overflowcounter++ ; /** INCREASE THE OVERFLOWS BY ONE **/
	}
	
	u32_gs_tmr0nuofovs = 0 ; /** REINTIALIZE THE OVERFLOWS COUNTER TO 0 AGAIN **/
     c96:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <u32_gs_tmr0nuofovs>
     c9a:	10 92 eb 00 	sts	0x00EB, r1	; 0x8000eb <u32_gs_tmr0nuofovs+0x1>
     c9e:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <u32_gs_tmr0nuofovs+0x2>
     ca2:	10 92 ed 00 	sts	0x00ED, r1	; 0x8000ed <u32_gs_tmr0nuofovs+0x3>

	TMR0_stop();   /** STOP TMR0 TOSTART FROM 0 WHEN IT CALLED AGAIN **/
     ca6:	0e 94 10 06 	call	0xc20	; 0xc20 <TMR0_stop>
	
	return en_a_delaystatus ; /** RETURN THE STATUS **/
}
     caa:	80 e0       	ldi	r24, 0x00	; 0
     cac:	08 95       	ret

00000cae <__divsf3>:
     cae:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <__divsf3x>
     cb2:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__fp_round>
     cb6:	0e 94 45 07 	call	0xe8a	; 0xe8a <__fp_pscB>
     cba:	58 f0       	brcs	.+22     	; 0xcd2 <__divsf3+0x24>
     cbc:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__fp_pscA>
     cc0:	40 f0       	brcs	.+16     	; 0xcd2 <__divsf3+0x24>
     cc2:	29 f4       	brne	.+10     	; 0xcce <__divsf3+0x20>
     cc4:	5f 3f       	cpi	r21, 0xFF	; 255
     cc6:	29 f0       	breq	.+10     	; 0xcd2 <__divsf3+0x24>
     cc8:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_inf>
     ccc:	51 11       	cpse	r21, r1
     cce:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_szero>
     cd2:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__fp_nan>

00000cd6 <__divsf3x>:
     cd6:	0e 94 5d 07 	call	0xeba	; 0xeba <__fp_split3>
     cda:	68 f3       	brcs	.-38     	; 0xcb6 <__divsf3+0x8>

00000cdc <__divsf3_pse>:
     cdc:	99 23       	and	r25, r25
     cde:	b1 f3       	breq	.-20     	; 0xccc <__divsf3+0x1e>
     ce0:	55 23       	and	r21, r21
     ce2:	91 f3       	breq	.-28     	; 0xcc8 <__divsf3+0x1a>
     ce4:	95 1b       	sub	r25, r21
     ce6:	55 0b       	sbc	r21, r21
     ce8:	bb 27       	eor	r27, r27
     cea:	aa 27       	eor	r26, r26
     cec:	62 17       	cp	r22, r18
     cee:	73 07       	cpc	r23, r19
     cf0:	84 07       	cpc	r24, r20
     cf2:	38 f0       	brcs	.+14     	; 0xd02 <__divsf3_pse+0x26>
     cf4:	9f 5f       	subi	r25, 0xFF	; 255
     cf6:	5f 4f       	sbci	r21, 0xFF	; 255
     cf8:	22 0f       	add	r18, r18
     cfa:	33 1f       	adc	r19, r19
     cfc:	44 1f       	adc	r20, r20
     cfe:	aa 1f       	adc	r26, r26
     d00:	a9 f3       	breq	.-22     	; 0xcec <__divsf3_pse+0x10>
     d02:	35 d0       	rcall	.+106    	; 0xd6e <__divsf3_pse+0x92>
     d04:	0e 2e       	mov	r0, r30
     d06:	3a f0       	brmi	.+14     	; 0xd16 <__divsf3_pse+0x3a>
     d08:	e0 e8       	ldi	r30, 0x80	; 128
     d0a:	32 d0       	rcall	.+100    	; 0xd70 <__divsf3_pse+0x94>
     d0c:	91 50       	subi	r25, 0x01	; 1
     d0e:	50 40       	sbci	r21, 0x00	; 0
     d10:	e6 95       	lsr	r30
     d12:	00 1c       	adc	r0, r0
     d14:	ca f7       	brpl	.-14     	; 0xd08 <__divsf3_pse+0x2c>
     d16:	2b d0       	rcall	.+86     	; 0xd6e <__divsf3_pse+0x92>
     d18:	fe 2f       	mov	r31, r30
     d1a:	29 d0       	rcall	.+82     	; 0xd6e <__divsf3_pse+0x92>
     d1c:	66 0f       	add	r22, r22
     d1e:	77 1f       	adc	r23, r23
     d20:	88 1f       	adc	r24, r24
     d22:	bb 1f       	adc	r27, r27
     d24:	26 17       	cp	r18, r22
     d26:	37 07       	cpc	r19, r23
     d28:	48 07       	cpc	r20, r24
     d2a:	ab 07       	cpc	r26, r27
     d2c:	b0 e8       	ldi	r27, 0x80	; 128
     d2e:	09 f0       	breq	.+2      	; 0xd32 <__divsf3_pse+0x56>
     d30:	bb 0b       	sbc	r27, r27
     d32:	80 2d       	mov	r24, r0
     d34:	bf 01       	movw	r22, r30
     d36:	ff 27       	eor	r31, r31
     d38:	93 58       	subi	r25, 0x83	; 131
     d3a:	5f 4f       	sbci	r21, 0xFF	; 255
     d3c:	3a f0       	brmi	.+14     	; 0xd4c <__divsf3_pse+0x70>
     d3e:	9e 3f       	cpi	r25, 0xFE	; 254
     d40:	51 05       	cpc	r21, r1
     d42:	78 f0       	brcs	.+30     	; 0xd62 <__divsf3_pse+0x86>
     d44:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_inf>
     d48:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_szero>
     d4c:	5f 3f       	cpi	r21, 0xFF	; 255
     d4e:	e4 f3       	brlt	.-8      	; 0xd48 <__divsf3_pse+0x6c>
     d50:	98 3e       	cpi	r25, 0xE8	; 232
     d52:	d4 f3       	brlt	.-12     	; 0xd48 <__divsf3_pse+0x6c>
     d54:	86 95       	lsr	r24
     d56:	77 95       	ror	r23
     d58:	67 95       	ror	r22
     d5a:	b7 95       	ror	r27
     d5c:	f7 95       	ror	r31
     d5e:	9f 5f       	subi	r25, 0xFF	; 255
     d60:	c9 f7       	brne	.-14     	; 0xd54 <__divsf3_pse+0x78>
     d62:	88 0f       	add	r24, r24
     d64:	91 1d       	adc	r25, r1
     d66:	96 95       	lsr	r25
     d68:	87 95       	ror	r24
     d6a:	97 f9       	bld	r25, 7
     d6c:	08 95       	ret
     d6e:	e1 e0       	ldi	r30, 0x01	; 1
     d70:	66 0f       	add	r22, r22
     d72:	77 1f       	adc	r23, r23
     d74:	88 1f       	adc	r24, r24
     d76:	bb 1f       	adc	r27, r27
     d78:	62 17       	cp	r22, r18
     d7a:	73 07       	cpc	r23, r19
     d7c:	84 07       	cpc	r24, r20
     d7e:	ba 07       	cpc	r27, r26
     d80:	20 f0       	brcs	.+8      	; 0xd8a <__divsf3_pse+0xae>
     d82:	62 1b       	sub	r22, r18
     d84:	73 0b       	sbc	r23, r19
     d86:	84 0b       	sbc	r24, r20
     d88:	ba 0b       	sbc	r27, r26
     d8a:	ee 1f       	adc	r30, r30
     d8c:	88 f7       	brcc	.-30     	; 0xd70 <__divsf3_pse+0x94>
     d8e:	e0 95       	com	r30
     d90:	08 95       	ret

00000d92 <__fixunssfsi>:
     d92:	0e 94 65 07 	call	0xeca	; 0xeca <__fp_splitA>
     d96:	88 f0       	brcs	.+34     	; 0xdba <__fixunssfsi+0x28>
     d98:	9f 57       	subi	r25, 0x7F	; 127
     d9a:	98 f0       	brcs	.+38     	; 0xdc2 <__fixunssfsi+0x30>
     d9c:	b9 2f       	mov	r27, r25
     d9e:	99 27       	eor	r25, r25
     da0:	b7 51       	subi	r27, 0x17	; 23
     da2:	b0 f0       	brcs	.+44     	; 0xdd0 <__fixunssfsi+0x3e>
     da4:	e1 f0       	breq	.+56     	; 0xdde <__fixunssfsi+0x4c>
     da6:	66 0f       	add	r22, r22
     da8:	77 1f       	adc	r23, r23
     daa:	88 1f       	adc	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	1a f0       	brmi	.+6      	; 0xdb6 <__fixunssfsi+0x24>
     db0:	ba 95       	dec	r27
     db2:	c9 f7       	brne	.-14     	; 0xda6 <__fixunssfsi+0x14>
     db4:	14 c0       	rjmp	.+40     	; 0xdde <__fixunssfsi+0x4c>
     db6:	b1 30       	cpi	r27, 0x01	; 1
     db8:	91 f0       	breq	.+36     	; 0xdde <__fixunssfsi+0x4c>
     dba:	0e 94 7f 07 	call	0xefe	; 0xefe <__fp_zero>
     dbe:	b1 e0       	ldi	r27, 0x01	; 1
     dc0:	08 95       	ret
     dc2:	0c 94 7f 07 	jmp	0xefe	; 0xefe <__fp_zero>
     dc6:	67 2f       	mov	r22, r23
     dc8:	78 2f       	mov	r23, r24
     dca:	88 27       	eor	r24, r24
     dcc:	b8 5f       	subi	r27, 0xF8	; 248
     dce:	39 f0       	breq	.+14     	; 0xdde <__fixunssfsi+0x4c>
     dd0:	b9 3f       	cpi	r27, 0xF9	; 249
     dd2:	cc f3       	brlt	.-14     	; 0xdc6 <__fixunssfsi+0x34>
     dd4:	86 95       	lsr	r24
     dd6:	77 95       	ror	r23
     dd8:	67 95       	ror	r22
     dda:	b3 95       	inc	r27
     ddc:	d9 f7       	brne	.-10     	; 0xdd4 <__fixunssfsi+0x42>
     dde:	3e f4       	brtc	.+14     	; 0xdee <__fixunssfsi+0x5c>
     de0:	90 95       	com	r25
     de2:	80 95       	com	r24
     de4:	70 95       	com	r23
     de6:	61 95       	neg	r22
     de8:	7f 4f       	sbci	r23, 0xFF	; 255
     dea:	8f 4f       	sbci	r24, 0xFF	; 255
     dec:	9f 4f       	sbci	r25, 0xFF	; 255
     dee:	08 95       	ret

00000df0 <__floatunsisf>:
     df0:	e8 94       	clt
     df2:	09 c0       	rjmp	.+18     	; 0xe06 <__floatsisf+0x12>

00000df4 <__floatsisf>:
     df4:	97 fb       	bst	r25, 7
     df6:	3e f4       	brtc	.+14     	; 0xe06 <__floatsisf+0x12>
     df8:	90 95       	com	r25
     dfa:	80 95       	com	r24
     dfc:	70 95       	com	r23
     dfe:	61 95       	neg	r22
     e00:	7f 4f       	sbci	r23, 0xFF	; 255
     e02:	8f 4f       	sbci	r24, 0xFF	; 255
     e04:	9f 4f       	sbci	r25, 0xFF	; 255
     e06:	99 23       	and	r25, r25
     e08:	a9 f0       	breq	.+42     	; 0xe34 <__floatsisf+0x40>
     e0a:	f9 2f       	mov	r31, r25
     e0c:	96 e9       	ldi	r25, 0x96	; 150
     e0e:	bb 27       	eor	r27, r27
     e10:	93 95       	inc	r25
     e12:	f6 95       	lsr	r31
     e14:	87 95       	ror	r24
     e16:	77 95       	ror	r23
     e18:	67 95       	ror	r22
     e1a:	b7 95       	ror	r27
     e1c:	f1 11       	cpse	r31, r1
     e1e:	f8 cf       	rjmp	.-16     	; 0xe10 <__floatsisf+0x1c>
     e20:	fa f4       	brpl	.+62     	; 0xe60 <__floatsisf+0x6c>
     e22:	bb 0f       	add	r27, r27
     e24:	11 f4       	brne	.+4      	; 0xe2a <__floatsisf+0x36>
     e26:	60 ff       	sbrs	r22, 0
     e28:	1b c0       	rjmp	.+54     	; 0xe60 <__floatsisf+0x6c>
     e2a:	6f 5f       	subi	r22, 0xFF	; 255
     e2c:	7f 4f       	sbci	r23, 0xFF	; 255
     e2e:	8f 4f       	sbci	r24, 0xFF	; 255
     e30:	9f 4f       	sbci	r25, 0xFF	; 255
     e32:	16 c0       	rjmp	.+44     	; 0xe60 <__floatsisf+0x6c>
     e34:	88 23       	and	r24, r24
     e36:	11 f0       	breq	.+4      	; 0xe3c <__floatsisf+0x48>
     e38:	96 e9       	ldi	r25, 0x96	; 150
     e3a:	11 c0       	rjmp	.+34     	; 0xe5e <__floatsisf+0x6a>
     e3c:	77 23       	and	r23, r23
     e3e:	21 f0       	breq	.+8      	; 0xe48 <__floatsisf+0x54>
     e40:	9e e8       	ldi	r25, 0x8E	; 142
     e42:	87 2f       	mov	r24, r23
     e44:	76 2f       	mov	r23, r22
     e46:	05 c0       	rjmp	.+10     	; 0xe52 <__floatsisf+0x5e>
     e48:	66 23       	and	r22, r22
     e4a:	71 f0       	breq	.+28     	; 0xe68 <__floatsisf+0x74>
     e4c:	96 e8       	ldi	r25, 0x86	; 134
     e4e:	86 2f       	mov	r24, r22
     e50:	70 e0       	ldi	r23, 0x00	; 0
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	2a f0       	brmi	.+10     	; 0xe60 <__floatsisf+0x6c>
     e56:	9a 95       	dec	r25
     e58:	66 0f       	add	r22, r22
     e5a:	77 1f       	adc	r23, r23
     e5c:	88 1f       	adc	r24, r24
     e5e:	da f7       	brpl	.-10     	; 0xe56 <__floatsisf+0x62>
     e60:	88 0f       	add	r24, r24
     e62:	96 95       	lsr	r25
     e64:	87 95       	ror	r24
     e66:	97 f9       	bld	r25, 7
     e68:	08 95       	ret

00000e6a <__fp_inf>:
     e6a:	97 f9       	bld	r25, 7
     e6c:	9f 67       	ori	r25, 0x7F	; 127
     e6e:	80 e8       	ldi	r24, 0x80	; 128
     e70:	70 e0       	ldi	r23, 0x00	; 0
     e72:	60 e0       	ldi	r22, 0x00	; 0
     e74:	08 95       	ret

00000e76 <__fp_nan>:
     e76:	9f ef       	ldi	r25, 0xFF	; 255
     e78:	80 ec       	ldi	r24, 0xC0	; 192
     e7a:	08 95       	ret

00000e7c <__fp_pscA>:
     e7c:	00 24       	eor	r0, r0
     e7e:	0a 94       	dec	r0
     e80:	16 16       	cp	r1, r22
     e82:	17 06       	cpc	r1, r23
     e84:	18 06       	cpc	r1, r24
     e86:	09 06       	cpc	r0, r25
     e88:	08 95       	ret

00000e8a <__fp_pscB>:
     e8a:	00 24       	eor	r0, r0
     e8c:	0a 94       	dec	r0
     e8e:	12 16       	cp	r1, r18
     e90:	13 06       	cpc	r1, r19
     e92:	14 06       	cpc	r1, r20
     e94:	05 06       	cpc	r0, r21
     e96:	08 95       	ret

00000e98 <__fp_round>:
     e98:	09 2e       	mov	r0, r25
     e9a:	03 94       	inc	r0
     e9c:	00 0c       	add	r0, r0
     e9e:	11 f4       	brne	.+4      	; 0xea4 <__fp_round+0xc>
     ea0:	88 23       	and	r24, r24
     ea2:	52 f0       	brmi	.+20     	; 0xeb8 <__fp_round+0x20>
     ea4:	bb 0f       	add	r27, r27
     ea6:	40 f4       	brcc	.+16     	; 0xeb8 <__fp_round+0x20>
     ea8:	bf 2b       	or	r27, r31
     eaa:	11 f4       	brne	.+4      	; 0xeb0 <__fp_round+0x18>
     eac:	60 ff       	sbrs	r22, 0
     eae:	04 c0       	rjmp	.+8      	; 0xeb8 <__fp_round+0x20>
     eb0:	6f 5f       	subi	r22, 0xFF	; 255
     eb2:	7f 4f       	sbci	r23, 0xFF	; 255
     eb4:	8f 4f       	sbci	r24, 0xFF	; 255
     eb6:	9f 4f       	sbci	r25, 0xFF	; 255
     eb8:	08 95       	ret

00000eba <__fp_split3>:
     eba:	57 fd       	sbrc	r21, 7
     ebc:	90 58       	subi	r25, 0x80	; 128
     ebe:	44 0f       	add	r20, r20
     ec0:	55 1f       	adc	r21, r21
     ec2:	59 f0       	breq	.+22     	; 0xeda <__fp_splitA+0x10>
     ec4:	5f 3f       	cpi	r21, 0xFF	; 255
     ec6:	71 f0       	breq	.+28     	; 0xee4 <__fp_splitA+0x1a>
     ec8:	47 95       	ror	r20

00000eca <__fp_splitA>:
     eca:	88 0f       	add	r24, r24
     ecc:	97 fb       	bst	r25, 7
     ece:	99 1f       	adc	r25, r25
     ed0:	61 f0       	breq	.+24     	; 0xeea <__fp_splitA+0x20>
     ed2:	9f 3f       	cpi	r25, 0xFF	; 255
     ed4:	79 f0       	breq	.+30     	; 0xef4 <__fp_splitA+0x2a>
     ed6:	87 95       	ror	r24
     ed8:	08 95       	ret
     eda:	12 16       	cp	r1, r18
     edc:	13 06       	cpc	r1, r19
     ede:	14 06       	cpc	r1, r20
     ee0:	55 1f       	adc	r21, r21
     ee2:	f2 cf       	rjmp	.-28     	; 0xec8 <__fp_split3+0xe>
     ee4:	46 95       	lsr	r20
     ee6:	f1 df       	rcall	.-30     	; 0xeca <__fp_splitA>
     ee8:	08 c0       	rjmp	.+16     	; 0xefa <__fp_splitA+0x30>
     eea:	16 16       	cp	r1, r22
     eec:	17 06       	cpc	r1, r23
     eee:	18 06       	cpc	r1, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	f1 cf       	rjmp	.-30     	; 0xed6 <__fp_splitA+0xc>
     ef4:	86 95       	lsr	r24
     ef6:	71 05       	cpc	r23, r1
     ef8:	61 05       	cpc	r22, r1
     efa:	08 94       	sec
     efc:	08 95       	ret

00000efe <__fp_zero>:
     efe:	e8 94       	clt

00000f00 <__fp_szero>:
     f00:	bb 27       	eor	r27, r27
     f02:	66 27       	eor	r22, r22
     f04:	77 27       	eor	r23, r23
     f06:	cb 01       	movw	r24, r22
     f08:	97 f9       	bld	r25, 7
     f0a:	08 95       	ret

00000f0c <__mulsf3>:
     f0c:	0e 94 99 07 	call	0xf32	; 0xf32 <__mulsf3x>
     f10:	0c 94 4c 07 	jmp	0xe98	; 0xe98 <__fp_round>
     f14:	0e 94 3e 07 	call	0xe7c	; 0xe7c <__fp_pscA>
     f18:	38 f0       	brcs	.+14     	; 0xf28 <__mulsf3+0x1c>
     f1a:	0e 94 45 07 	call	0xe8a	; 0xe8a <__fp_pscB>
     f1e:	20 f0       	brcs	.+8      	; 0xf28 <__mulsf3+0x1c>
     f20:	95 23       	and	r25, r21
     f22:	11 f0       	breq	.+4      	; 0xf28 <__mulsf3+0x1c>
     f24:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_inf>
     f28:	0c 94 3b 07 	jmp	0xe76	; 0xe76 <__fp_nan>
     f2c:	11 24       	eor	r1, r1
     f2e:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_szero>

00000f32 <__mulsf3x>:
     f32:	0e 94 5d 07 	call	0xeba	; 0xeba <__fp_split3>
     f36:	70 f3       	brcs	.-36     	; 0xf14 <__mulsf3+0x8>

00000f38 <__mulsf3_pse>:
     f38:	95 9f       	mul	r25, r21
     f3a:	c1 f3       	breq	.-16     	; 0xf2c <__mulsf3+0x20>
     f3c:	95 0f       	add	r25, r21
     f3e:	50 e0       	ldi	r21, 0x00	; 0
     f40:	55 1f       	adc	r21, r21
     f42:	62 9f       	mul	r22, r18
     f44:	f0 01       	movw	r30, r0
     f46:	72 9f       	mul	r23, r18
     f48:	bb 27       	eor	r27, r27
     f4a:	f0 0d       	add	r31, r0
     f4c:	b1 1d       	adc	r27, r1
     f4e:	63 9f       	mul	r22, r19
     f50:	aa 27       	eor	r26, r26
     f52:	f0 0d       	add	r31, r0
     f54:	b1 1d       	adc	r27, r1
     f56:	aa 1f       	adc	r26, r26
     f58:	64 9f       	mul	r22, r20
     f5a:	66 27       	eor	r22, r22
     f5c:	b0 0d       	add	r27, r0
     f5e:	a1 1d       	adc	r26, r1
     f60:	66 1f       	adc	r22, r22
     f62:	82 9f       	mul	r24, r18
     f64:	22 27       	eor	r18, r18
     f66:	b0 0d       	add	r27, r0
     f68:	a1 1d       	adc	r26, r1
     f6a:	62 1f       	adc	r22, r18
     f6c:	73 9f       	mul	r23, r19
     f6e:	b0 0d       	add	r27, r0
     f70:	a1 1d       	adc	r26, r1
     f72:	62 1f       	adc	r22, r18
     f74:	83 9f       	mul	r24, r19
     f76:	a0 0d       	add	r26, r0
     f78:	61 1d       	adc	r22, r1
     f7a:	22 1f       	adc	r18, r18
     f7c:	74 9f       	mul	r23, r20
     f7e:	33 27       	eor	r19, r19
     f80:	a0 0d       	add	r26, r0
     f82:	61 1d       	adc	r22, r1
     f84:	23 1f       	adc	r18, r19
     f86:	84 9f       	mul	r24, r20
     f88:	60 0d       	add	r22, r0
     f8a:	21 1d       	adc	r18, r1
     f8c:	82 2f       	mov	r24, r18
     f8e:	76 2f       	mov	r23, r22
     f90:	6a 2f       	mov	r22, r26
     f92:	11 24       	eor	r1, r1
     f94:	9f 57       	subi	r25, 0x7F	; 127
     f96:	50 40       	sbci	r21, 0x00	; 0
     f98:	9a f0       	brmi	.+38     	; 0xfc0 <__mulsf3_pse+0x88>
     f9a:	f1 f0       	breq	.+60     	; 0xfd8 <__mulsf3_pse+0xa0>
     f9c:	88 23       	and	r24, r24
     f9e:	4a f0       	brmi	.+18     	; 0xfb2 <__mulsf3_pse+0x7a>
     fa0:	ee 0f       	add	r30, r30
     fa2:	ff 1f       	adc	r31, r31
     fa4:	bb 1f       	adc	r27, r27
     fa6:	66 1f       	adc	r22, r22
     fa8:	77 1f       	adc	r23, r23
     faa:	88 1f       	adc	r24, r24
     fac:	91 50       	subi	r25, 0x01	; 1
     fae:	50 40       	sbci	r21, 0x00	; 0
     fb0:	a9 f7       	brne	.-22     	; 0xf9c <__mulsf3_pse+0x64>
     fb2:	9e 3f       	cpi	r25, 0xFE	; 254
     fb4:	51 05       	cpc	r21, r1
     fb6:	80 f0       	brcs	.+32     	; 0xfd8 <__mulsf3_pse+0xa0>
     fb8:	0c 94 35 07 	jmp	0xe6a	; 0xe6a <__fp_inf>
     fbc:	0c 94 80 07 	jmp	0xf00	; 0xf00 <__fp_szero>
     fc0:	5f 3f       	cpi	r21, 0xFF	; 255
     fc2:	e4 f3       	brlt	.-8      	; 0xfbc <__mulsf3_pse+0x84>
     fc4:	98 3e       	cpi	r25, 0xE8	; 232
     fc6:	d4 f3       	brlt	.-12     	; 0xfbc <__mulsf3_pse+0x84>
     fc8:	86 95       	lsr	r24
     fca:	77 95       	ror	r23
     fcc:	67 95       	ror	r22
     fce:	b7 95       	ror	r27
     fd0:	f7 95       	ror	r31
     fd2:	e7 95       	ror	r30
     fd4:	9f 5f       	subi	r25, 0xFF	; 255
     fd6:	c1 f7       	brne	.-16     	; 0xfc8 <__mulsf3_pse+0x90>
     fd8:	fe 2b       	or	r31, r30
     fda:	88 0f       	add	r24, r24
     fdc:	91 1d       	adc	r25, r1
     fde:	96 95       	lsr	r25
     fe0:	87 95       	ror	r24
     fe2:	97 f9       	bld	r25, 7
     fe4:	08 95       	ret

00000fe6 <__divmodsi4>:
     fe6:	05 2e       	mov	r0, r21
     fe8:	97 fb       	bst	r25, 7
     fea:	1e f4       	brtc	.+6      	; 0xff2 <__divmodsi4+0xc>
     fec:	00 94       	com	r0
     fee:	0e 94 0a 08 	call	0x1014	; 0x1014 <__negsi2>
     ff2:	57 fd       	sbrc	r21, 7
     ff4:	07 d0       	rcall	.+14     	; 0x1004 <__divmodsi4_neg2>
     ff6:	0e 94 12 08 	call	0x1024	; 0x1024 <__udivmodsi4>
     ffa:	07 fc       	sbrc	r0, 7
     ffc:	03 d0       	rcall	.+6      	; 0x1004 <__divmodsi4_neg2>
     ffe:	4e f4       	brtc	.+18     	; 0x1012 <__divmodsi4_exit>
    1000:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__negsi2>

00001004 <__divmodsi4_neg2>:
    1004:	50 95       	com	r21
    1006:	40 95       	com	r20
    1008:	30 95       	com	r19
    100a:	21 95       	neg	r18
    100c:	3f 4f       	sbci	r19, 0xFF	; 255
    100e:	4f 4f       	sbci	r20, 0xFF	; 255
    1010:	5f 4f       	sbci	r21, 0xFF	; 255

00001012 <__divmodsi4_exit>:
    1012:	08 95       	ret

00001014 <__negsi2>:
    1014:	90 95       	com	r25
    1016:	80 95       	com	r24
    1018:	70 95       	com	r23
    101a:	61 95       	neg	r22
    101c:	7f 4f       	sbci	r23, 0xFF	; 255
    101e:	8f 4f       	sbci	r24, 0xFF	; 255
    1020:	9f 4f       	sbci	r25, 0xFF	; 255
    1022:	08 95       	ret

00001024 <__udivmodsi4>:
    1024:	a1 e2       	ldi	r26, 0x21	; 33
    1026:	1a 2e       	mov	r1, r26
    1028:	aa 1b       	sub	r26, r26
    102a:	bb 1b       	sub	r27, r27
    102c:	fd 01       	movw	r30, r26
    102e:	0d c0       	rjmp	.+26     	; 0x104a <__udivmodsi4_ep>

00001030 <__udivmodsi4_loop>:
    1030:	aa 1f       	adc	r26, r26
    1032:	bb 1f       	adc	r27, r27
    1034:	ee 1f       	adc	r30, r30
    1036:	ff 1f       	adc	r31, r31
    1038:	a2 17       	cp	r26, r18
    103a:	b3 07       	cpc	r27, r19
    103c:	e4 07       	cpc	r30, r20
    103e:	f5 07       	cpc	r31, r21
    1040:	20 f0       	brcs	.+8      	; 0x104a <__udivmodsi4_ep>
    1042:	a2 1b       	sub	r26, r18
    1044:	b3 0b       	sbc	r27, r19
    1046:	e4 0b       	sbc	r30, r20
    1048:	f5 0b       	sbc	r31, r21

0000104a <__udivmodsi4_ep>:
    104a:	66 1f       	adc	r22, r22
    104c:	77 1f       	adc	r23, r23
    104e:	88 1f       	adc	r24, r24
    1050:	99 1f       	adc	r25, r25
    1052:	1a 94       	dec	r1
    1054:	69 f7       	brne	.-38     	; 0x1030 <__udivmodsi4_loop>
    1056:	60 95       	com	r22
    1058:	70 95       	com	r23
    105a:	80 95       	com	r24
    105c:	90 95       	com	r25
    105e:	9b 01       	movw	r18, r22
    1060:	ac 01       	movw	r20, r24
    1062:	bd 01       	movw	r22, r26
    1064:	cf 01       	movw	r24, r30
    1066:	08 95       	ret

00001068 <_exit>:
    1068:	f8 94       	cli

0000106a <__stop_program>:
    106a:	ff cf       	rjmp	.-2      	; 0x106a <__stop_program>
